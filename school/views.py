from __future__ import unicode_literals
from django.shortcuts import render , redirect
from django.shortcuts import render, get_object_or_404
from django.http import HttpResponseRedirect, HttpResponse, JsonResponse
from django.contrib.auth import authenticate, login, logout, get_user_model
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.contrib.auth import login as auth_login
#from django.contrib.auth.forms import UserCreationFrom
import smtplib
from django.core.mail import send_mail
from email.message import EmailMessage
from school.models import Dashboard,daily_data_excel,rpt_dailydata,milkdata,RPT_Routewisebillabstract,Dashboard_branch,RPT_Daywiseabstract,rpt_excel_bankwise,Category1,Logmatch,Matchlog,Daily_dataaa,Logfile,Logfilee,Loogfileee,Logfileee,Daily_dataa,Bank1,Formulae1,centerbank,RPT_Milkbillvoucher,Milktype1,Office1,Role1,Route1,Department1,Additions,Usersdata,Branch1,Agent1,Supervisor1,Groupsdata,Person,rpt_bufallomilk,Branchlog,rpt_cowmilk,Excelupload,RPT_consolidatedreport,centerdata,Excelextraction,Loanbillsdata,RPT_Milkbillreport,Signup,Route,Rfr,Referral,Role,Office,Department,QC_Create,DoK_Create,Deposit,RPT_Daywisesreport,BufalloMilkCategory,BufalloMilkCenter,BufalloMilkRoute,Refund,Cloan,Supervisor,Category,QC_Bank,Daily_data,DoK_Entry,QC_Entry,Daily_trans,Milktype,Branch,Formulae,Village,Bank,Agent,Center,CowMilkCategory,CowMilkRoute,CowMilkCenter,Transcation,MinMaxFat,MinMaxBuff,rpt_bankwise
# from school.forms import DocumentForm
from django.utils import timezone
import csv, io 
from django.shortcuts import render
from django.shortcuts import render
# from openpyxl import workbook
#from openpyxl import pandas
from django.contrib import messages 
from django.contrib.auth.models import User, auth ,Group
# import dateparser
import datetime
import pyodbc
from school.resources import ExceluploadReource
from tablib import Dataset
from django.contrib.auth.forms import PasswordChangeForm
from django.contrib.auth import update_session_auth_hash
from datetime import datetime,date, time, timedelta 
from dateutil import parser
from django.core.files.storage import FileSystemStorage
from django.http import HttpResponse
from django.views.generic import View
from django.template.loader import get_template
from kidzee.utils import render_to_pdf
from dateutil.relativedelta import relativedelta 
#import pandas as pd
import sys
import xlwt
from importlib import reload
reload(sys)
from datetime import datetime
from .models import extendeduser
from re import search
#def referral(request):F
#
#   if request.method == 'POST':
#        referralcode=request.POST['referralcode']
#        print(referralcode)
#        if Rfr.objects.filter(refcode=referralcode):
#            return redirect('/signup?referralcode/')
#        else:
#            messages.info(request,'Invalid Credentials')
#            return render(request,'referral.html',locals())
#
#    return render(request,'referral.html')

def email(request):
	send_mail('Hello from jack n jill',
	'Hello there . This is an automated message.',
	'charancherry14799@gmail.com',
	['rajusaicharan.14@gmail.com'],
	fail_silently=False)

	return render(request, 'email.html')







def otp(request):
	branch=Branch.objects.all().values('code').distinct().order_by(('code'))
	if request.method== 'POST':
		otp=request.POST['otp']
		if extendeduser.objects.filter(otp=otp):
			uid=User.objects.last()
			#bid = extendeduser.objects.branch.last()
			bid=extendeduser.objects.values('branch').last()
			#bid1=bid[12:-2]
			#bid = extendeduser.objects.branch.last()
			#print(type(bid))
			print(bid)
			print(type(uid))
			messages.info(request,'Dear  ' +(str(uid)).title()+ ', Please Proced To Login You have successfully Registered under branch : '+str(bid["branch"]))
			#user=request.user.username

			#messages.info(request,'Dear  ' +str(uid)+ ',  CONGRATULATIONS . You have successfully Registered  ')
			return render(request,'login.html',locals())

		else:
			messages.info(request,'Enter Correct Otp')
			return render(request,'otp.html',locals())
			
	else:
		return render(request,'otp.html',locals())


# Module -Login #3 - Referral code - referral.html
# Created by - 2020-12-14 @ Sriya
# Modified by - 2020-12-21 @ Karthik 
# Modified by - 2020-12-21 @ Sriya
def referral(request):
	if request.method == 'POST':
		referralcode=request.POST['referralcode']
		print(referralcode)
		try:
			if Rfr.objects.get(refcode=referralcode):
				return redirect('/signup/'+referralcode+'/')
		except:
			messages.info(request,'Invalid Credentials')
			
		
	return render(request,'referral.html')

def index(request):
	menu=Masters()
	menu.mastersname='branch'
	return render(request,'header.html',{'menu':menu})

# Create your views here.
# Module -Login #1 - Login into system- Login.html
# Created by - 2020-12-14 @ Sriya
# Modified by - 2020-12-22 @ Sriya 
# Modified by - 2020-12-14 @ Sriya
def login(request):
	branch=Branch.objects.all().values('code').distinct().order_by(('code'))
	if request.method== 'POST':
		username=request.POST['username']
		password=request.POST['password']
		branch=request.POST['branch']
		user=auth.authenticate(username=username,password=password)
		if user is not None:
			if request.POST['branch'] == user.extendeduser.branch:
				auth.login(request,user)
				request.session['name']=request.POST['username']
				if user.extendeduser.role=='Admin':
					group=Group.objects.get(name='Admin')
					user.groups.add(group)
				elif user.extendeduser.role=='Manager':
					group = Group.objects.get(name='Manager')
					user.groups.add(group)
				else:
					group = Group.objects.get(name='Operator')
					user.groups.add(group)
				return render(request,'home.html',locals())
			else:
				messages.info(request,'Invalid Branch Credentials')
				return redirect('/login/')
		else:
			messages.info(request,'Invalid Credentials')
			return redirect('/login/')
		
	else:
		return render(request,'login.html',locals())

# Module -Header #5 - Changing of Password - change_password.html
# Created by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Sriya 
# Modified by - 2020-12-14 @ Sriya
def changepassword(request):
	#route= Route.objects.all()
	user1 = User.objects.all()
	if request.method == 'POST':
		username=request.POST["username"]
		password1=request.POST["password1"]
		password2=request.POST["password2"]
		if(password1==password2):
			user=User.objects.get(username=username)
			user.set_password(password1)
			user.save()
		else:
			messages.error(request, 'Please reEnter a correct Password')
		messages.info(request,'Password Changed !! ')				
	return render(request,'apassword.html',locals())

def change_password(request):
	if request.session.has_key('name'):
		if request.method == 'POST':
			if request.user.is_authenticated:
				oldpassword=request.POST["oldpassword"]
				password1=request.POST["password1"]
				password2=request.POST["password2"]     
				if(password1==password2):
					user=User.objects.get(username=request.user.username)
					if user.check_password(oldpassword) == True:                    
						user.set_password(password1)
						user.save() 
					else:
						messages.error(request, 'Please reEnter a correct OLD Password')
						return render(request,'change_password.html',locals())
				else:
					messages.error(request, 'Please reEnter a correct Password')
					return render(request,'apassword.html',locals())    
				messages.info(request,'Password Changed !! ')
		return render(request,'change_password.html',locals()) 
	else:
		return render(request,'index.html',locals())

# Module -Header #5 - Changing of Password - change_password.html
# Created by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Sriya 
# Modified by - 2020-12-14 @ Sriya  
def change_password_done(request):
	return render(request,'change_password_done.html')
# Module -Login #2 - Signup - signup.html
# Created by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Sriya 
# Modified by - 2020-12-14 @ Sriya
def signup(request, slug):
	try:
		# return HttpResponse(slug)
		route1 = Route.objects.all()
		branch=Branch.objects.all().values('code').distinct().order_by(('code'))
		department=Department.objects.all()
		role=Role.objects.all()
		office=Office.objects.all()
		if request.method == 'POST':
			first_name=request.POST['first_name']
			last_name=request.POST['last_name']
			username=request.POST['username']
			password1=request.POST['password1']
			password2=request.POST['password2']
			email=request.POST['email']
			if password1==password2:			
				if User.objects.filter(username=username).exists():
					messages.info(request,'Username Taken')
					return redirect('/signup/'+slug+'/')
				
				else:
					user=User.objects.create_user(username=username,password=password1, email=email,first_name=first_name,last_name=last_name)
					user.save();
					print('user created')
					route1 = Route.objects.all()
					role=request.POST['role'],
					department=request.POST['department'],
					branch=request.POST['branch'],
					office=request.POST['office'],
					#graceperiod=request.POST['graceperiod'],
					mobileno=request.POST['mobileno']				
					newextendeduser=extendeduser(role=request.POST['role'],department=request.POST['department'],branch=request.POST['branch'],referral=slug,office=request.POST['office'],mobileno=mobileno,user=user)
					
					#print(25)
					if request.POST['branch'] == 'KJPuram':
						#print(4)
						newextendeduser.save()
						user.save(using='KJPuram')
						#print(4.1)
						newextendeduser.save(using='KJPuram')
						
						#print(4.2)
					elif request.POST['branch'] == 'HO':
						#print(5)
						newextendeduser.save()
						user.save(using='HO')
						newextendeduser.save(using='HO')		

					elif request.POST['branch'] == 'TKunta':
						#print(5)
						newextendeduser.save()
						user.save(using='TKunta')
						newextendeduser.save(using='TKunta')
						
						#print(5.1)					
						
					
					
					elif request.POST['branch'] == 'KPMitta':
						#print(6)
						newextendeduser.save()
						user.save(using='KPMitta')
						#print(6.5)
						newextendeduser.save(using='KPMitta')
						
						#print(6.1)
					
					elif request.POST['branch'] == 'KCheruvu':
						#print(6)
						newextendeduser.save()
						user.save(using='KCheruvu')
						#print(6.5)
						newextendeduser.save(using='KCheruvu')
						
						#print(6.1)
					
					elif request.POST['branch'] == 'SDN':
						#print(6)
						newextendeduser.save()
						user.save(using='SDN')
						#print(6.5)
						newextendeduser.save(using='SDN')
						
						#print(6.1)
					
					elif request.POST['branch'] == 'SDF':
						#print(6)
						newextendeduser.save()
						user.save(using='SDF')
						#print(6.5)
						newextendeduser.save(using='SDF')
						
						#print(6.1)
					
					elif request.POST['branch'] == 'SDP':
						#print(6)
						newextendeduser.save()
						user.save(using='SDP')
						#print(6.5)
						newextendeduser.save(using='SDP')
						
						#print(6.1)

					elif request.POST['branch'] == 'BRGuda':
						#print(6)
						newextendeduser.save()
						user.save(using='BRGuda')
						#print(6.5)
						newextendeduser.save(using='BRGuda')
						
						#print(6.1)
											
					else:
						#print(7)
						newextendeduser.save()
				#newextendeduser.save()


			else:
				messages.info(request,'password not matching..')
				return render(request,'signup.html',locals())
			dc=Rfr.objects.filter(refcode=slug).delete()
			return render(request,'otp.html',locals())
			
		else:
			return render(request,'signup.html',locals())
	except Exception as err:
		if  search("1062",str(err)):
			messages.error(request,'Mobile Number Already Taken ')
			data = User.objects.filter(username=user).delete()
			print('user deleted')
		else:
			messages.success(request,'Please Enter Mobile number ')
			data = User.objects.filter(username=user).delete()
			print('userdeleted')
			
		return render(request,'signup.html',locals())			
def signup22(request):
	route1 = Route.objects.all()
	branch = Branch.objects.all()
	department=Department.objects.all()
	role=Role.objects.all()
	office=Office.objects.all()
	if request.method == 'POST':
		first_name=request.POST['first_name']
		last_name=request.POST['last_name']
		username=request.POST['username']
		password1=request.POST['password1']
		password2=request.POST['password2']
		email=request.POST['email']
		if password1==password2:
			if User.objects.filter(username=username).exists():
				messages.info(request,'Username Taken')
				return redirect('/signup/')
			elif User.objects.filter(email=email).exists():
				messages.info(request,'Email already Taken')
				return render(request,'signup.html',locals())
			else:
				user=User.objects.create_user(username=username,password=password1, email=email,first_name=first_name,last_name=last_name)
				user.save();
				print('user created')
				route1 = Route.objects.all()
				role=request.POST['role'],
				department=request.POST['department'],
				branch=request.POST['branch'],
				office=request.POST['office'],
				#graceperiod=request.POST['graceperiod'],
				mobileno=request.POST['mobileno']
				newextendeduser=extendeduser(role=role,department=department,branch=branch,office=office,mobileno=mobileno,user=user)
				newextendeduser.save()
		else:
			messages.info(request,'password not matching..')
			return render(request,'signup.html',locals())
		return redirect('/')
	else:
		return render(request,'signup.html',locals())
def usersdata(request):
	if request.method == 'POST':
		username=user.save(),
		role=request.POST['role'],
	return redirect('/signup/')
	
# Module -Masters #1 - Saving Route Values - route.html
# Created by - 2020-12-14 @ 
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Charan
def route(request):
	try:
		route = Route.objects.all()
		if request.session.has_key('name'):
			if request.method == "POST":
				z = request.POST.get('active')
				if z:
					active = True
				else:
					active = False
				brch = request.user.extendeduser.branch
				if request.user.extendeduser.branch == brch:				
					details_form = Route.objects.using(brch).create(
						Route_number = request.POST["routeCode"],
						date_from = date.today(),
						date_to = datetime.datetime.now() + timedelta(days=365 ),
						Route_name = request.POST["routeName"],
						active = active,
						)
					details_form.save(using=brch)
					#messages.success(request, 'Your details have been saved!')
					details_form1 = Route1.objects.using(brch).create(
						Route_number = request.POST["routeCode"],
						date_from = date.today(),
						date_to = datetime.datetime.now() + timedelta(days=365 ),
						Route_name = request.POST["routeName"],
						active = active,
						)
					details_form1.save(using=brch)
					#messages.success(request, 'Your details have been saved!')				
				else:
					
					details_form = Route.objects.create(
						Route_number = request.POST["routeCode"],
						date_from = date.today(),
						date_to = datetime.datetime.now() + timedelta(days=365 ),
						Route_name = request.POST["routeName"],
						active = active,
						)
					details_form.save()
					#messages.success(request, 'Your details have been saved!')
					details_form1 = Route1.objects.create(
						Route_number = request.POST["routeCode"],
						date_from = date.today(),
						date_to = datetime.datetime.now() + timedelta(days=365 ),
						Route_name = request.POST["routeName"],
						active = active,
						)
					details_form1.save()
				messages.success(request, 'Your details have been saved!')
			return render(request,'route.html',locals()) 
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Key field Duplicated:'+request.POST["routeCode"],)
		else:
			messages.success(request,'Invalid Data Entry')
	#messages.info(request,'err')
	return render (request,'route.html',locals())
def manage_route(request):
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				route = Route.objects.using(brch).all()
				ar = Route.objects.using(brch).all()
				#if request.session.has_key('name'):
				route = Route.objects.using(brch).all()
				if request.method == "POST":
					ar = Route.objects.using(brch).all()
				return render(request,'manageroute.html',locals())
				#else:
				#	return render(request,'index.html',locals())
			else:
				route = Route.objects.all()
				ar = Route.objects.all()
				#if request.session.has_key('name'):
				route = Route.objects.all()
				if request.method == "POST":
					ar = Route.objects.all()
				return render(request,'manageroute.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Key field Duplicated:'+request.POST["routeCode"],)
		else:
			messages.success(request,'Invalid Data Entry')
	#messages.info(request,'err')
	return render (request,'manageroute.html',locals())

def manageroute(request):
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
		
				#route = Route.objects.all()
				route = Route.objects.using(brch).all()
				ar = Route.objects.using(brch).all()
				if request.method == "POST":
					ar = Route.objects.using(brch).all()

					#dateH = request.POST["date_t2"]
					#shiftH = request.POST["shift_t2"]
					for index,j in enumerate(request.POST.getlist("routeCode[]")):
						minmaxfat = Route.objects.using(brch).filter(id=request.POST.getlist("dcid3[]")[index]).update( 
							Route_number = request.POST.getlist("routeCode[]")[index],
							#date_from = date.today(),
							#date_to = datetime.datetime.now() + timedelta(days=365 ),
							Route_name = request.POST.getlist("routeName[]")[index],
							#active = active, 
							remove= request.POST.getlist("remove[]")[index],
							)
					
					messages.success(request, 'Your details have been saved!')

					data = Route.objects.using(brch).filter(remove='Y').delete()
			else:#route = Route.objects.all()
				route = Route.objects.all()
				ar = Route.objects.all()
				if request.method == "POST":
					ar = Route.objects.all()

					#dateH = request.POST["date_t2"]
					#shiftH = request.POST["shift_t2"]
					for index,j in enumerate(request.POST.getlist("routeCode[]")):
						minmaxfat = Route.objects.filter(id=request.POST.getlist("dcid3[]")[index]).update( 
							Route_number = request.POST.getlist("routeCode[]")[index],
							#date_from = date.today(),
							#date_to = datetime.datetime.now() + timedelta(days=365 ),
							Route_name = request.POST.getlist("routeName[]")[index],
							#active = active, 
							remove= request.POST.getlist("remove[]")[index],
							)
					
					messages.success(request, 'Your details have been saved!')

					data = Route.objects.filter(remove='Y').delete()

				
			
				

				#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'manageroute1.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Key field Duplicated:'+request.POST["routeCode"],)
		else:
			messages.success(request,'Invalid Data Entry')
	#messages.info(request,'err')
	return render (request,'manageroute1.html',locals())

# Module -Masters #2 - Saving supervisor Values - supervisor.html
# Created by - 2020-12-14 @ 
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Charan
def supervisor(request):
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				route = Route.objects.using(brch).all()
				if request.method == "POST":				
					details_form = Supervisor.objects.using(brch).create(
						code = request.POST["code"],
						name = request.POST["name"],
						Route_attached=request.POST["route"],
						Route_attached1=request.POST["route1"],
						Route_attached2=request.POST["route2"],
						)
					details_form.save(using=brch)
					messages.success(request, 'Your details have been saved!')
			else:
				route = Route.objects.all()
				if request.method == "POST":
					details_form = Supervisor.objects.create(
						code = request.POST["code"],
						name = request.POST["name"],
						Route_attached=request.POST["route"],
						Route_attached1=request.POST["route1"],
						Route_attached2=request.POST["route2"],
						)
					details_form.save()
					messages.success(request, 'Your details have been saved!')
			return render(request,'supervisor.html',locals())  
		else:
			return render(request,'index.html',locals())
	except Exception as err:
			if search("1062",str(err)):
				messages.error(request,'Supervisor Code Duplicated:'+request.POST["code"])
			else:
				messages.success(request,'Invalid Data Entry')
		#messages.info(request,'err')
	return render (request,'supervisor.html',locals())	
def managesupervisor(request):
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				supervisor = Supervisor.objects.using(brch).all()
				al = Supervisor.objects.using(brch).all()
				
				route = Route.objects.using(brch).all()
				if request.method == "POST":
					al = Supervisor.objects.using(brch).all()
			else:
				supervisor = Supervisor.objects.all()
				al = Supervisor.objects.all()
		
				route = Route.objects.all()
				if request.method == "POST":
					al = Supervisor.objects.all()

				#dateH = request.POST["date_t2"]
				#shiftH = request.POST["shift_t2"]
				#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'manage_supervisor.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
			if search("1062",str(err)):
				messages.error(request,'Supervisor Code Duplicated:'+request.POST["code"])
			else:
				messages.success(request,'Invalid Data Entry')
		#messages.info(request,'err')
	return render (request,'manage_supervisor.html',locals())	
		

def manage_supervisor(request):
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				supervisor = Supervisor.objects.using(brch).all()
				al = Supervisor.objects.using(brch).all()
			
				route = Route.objects.using(brch).all()
				if request.method == "POST":
					al = Supervisor.objects.using(brch).all()

					#dateH = request.POST["date_t2"]
					#shiftH = request.POST["shift_t2"]
					for index,j in enumerate(request.POST.getlist("code[]")):
						minmaxfat = Supervisor.objects.using(brch).filter(id=request.POST.getlist("dcid2[]")[index]).update( 
							code = request.POST.getlist("code[]")[index],
							name = request.POST.getlist("name[]")[index],
							Route_attached=request.POST.getlist("route[]")[index],
							Route_attached1=request.POST.getlist("route1[]")[index],
							Route_attached2=request.POST.getlist("route2[]")[index],
							remove= request.POST.getlist("remove[]")[index],
							)
					
					messages.success(request, 'Your details have been saved!')

					data = Supervisor.objects.using(brch).filter(remove='Y').delete()
			else:
				supervisor = Supervisor.objects.all()
				al = Supervisor.objects.all()
		
				route = Route.objects.all()
				if request.method == "POST":
					al = Supervisor.objects.all()

					#dateH = request.POST["date_t2"]
					#shiftH = request.POST["shift_t2"]
					for index,j in enumerate(request.POST.getlist("code[]")):
						minmaxfat = Supervisor.objects.filter(id=request.POST.getlist("dcid2[]")[index]).update( 
							code = request.POST.getlist("code[]")[index],
							name = request.POST.getlist("name[]")[index],
							Route_attached=request.POST.getlist("route[]")[index],
							Route_attached1=request.POST.getlist("route1[]")[index],
							Route_attached2=request.POST.getlist("route2[]")[index],
							remove= request.POST.getlist("remove[]")[index],
							)
					
					messages.success(request, 'Your details have been saved!')

					data = Supervisor.objects.filter(remove='Y').delete()			
				
			
				

				#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'managesupervisor1.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
			if search("1062",str(err)):
				messages.error(request,'Supervisor Code Duplicated:'+request.POST["code"])
			else:
				messages.success(request,'Invalid Data Entry')
		#messages.info(request,'err')
	return render (request,'managesupervisor1.html',locals())# Module -Masters #3 - Saving agent Values - agent.html
# Created by - 2020-12-14 @ 
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Charan

def agent(request):
	try:
		if request.session.has_key('name'):		
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				agent = Agent.objects.using(brch).all()
				route = Route.objects.using(brch).all()
				if request.method == "POST":
				#branch=request.user.extendeduser.branch
					details_form = Agent.objects.using(brch).create(
						code = request.POST["code"],
						name = request.POST["name"], 
						Route_attached=request.POST["route"],
						Route_attached1=request.POST["route1"],
						Route_attached2=request.POST["route2"],
						)
					details_form.save(using=brch)

					details_form1 = Agent1.objects.using(brch).create(
						code = request.POST["code"],
						name = request.POST["name"],
						Route_attached=request.POST["route"],
						Route_attached1=request.POST["route1"],
						Route_attached2=request.POST["route2"],
						)
					details_form1.save(using=brch)
					messages.success(request, 'Your details have been saved!')
				return render(request,'agent.html',locals())
					
			else:
				route = Route.objects.all()
				details_form = Agent.objects.create(
					code = request.POST["code"],
					name = request.POST["name"],
					Route_attached=request.POST["route"],
					Route_attached1=request.POST["route1"],
					Route_attached2=request.POST["route2"],
					)
				details_form.save()
				details_form1 = Agent1.objects.create(
					code = request.POST["code"],
					name = request.POST["name"],
					Route_attached=request.POST["route"],
					Route_attached1=request.POST["route1"],
					Route_attached2=request.POST["route2"],
					)
				details_form1.save()
				messages.success(request, 'Your details have been saved!')
			return render(request,'agent.html',locals())

		else:
			return render(request,'index.html',locals())
	except Exception as err:
			if search("1062",str(err)):
				messages.error(request,'Agent Code Duplicated:'+request.POST["code"])
			else:
				messages.success(request,'Invalid Data Entry')
		#messages.info(request,'err')
	return render (request,'agent.html',locals())	


def manageagent(request):
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				agent = Agent.objects.using(brch).all()
				ak = Agent.objects.using(brch).all()
				
				route = Route.objects.using(brch).all()
				if request.method == "POST":
					ak = Agent.objects.using(brch).all()
			else:
				agent = Agent.objects.all()
				ak = Agent.objects.all()
				
				route = Route.objects.all()
				if request.method == "POST":
					ak = Agent.objects.all()


				#dateH = request.POST["date_t2"]
				#shiftH = request.POST["shift_t2"]
						#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'manage.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
			if search("1062",str(err)):
				messages.error(request,'Agent Code Duplicated:'+request.POST["code"])
			else:
				messages.success(request,'Invalid Data Entry')
		#messages.info(request,'err')
	return render (request,'manage.html',locals())	

def manage(request):
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				agent = Agent.objects.using(brch).all()
				ak = Agent.objects.using(brch).all()
				
				route = Route.objects.using(brch).all()
				if request.method == "POST":
					ak = Agent.objects.using(brch).all()

				#dateH = request.POST["date_t2"]
				#shiftH = request.POST["shift_t2"]
					for index,j in enumerate(request.POST.getlist("code[]")):
						minmaxfat = Agent.objects.using(brch).filter(id=request.POST.getlist("dcid1[]")[index]).update( 
							code = request.POST.getlist("code[]")[index],
							name = request.POST.getlist("name[]")[index],
							Route_attached=request.POST.getlist("route[]")[index],
							Route_attached1=request.POST.getlist("route1[]")[index],
							Route_attached2=request.POST.getlist("route2[]")[index],
							remove= request.POST.getlist("remove[]")[index],
							)
					
					messages.success(request, 'Your details have been saved!')

					data = Agent.objects.using(brch).filter(remove='Y').delete()
			else:
				agent = Agent.objects.all()
				ak = Agent.objects.all()
				
				route = Route.objects.all()
				if request.method == "POST":
					ak = Agent.objects.all()

				#dateH = request.POST["date_t2"]
				#shiftH = request.POST["shift_t2"]
					for index,j in enumerate(request.POST.getlist("code[]")):
						minmaxfat = Agent.objects.filter(id=request.POST.getlist("dcid1[]")[index]).update( 
							code = request.POST.getlist("code[]")[index],
							name = request.POST.getlist("name[]")[index],
							Route_attached=request.POST.getlist("route[]")[index],
							Route_attached1=request.POST.getlist("route1[]")[index],
							Route_attached2=request.POST.getlist("route2[]")[index],
							remove= request.POST.getlist("remove[]")[index],
							)
					
					messages.success(request, 'Your details have been saved!')

					data = Agent.objects.filter(remove='Y').delete()			
				
			
				

				#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'manageagent1.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
			if search("1062",str(err)):
				messages.error(request,'Agent Code Duplicated:'+request.POST["code"])
			else:
				messages.success(request,'Invalid Data Entry')
		#messages.info(request,'err')
	return render (request,'manageagent1.html',locals())
# Module -Masters #4 - Saving department Values - department.html
# Created by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Sriya 
# Modified by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Charan
def department(request):
	try:
		department = Department.objects.all()
		if request.session.has_key('name'):
			if request.method == "POST":
				details_form = Department.objects.create(
					dcode = request.POST["code"],
					#Route_attached = request.POST["attached"],
					dname = request.POST["name"],
					)
				details_form.save()
				details_form1 = Department1.objects.create(
					dcode = request.POST["code"],
					#Route_attached = request.POST["attached"],
					dname = request.POST["name"],
					)
				details_form1.save()
				messages.success(request, 'Your details have been saved!')
			return render(request,'department.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
			if search("1062",str(err)):
				messages.error(request,'Department Code Duplicated:'+request.POST["code"])
			else:
				messages.success(request,'Invalid Data Entry')
		#messages.info(request,'err')
	return render (request,'department.html',locals())		

def manage_department(request):
	try:
		department = Department.objects.all()
		ad = Department.objects.all()
		if request.session.has_key('name'):
			#route = Route.objects.all()
			if request.method == "POST":
				ad = Department.objects.all()

				#dateH = request.POST["date_t2"]
				#shiftH = request.POST["shift_t2"]
				
				
			
				

				#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'managedepartment.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
			if search("1062",str(err)):
				messages.error(request,'Department Code Duplicated:'+request.POST["code"])
			else:
				messages.success(request,'Invalid Data Entry')
		#messages.info(request,'err')
	return render (request,'managedepartment.html',locals())	
def managedepartment(request):
	try:
		department = Department.objects.all()
		ad = Department.objects.all()
		if request.session.has_key('name'):
			#route = Route.objects.all()
			if request.method == "POST":
				ad = Department.objects.all()

				#dateH = request.POST["date_t2"]
				#shiftH = request.POST["shift_t2"]
				for index,j in enumerate(request.POST.getlist("code[]")):
					minmaxfat = Department.objects.filter(id=request.POST.getlist("dcid4[]")[index]).update( 
						dcode = request.POST.getlist("code[]")[index],
						dname = request.POST.getlist("name[]")[index],
						remove= request.POST.getlist("remove[]")[index],
						)
				
				messages.success(request, 'Your details have been saved!')

				data = Department.objects.filter(remove='Y').delete()			
				
			
				

				#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'managedepartment1.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
			if search("1062",str(err)):
				messages.error(request,'Department Code Duplicated:'+request.POST["code"])
			else:
				messages.success(request,'Invalid Data Entry')
		#messages.info(request,'err')
	return render (request,'managedepartment1.html',locals())
# Module -Masters #6 - Saving office Values - office.html
# Created by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Sriya 
# Modified by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Charan
def office(request):
	try:
		office = Office.objects.all()
		if request.session.has_key('name'):
			if request.method == "POST":
				details_form = Office.objects.create(
					ocode = request.POST["code"],
					#Route_attached = request.POST["attached"],
					oname = request.POST["name"],
					)
				details_form.save()
				details_form1 = Office1.objects.create(
					ocode = request.POST["code"],
					#Route_attached = request.POST["attached"],
					oname = request.POST["name"],
					)
				details_form1.save()
				messages.success(request, 'Your details have been saved!')
			return render(request,'office.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Office code Duplicated:'+request.POST["code"])
		else:
			messages.success(request,'Invalid Data Entry')
	return render(request,'office.html',locals())	

def manage_office(request):
	try:
		office = Office.objects.all()
		ao = Office.objects.all()
		if request.session.has_key('name'):
			#route = Route.objects.all()
			if request.method == "POST":
				ao = Office.objects.all()

				
			return render(request,'manageoffice.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Office code Duplicated:'+request.POST["code"])
		else:
			messages.success(request,'Invalid Data Entry')
	return render(request,'manageoffice.html',locals())	

def manageoffice(request):
	try:
		office = Office.objects.all()
		ao = Office.objects.all()
		if request.session.has_key('name'):
			#route = Route.objects.all()
			if request.method == "POST":
				ao = Office.objects.all()

				#dateH = request.POST["date_t2"]
				#shiftH = request.POST["shift_t2"]
				for index,j in enumerate(request.POST.getlist("code[]")):
					minmaxfat = Office.objects.filter(id=request.POST.getlist("dcid6[]")[index]).update( 
						ocode = request.POST.getlist("code[]")[index],
						oname = request.POST.getlist("name[]")[index],
						remove= request.POST.getlist("remove[]")[index],
						)
				
				messages.success(request, 'Your details have been saved!')

				data = Office.objects.filter(remove='Y').delete()			
				
			
				

				#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'manageoffice1.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Office code Duplicated:'+request.POST["code"])
		else:
			messages.success(request,'Invalid Data Entry')
	return render(request,'manageoffice1.html',locals())

# Module -Masters #5 - Saving role Values - role.html
# Created by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Sriya 
# Modified by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Charan
def role(request):
	try:
		role = Role.objects.all()
		if request.session.has_key('name'):
			if request.method == "POST":
				details_form = Role.objects.create(
					rcode = request.POST["code"],
					#Route_attached = request.POST["attached"],
					rname = request.POST["name"],
					)
				details_form.save()
				details_form1 = Role1.objects.create(
					rcode = request.POST["code"],
					#Route_attached = request.POST["attached"],
					rname = request.POST["name"],
					)
				details_form1.save()
				messages.success(request, 'Your details have been saved!')
			return render(request,'role.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Role code Duplicated:'+request.POST["code"])
		else:		
			messages.success(request,'Invalid Data Entry')

	return render(request,'role.html',locals())
def manage_role(request):
	try:
		role = Role.objects.all()
		al = Role.objects.all()
		if request.session.has_key('name'):
			#route = Route.objects.all()
			if request.method == "POST":
				al = Role.objects.all()

				#dateH = request.POST["date_t2"]
				#shiftH = request.POST["shift_t2"]
				
				
			
				

				#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'managerole.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Role code Duplicated:'+request.POST["code"])
		else:		
			messages.success(request,'Invalid Data Entry')

	return render(request,'managerole.html',locals())
def managerole(request):
	try:
		role = Role.objects.all()
		al = Role.objects.all()
		if request.session.has_key('name'):
			#route = Route.objects.all()
			if request.method == "POST":
				al = Role.objects.all()

				#dateH = request.POST["date_t2"]
				#shiftH = request.POST["shift_t2"]
				for index,j in enumerate(request.POST.getlist("code[]")):
					minmaxfat = Role.objects.filter(id=request.POST.getlist("dcid5[]")[index]).update( 
						rcode = request.POST.getlist("code[]")[index],
						rname = request.POST.getlist("name[]")[index],
						remove= request.POST.getlist("remove[]")[index],
						)
				
				messages.success(request, 'Your details have been saved!')

				data = Role.objects.filter(remove='Y').delete()			
				
			
				

				#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'managerole1.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Role code Duplicated:'+request.POST["code"])
		else:		
			messages.success(request,'Invalid Data Entry')

	return render(request,'managerole1.html',locals())

# Module -Masters #7 - Saving village Values - village.html
# Created by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Sriya 
# Modified by - 2020-12-14 @ Sriya
def village(request):
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				route = Route.objects.using(brch).all()
			
				return render(request,'village.html',locals())
		else:
			return render(request,'login.html',locals())
	except Exception as err:

		if search("1062",str(err)):
			messages.error(request,'Village Code Duplicated:'+request.POST["code"])
		else:		
			messages.success(request,'Invalid Data Entry')
	return render(request,'village.html',locals())

def village1(request):
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				route = Route.objects.using(brch).all()
				village = Village.objects.using(brch).all()
			
				if request.method == "POST":
					details_form = Village.objects.using(brch).create(
						code = request.POST["code"],
						#Route_attached = request.POST["attached"],
						name = request.POST["name"],
						Route_attached = request.POST["route"]
						)
					details_form.save(using=brch)
					messages.success(request, 'Your details have been saved!')
			else:
				details_form = Village.objects.create(
					code = request.POST["code"],
					#Route_attached = request.POST["attached"],
					name = request.POST["name"],
					Route_attached = request.POST["route"]
					)
				details_form.save()
				messages.success(request, 'Your details have been saved!')
			return render(request,'manage_village.html',locals()) 
		else:
			return render(request,'index.html',locals())
	except Exception as err:

		if search("1062",str(err)):
			messages.error(request,'Village Code Duplicated:'+request.POST["code"])
		else:		
			messages.success(request,'Invalid Data Entry')
	return render(request,'manage_village.html',locals())


def manage1(request):  
	try: 
		if request.session.has_key('name'):

			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				village = Village.objects.using(brch).all()
				route =Route.objects.using(brch).all()
			
			#Agent = Agent.objects.all()
				if request.method == "POST":
					villagename = request.POST["village"]
				#shift1 = request.POST["shift"]
				
					av = Village.objects.using(brch).filter(code=villagename)
				

				return render(request,'manage_village.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			
				messages.error(request,'Village Code Duplicated:'+request.POST["village"])
		else:

				messages.success(request,'Please Enter Valid Data')
	return render(request,'manage_village.html',locals())
	


def manage_village(request):
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				village = Village.objects.using(brch).all()
				agent = Agent.objects.using(brch).all()
			#av = Village.objects.all()
			
				route = Route.objects.using(brch).all()
				if request.method == "POST":
					

					#dateH = request.POST["date_t2"]
					#shiftH = request.POST["shift_t2"]
					for index,j in enumerate(request.POST.getlist('code[]')):
						minmaxfat = Village.objects.using(brch).filter(id=request.POST.getlist("dcid[]")[index]).update( 
							code = request.POST.getlist("code[]")[index],
							name = request.POST.getlist("name[]")[index],
							Route_attached=request.POST.getlist("route1[]")[index],
							#Route_attached1=request.POST.getlist("route1[]")[index],
							#Route_attached2=request.POST.getlist("route2[]")[index],
							#remove= request.POST.getlist("remove[]")[index],
							)
					
					messages.success(request, 'Your details have been saved!')
			else:
				village = Village.objects.all()
				agent = Agent.objects.all()
				#av = Village.objects.all()
				
				route = Route.objects.all()
				if request.method == "POST":
					

					#dateH = request.POST["date_t2"]
					#shiftH = request.POST["shift_t2"]
					for index,j in enumerate(request.POST.getlist('code[]')):
						minmaxfat = Village.objects.filter(id=request.POST.getlist("dcid[]")[index]).update( 
							code = request.POST.getlist("code[]")[index],
							name = request.POST.getlist("name[]")[index],
							Route_attached=request.POST.getlist("route1[]")[index],
							#Route_attached1=request.POST.getlist("route1[]")[index],
							#Route_attached2=request.POST.getlist("route2[]")[index],
							#remove= request.POST.getlist("remove[]")[index],
							)
					
					messages.success(request, 'Your details have been saved!')

				#data = Agent.objects.filter(remove='Y').delete()			
				
			
				

				#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'manage_village.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:

		if search("1062",str(err)):
			messages.error(request,'Village Code Duplicated:'+request.POST["code"])
		else:		
			messages.success(request,'Invalid Data Entry')
	return render(request,'manage_village.html',locals())
# Module -Masters #8 - Saving milktype Values - milktype.html
# Created by - 2020-12-14 @ sriya
# Modified by - 2020-12-14 @ Sriya 
# Modified by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Charan
def milktype(request):
	try:
		milktype = Milktype.objects.all()
		if request.session.has_key('name'):
			if request.method == "POST":
				details_form = Milktype.objects.create(
					code = request.POST["code"],
					#Route_attached = request.POST["attached"],
					name = request.POST["name"],
					)
				details_form.save()
				details_form1 = Milktype1.objects.create(
					code = request.POST["code"],
					#Route_attached = request.POST["attached"],
					name = request.POST["name"],
					)
				details_form1.save()
				messages.success(request, 'Your details have been saved!')
			return render(request,'milktype.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Milktype code Duplicated:'+request.POST["code"])
		else:		
			messages.success(request,'Invalid Data Entry')
	return render(request,'milktype.html',locals())


def manage_milktype(request):

	milktype = Milktype.objects.all()
	am = Milktype.objects.all()
	if request.session.has_key('name'):
		#route = Route.objects.all()
		if request.method == "POST":
			am = Milktype.objects.all()

			#dateH = request.POST["date_t2"]
			#shiftH = request.POST["shift_t2"]
			
			   
		   
			

			#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
		return render(request,'managemilktype.html',locals())
	else:
		return render(request,'index.html',locals())

def managemilktype(request):

	milktype = Milktype.objects.all()
	am = Milktype.objects.all()
	if request.session.has_key('name'):
		#route = Route.objects.all()
		if request.method == "POST":
			am = Milktype.objects.all()

			#dateH = request.POST["date_t2"]
			#shiftH = request.POST["shift_t2"]
			for index,j in enumerate(request.POST.getlist("code[]")):
				minmaxfat = Milktype.objects.filter(id=request.POST.getlist("dcid7[]")[index]).update( 
					code = request.POST.getlist("code[]")[index],
					name = request.POST.getlist("name[]")[index],
					remove= request.POST.getlist("remove[]")[index],
					)
			
			messages.success(request, 'Your details have been saved!')

			data = Milktype.objects.filter(remove='Y').delete()			
			   
		   
			

			#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
		return render(request,'managemilktype1.html',locals())
	else:
		return render(request,'index.html',locals())
# Module -Masters #9 - Saving category Values - category.html
# Created by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Sriya 
# Modified by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Charan
def category(request):
	try:
		category = Category.objects.all()
		if request.session.has_key('name'):
			if request.method == "POST":
				
				details_form = Category.objects.create(
					code = request.POST["code"],
				#Route_attached = request.POST["attached"],
					name = request.POST["name"],
					)
				details_form.save()
				details_form1 = Category1.objects.create(
					code = request.POST["code"],
				#Route_attached = request.POST["attached"],
					name = request.POST["name"],
					)
				details_form1.save()
				messages.success(request, 'Your details have been saved!')
			return render(request,'category.html',locals())			
			
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Category code Duplicated:'+request.POST["code"])
		else:		
			messages.success(request,'Invalid Data Entry')

	return render(request,'category.html',locals())

def manage_category(request):
	try:
		if request.session.has_key('name'):
			
			category = Category.objects.all()
			ag = Category.objects.all()
			
		#route = Route.objects.all()
			if request.method == "POST":
				ag = Category.objects.all()
		
			

			
			return render(request,'managecategory.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Category code Duplicated:'+request.POST["code"])
		else:		
			messages.success(request,'Invalid Data Entry')

	return render(request,'managecategory.html',locals())
def managecategory(request):
	try:
		if request.session.has_key('name'):
			category = Category.objects.all()
			ag = Category.objects.all()
			if request.method == "POST":
				ag = Category.objects.all()

			#dateH = request.POST["date_t2"]
			#shiftH = request.POST["shift_t2"]
				for index,j in enumerate(request.POST.getlist("code[]")):
					minmaxfat = Category.objects.filter(id=request.POST.getlist("dcid8[]")[index]).update( 
						code = request.POST.getlist("code[]")[index],
						name = request.POST.getlist("name[]")[index],
						remove= request.POST.getlist("remove[]")[index],
						)
				
				messages.success(request, 'Your details have been saved!')

				data = Category.objects.filter(remove='Y').delete()	
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Category code Duplicated:'+request.POST["code"])
		else:		
			messages.success(request,'Invalid Data Entry')

	return render(request,'managecategory1.html',locals())
# Module -Masters #10 - Saving formulae Values - formulae.html
# Created by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Sriya 
# Modified by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Charan
def formulae(request):
	try:
		formulae = Formulae.objects.all()
		if request.session.has_key('name'):
			if request.method == "POST":
				details_form = Formulae.objects.create(
					name = request.POST["name"],
				
					desc = request.POST["desc"],
					)
				details_form.save()
				details_form1 = Formulae1.objects.create(
					name = request.POST["name"],
				
					desc = request.POST["desc"],
					)
				details_form1.save()
				messages.success(request, 'Your details have been saved!')
			return render(request,'formulae.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Formula Duplicated:'+request.POST["name"])
		else:		
			messages.success(request,'Invalid Data Entry')
	return render(request,'formulae.html',locals())
def manage_formulae(request):
	try:
		if request.session.has_key('name'):
			formulae = Formulae.objects.all()
			af = Formulae.objects.all()
			
				#route = Route.objects.all()
			if request.method == "POST":
				af = Formulae.objects.all()
			return render(request,'manageformulae.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Formula Duplicated:'+request.POST["name"])
		else:		
			messages.success(request,'Invalid Data Entry')
	return render(request,'manageformulae.html',locals())
def manageformulae(request):
	try:
		if request.session.has_key('name'):
			formulae = Formulae.objects.all()
			af = Formulae.objects.all()
			if request.method == "POST":
				af = Formulae.objects.all()
				for index,j in enumerate(request.POST.getlist("desc[]")):
					minmaxfat = Formulae.objects.filter(id=request.POST.getlist("dcid9[]")[index]).update( 
						
					#Route_attached = request.POST["attached"],
						desc = request.POST.getlist("desc[]")[index],
						name = request.POST.getlist("name[]")[index],
						remove= request.POST.getlist("remove[]")[index],
						)
				
				messages.success(request, 'Your details have been saved!')

				data = Formulae.objects.filter(remove='Y').delete()			
			return render(request,'manageformula1.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Formula Duplicated:'+request.POST["name"])
		else:		
			messages.success(request,'Invalid Data Entry')
	return render(request,'manageformula1.html',locals())
# Module -Masters #11 - Saving bank Values - bank.html
# Created by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Sriya 
# Modified by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Charan
def bank(request):
	try:
		bank = Bank.objects.all()
		if request.session.has_key('name'):
			if request.method == "POST":
				brch = request.user.extendeduser.branch
				if request.user.extendeduser.branch == brch:
					details_form = Bank.objects.using(brch).create(
					#code = request.POST["code"],
					#Route_attached = request.POST["attached"],
					name = request.POST["name"],
					fullname = request.POST["fname"],
					branch = request.POST["branch"],
					ifsc = request.POST["ifsc"],
				   
					)
					details_form.save(using=brch)
					details_form1 = Bank1.objects.using(brch).create(
					#code = request.POST["code"],
					#Route_attached = request.POST["attached"],
					name = request.POST["name"],
					fullname = request.POST["fname"],
					branch = request.POST["branch"],
					ifsc = request.POST["ifsc"],
				   
					)
					details_form1.save(using=brch)
					messages.success(request, 'Your details have been saved!')
				else:
					details_form = Bank.objects.create(
					#code = request.POST["code"],
					#Route_attached = request.POST["attached"],
					name = request.POST["name"],
					fullname = request.POST["fname"],
					branch = request.POST["branch"],
					ifsc = request.POST["ifsc"],
				   
					)
					details_form.save()
					details_form1 = Bank1.objects.create(
					#code = request.POST["code"],
					#Route_attached = request.POST["attached"],
					name = request.POST["name"],
					fullname = request.POST["fname"],
					branch = request.POST["branch"],
					ifsc = request.POST["ifsc"],
				   
					)
					details_form1.save()
					messages.success(request, 'Your details have been saved!')
			return render(request,'bank.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Formula Duplicated:'+request.POST["name"])
		else:		
			messages.success(request,'Invalid Data Entry')
		messages.error(request,err)
		return render(request,'bank.html',locals())



def manage_bank(request):
	if request.session.has_key('name'):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			bank = Bank.objects.using(brch).all()
			ba = Bank.objects.using(brch).all()
	
		#route = Route.objects.all()
			if request.method == "POST":
				ba = Bank.objects.using(brch).all()

			#dateH = request.POST["date_t2"]
			#shiftH = request.POST["shift_t2"]
			
			   
		   
			

			#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'managebank.html',locals())
		else:
			bank = Bank.objects.all()
			ba = Bank.objects.all()
	
		#route = Route.objects.all()
			if request.method == "POST":
				ba = Bank.objects.all()

			#dateH = request.POST["date_t2"]
			#shiftH = request.POST["shift_t2"]
			
			   
		   
			

			#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'managebank.html',locals())
	else:
		return render(request,'index.html',locals())

def managebank(request):
	if request.session.has_key('name'):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			bank = Bank.objects.using(brch).all()
			ba = Bank.objects.using(brch).all()
	
		#route = Route.objects.all()
			if request.method == "POST":
				ba = Bank.objects.using(brch).all()

			#dateH = request.POST["date_t2"]
				#shiftH = request.POST["shift_t2"]
				for index,j in enumerate(request.POST.getlist("name[]")):
					minmaxfat = Bank.objects.using(brch).filter(id=request.POST.getlist("dcid10[]")[index]).update( 
						#code = request.POST.getlist("code[]")[index],
						name = request.POST.getlist("name[]")[index],
						fullname = request.POST.getlist("fname[]")[index],
						branch = request.POST.getlist("branch[]")[index],
						ifsc = request.POST.getlist("ifsc[]")[index],

						remove= request.POST.getlist("remove[]")[index],
						)
				
				messages.success(request, 'Your details have been saved!')

				data = Bank.objects.using(brch).filter(remove='Y').delete()			
			   
		   
			

			#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'managebank1.html',locals())
		else:
			bank = Bank.objects.all()
			ba = Bank.objects.all()
	
		#route = Route.objects.all()
			if request.method == "POST":
				ba = Bank.objects.all()

			#dateH = request.POST["date_t2"]
				#shiftH = request.POST["shift_t2"]
				for index,j in enumerate(request.POST.getlist("name[]")):
					minmaxfat = Bank.objects.filter(id=request.POST.getlist("dcid10[]")[index]).update( 
						#code = request.POST.getlist("code[]")[index],
						name = request.POST.getlist("name[]")[index],
						fullname = request.POST.getlist("fname[]")[index],
						branch = request.POST.getlist("branch[]")[index],
						ifsc = request.POST.getlist("ifsc[]")[index],

						remove= request.POST.getlist("remove[]")[index],
						)
				
				messages.success(request, 'Your details have been saved!')

				data = Bank.objects.filter(remove='Y').delete()			
			   
		   
			

			#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'managebank1.html',locals())
	else:
		return render(request,'index.html',locals())

# Module -Masters #0 - Saving Branch Values - branch.html
# Created by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Sriya 
# Modified by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Charan
def branch(request):
	try:
		branch = Branch.objects.all()
		if request.session.has_key('name'):
			if request.method == "POST":
				
				details_form = Branch.objects.create(
				code = request.POST["code"],
				#Route_attached = request.POST["attached"],
				name = request.POST["name"],
				address = request.POST["addr"],
				pin = request.POST["pin"],
				contno = request.POST["contno"],
				email=request.POST["email"]
				)
				details_form.save()
				details_form1 = Branch1.objects.create(
				code = request.POST["code"],
				#Route_attached = request.POST["attached"],
				name = request.POST["name"],
				address = request.POST["addr"],
				pin = request.POST["pin"],
				contno = request.POST["contno"],
				email=request.POST["email"],
				code1 = request.POST["code"],
				name1 = request.POST["name"],
				address1 = request.POST["addr"],
				pin1 = request.POST["pin"],
				contno1 = request.POST["contno"],
				email1=request.POST["email"],				
				creaated_by=request.user,
				crreaatedd=datetime.datetime.now(),
				)
				messages.success(request, 'Your details have been saved!')
				
			return render(request,'branch.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Branch code Duplicated:'+request.POST["code"])
				# messages.error(request,'code:{c}'.format(c=type(err).__name__))
		elif search("Field 'contno'",str(err)):
			messages.error(request,'Contact number 10 digit numeric,Please enetr contact no')
		elif search("Field 'pin'",str(err)):
			messages.error(request,'Pin code is 6 digit numeric, Please enter valid pin')
		else:
			messages.success(request,'Invalid Data Entry')
		#messages.error(request,err)
		
	return render (request,'branch.html',locals())



def manage_branch(request):
	try:
		branch = Branch.objects.all()
		ab = Branch.objects.all()
		if request.session.has_key('name'):
			#route = Route.objects.all()
			if request.method == "POST":
				ab = Branch.objects.all()

				#dateH = request.POST["date_t2"]
				#shiftH = request.POST["shift_t2"]
				
				
			
				

				#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'managebranch.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Branch code Duplicated:'+request.POST["code"])
				# messages.error(request,'code:{c}'.format(c=type(err)._name_))
		elif search("Field 'contno'",str(err)):
			messages.error(request,'Contact number 10 digit numeric,Please enetr contact no')
		elif search("Field 'pin'",str(err)):
			messages.error(request,'Pin code is 6 digit numeric, Please enter valid pin')
		else:
			messages.success(request,'Invalid Data Entry')
		#messages.error(request,err)
		
	return render (request,'branch.html',locals())

def managebranch(request):
	try:
		branch = Branch.objects.all()
		ab = Branch.objects.all()
		if request.session.has_key('name'):
			#route = Route.objects.all()
			if request.method == "POST":
				ab = Branch.objects.all()

				#dateH = request.POST["date_t2"]
				#shiftH = request.POST["shift_t2"]
				for index,j in enumerate(request.POST.getlist("code[]")):
					minmaxfat = Branch.objects.filter(id=request.POST.getlist("dcid0[]")[index]).update( 
						code = request.POST.getlist("code[]")[index],
						name = request.POST.getlist("name[]")[index],
						address = request.POST.getlist("addr[]")[index],
						pin = request.POST.getlist("pin[]")[index],
						contno = request.POST.getlist("contno[]")[index],
						email=request.POST.getlist("email[]")[index],
						remove= request.POST.getlist("remove[]")[index],
						)
					details_form1 = Branch1.objects.filter(id=request.POST.getlist("dcid0[]")[index]).update( 
						code1 = request.POST.getlist("code[]")[index],
						name1 = request.POST.getlist("name[]")[index],
						address1 = request.POST.getlist("addr[]")[index],
						pin1 = request.POST.getlist("pin[]")[index],
						contno1 = request.POST.getlist("contno[]")[index],
						email1=request.POST.getlist("email[]")[index],
						uppt_by=request.user,
						updaatedd=datetime.datetime.now(),
						)
				
				messages.success(request, 'Your details have been saved!')

				data = Branch.objects.filter(remove='Y').delete()			
				
			
				

				#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'managebranch1.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Branch code Duplicated:'+request.POST["code"])
				# messages.error(request,'code:{c}'.format(c=type(err)._name_))
		elif search("Field 'contno'",str(err)):
			messages.error(request,'Contact number 10 digit numeric,Please enetr contact no')
		elif search("Field 'pin'",str(err)):
			messages.error(request,'Pin code is 6 digit numeric, Please enter valid pin')
		else:
			messages.success(request,'Invalid Data Entry')
		#messages.error(request,err)
		
	return render (request,'managebranch1.html',locals())	
# Module -Masters #12 - Saving center Values - center.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Charan
def center_milk(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:

		center = Center.objects.using(brch).all()
		category = Category.objects.all()
		state = Formulae.objects.all()
		village = Village.objects.using(brch).all()
		route = Route.objects.using(brch).all()
		supervisor = Supervisor.objects.using(brch).all()
		milk = Milktype.objects.all()
		bank2 = Bank.objects.using(brch).all().values(('fullname')).distinct().order_by(('fullname'))
		bank1 = Bank.objects.using(brch).all().values(('ifsc')).distinct().order_by(('ifsc'))
		bank = Bank.objects.using(brch).all().values(('branch')).distinct().order_by(('branch'))
		branch=Branch.objects.using(brch).all()
		agent = Agent.objects.using(brch).all()
		#messages.success(request, 'Your details have been saved!')
		if request.session.has_key('name'):
			return render(request,'center.html',locals())
		else:
			return render(request,'login.html',locals())

def center(request):
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				center = Center.objects.using(brch).all()
				category = Category.objects.all()
				state = Formulae.objects.all()
				village = Village.objects.using(brch).all()
				route = Route.objects.using(brch).all()
				supervisor = Supervisor.objects.using(brch).all()
				milk=Milktype.objects.all()
				bank2 = Bank.objects.using(brch).all().values(('fullname')).distinct().order_by(('fullname'))
				bank1 = Bank.objects.using(brch).all().values(('ifsc')).distinct().order_by(('ifsc'))
				bank = Bank.objects.using(brch).all().values(('branch')).distinct().order_by(('branch'))
				branch=Branch.objects.using(brch).all()
				agent = Agent.objects.using(brch).all()
				
				if request.method == "POST":
					z = request.POST.get('active')
					if z:
						active = True
					else:
						active = False
					f = request.POST.get('HvPhoto')
					if f:
						HvPhoto = True
					else:
						HvPhoto = False

			
					if (HvPhoto ) : 
						myfile = request.FILES['HvPhoto']
						fs = FileSystemStorage(location="media/centerimage")
						filename = fs.save(myfile.name, myfile)
						uploaded_file_url = fs.url("../centerimage/"+filename)
					else :
						uploaded_file_url = ""		
					# return HttpResponse(uploaded_file_url)
					details_form = Center.objects.using(brch).create(
						centre_code = request.POST["code"],
						name = request.POST["name"],
						milk_type = request.POST["milk"],
						category = request.POST["category"],
						Formula = request.POST["state"],
					#name = request.POST["name"],
						agent_name = request.POST["agent"],
					#route_number = request.POST["route"],
						supervisor = request.POST["supervisor"],
						village_name = request.POST["village"],
						mobile = request.POST["mobile"],
						Email = request.POST["email"],
						address = request.POST["address"],
						actholdername=request.POST["actholdername"],
						bankno = request.POST["bankno"],
						bankname = request.POST["bank"],
						branch = request.POST["branch"],
					#ifsc=request.POST["ifsc"],
						Distance = request.POST["kilo"],
						BM_Comm_unit = request.POST["bm"],
						CM_Comm_unit = request.POST["cm"],
						BM_Cartage_unit = request.POST["bmcartage"],
						CM_Cartage_unit = request.POST["cmcartage"],
						Fat = request.POST["cm"],
						Document = uploaded_file_url,
						active = active,
						BM_Cartage_amount = request.POST["bmcartage_amount"],
						CM_Cartage_amount = request.POST["cmcartage_amount"],
						BM_comm_amount = request.POST["bm_amount"],
						CM_comm_amount = request.POST["cm_amount"],
					#Fat = request.POST["cm"],
					#Document = uploaded_file_url,
					#active = active,
						route_number = request.POST["route"],
						bankname1 = request.POST["bank"],
						branch1 = request.POST["branch"],
						ifsc1=request.POST["ifsc"],

						ifsc=request.POST["ifsc"]

						)
					center1=Bank.objects.using(brch).update_or_create(
						fullname=request.POST['bank'],
						branch=request.POST['branch'],
						ifsc=request.POST["ifsc"]
					
						)
					details_form.save(using=brch)
					messages.success(request, 'Your details have been saved!')

			else:
				center = Center.objects.all()
				category = Category.objects.all()
				state = Formulae.objects.all()
				village = Village.objects.all()
				route = Route.objects.all()
				supervisor = Supervisor.objects.all()
				milk=Milktype.objects.all()
				bank2 = Bank.objects.all().values(('fullname')).distinct().order_by(('fullname'))
				bank1 = Bank.objects.all().values(('ifsc')).distinct().order_by(('ifsc'))
				bank = Bank.objects.all().values(('branch')).distinct().order_by(('branch'))
				branch=Branch.objects.all()
				agent = Agent.objects.all()
				
				if request.method == "POST":
					z = request.POST.get('active')
					if z:
						active = True
					else:
						active = False
					f = request.POST.get('HvPhoto')
					if f:
						HvPhoto = True
					else:
						HvPhoto = False

			
					if (HvPhoto ) : 
						myfile = request.FILES['HvPhoto']
						fs = FileSystemStorage(location="media/centerimage")
						filename = fs.save(myfile.name, myfile)
						uploaded_file_url = fs.url("../centerimage/"+filename)
					else :
						uploaded_file_url = ""		
					# return HttpResponse(uploaded_file_url)
					details_form = Center.objects.create(
						centre_code = request.POST["code"],
						name = request.POST["name"],
						milk_type = request.POST["milk"],
						category = request.POST["category"],
						Formula = request.POST["state"],
					#name = request.POST["name"],
						agent_name = request.POST["agent"],
					#route_number = request.POST["route"],
						supervisor = request.POST["supervisor"],
						village_name = request.POST["village"],
						mobile = request.POST["mobile"],
						Email = request.POST["email"],
						address = request.POST["address"],
						actholdername=request.POST["actholdername"],
						bankno = request.POST["bankno"],
						bankname = request.POST["bank"],
						branch = request.POST["branch"],
					#ifsc=request.POST["ifsc"],
						Distance = request.POST["kilo"],
						BM_Comm_unit = request.POST["bm"],
						CM_Comm_unit = request.POST["cm"],
						BM_Cartage_unit = request.POST["bmcartage"],
						CM_Cartage_unit = request.POST["cmcartage"],
						Fat = request.POST["cm"],
						Document = uploaded_file_url,
						active = active,
						BM_Cartage_amount = request.POST["bmcartage_amount"],
						CM_Cartage_amount = request.POST["cmcartage_amount"],
						BM_comm_amount = request.POST["bm_amount"],
						CM_comm_amount = request.POST["cm_amount"],
					#Fat = request.POST["cm"],
					#Document = uploaded_file_url,
					#active = active,
						route_number = request.POST["route"],
						bankname1 = request.POST["bank"],
						branch1 = request.POST["branch"],
						ifsc1=request.POST["ifsc"],

						ifsc=request.POST["ifsc"]

						)
					center1=Bank.objects.update_or_create(
						fullname=request.POST['bank'],
						branch=request.POST['branch'],
						ifsc=request.POST["ifsc"]
					
						)
					details_form.save()
					messages.success(request, 'Your details have been saved!')




			return render(request,'manage_center.html',locals())  
		else:
			return render(request,'index.html',locals())

	except Exception as err:

		if search("1062",str(err)):
			messages.error(request,'Center Code Duplicated:'+request.POST["code"])
		else:		
			messages.success(request,'Invalid Data Entry')
		
	return render(request,'manage_center.html',locals())
def managecenter(request):  
	try: 
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				center = Center.objects.using(brch).all()
				category = Category.objects.all()
				state = Formulae.objects.all()
				village = Village.objects.using(brch).all()
				route = Route.objects.using(brch).all()
				supervisor = Supervisor.objects.using(brch).all()
				milk=Milktype.objects.all()
				bank2 = Bank.objects.using(brch).all().values(('fullname')).distinct().order_by(('fullname'))
				bank1 = Bank.objects.using(brch).all().values(('ifsc')).distinct().order_by(('ifsc'))
				bank = Bank.objects.using(brch).all().values(('branch')).distinct().order_by(('branch'))
				branch=Branch.objects.using(brch).all()
				agent = Agent.objects.using(brch).all()
				

					#Agent = Agent.objects.all()
				if request.method == "POST":
					centre_code = request.POST["centercode"]
					#shift1 = request.POST["shift"]
					
					ac = Center.objects.using(brch).filter(centre_code=centre_code)
			else:
				center = Center.objects.all()
				category = Category.objects.all()
				state = Formulae.objects.all()
				village = Village.objects.all()
				route = Route.objects.all()
				supervisor = Supervisor.objects.all()
				milk=Milktype.objects.all()
				bank2 = Bank.objects.all().values(('fullname')).distinct().order_by(('fullname'))
				bank1 = Bank.objects.all().values(('ifsc')).distinct().order_by(('ifsc'))
				bank = Bank.objects.all().values(('branch')).distinct().order_by(('branch'))
				branch=Branch.objects.all()
				agent = Agent.objects.all()
				

					#Agent = Agent.objects.all()
				if request.method == "POST":
					centre_code = request.POST["centercode"]
					#shift1 = request.POST["shift"]
					
					ac = Center.objects.filter(centre_code=centre_code)
				

			return render(request,'manage_center.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Center Code Duplicated:'+request.POST["centercode"])
		else:		
			messages.success(request,'Invalid Data Entry')
	return render(request,'manage_center.html',locals())


def manage_center(request):
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				center = Center.objects.using(brch).all()
				agent = Agent.objects.using(brch).all()
				#av = Village.objects.all()
				route = Route.objects.using(brch).all()
				if request.method == "POST":
					

					#dateH = request.POST["date_t2"]
					#shiftH = request.POST["shift_t2"]
					for index,j in enumerate(request.POST.getlist('code[]')):
						minmaxfat = Center.objects.using(brch).filter(id=request.POST.getlist("dcid3[]")[index]).update( 
							centre_code = request.POST.getlist("code[]")[index],
							name = request.POST.getlist("name[]")[index],
							milk_type = request.POST.getlist("milk[]")[index],
							category = request.POST.getlist("category[]")[index],
							Formula = request.POST.getlist("state[]")[index],
						#name = request.POST["name"],
							agent_name = request.POST.getlist("agent[]")[index],
						#route_number = request.POST["route"],
							supervisor = request.POST.getlist("supervisor[]")[index],
							village_name = request.POST.getlist("village[]")[index],
							mobile = request.POST.getlist("mobile[]")[index],
							Email = request.POST.getlist("email[]")[index],
							address = request.POST.getlist("address[]")[index],
							actholdername=request.POST.getlist("actholdername[]")[index],
							bankno = request.POST.getlist("bankno[]")[index],
							bankname = request.POST.getlist("bank[]")[index],
							branch = request.POST.getlist("branch[]")[index],
						#ifsc=request.POST["ifsc"],
							Distance = request.POST.getlist("kilo[]")[index],
							BM_Comm_unit = request.POST.getlist("bm[]")[index],
							CM_Comm_unit = request.POST.getlist("cm[]")[index],
							BM_Cartage_unit = request.POST.getlist("bmcartage[]")[index],
							CM_Cartage_unit = request.POST.getlist("cmcartage[]")[index],
							Fat = request.POST.getlist("cm[]")[index],
							#Document = uploaded_file_url,
							#active = active,
							BM_Cartage_amount = request.POST.getlist("bmcartage_amount[]")[index],
							CM_Cartage_amount = request.POST.getlist("cmcartage_amount[]")[index],
							BM_comm_amount = request.POST.getlist("bm_amount[]")[index],
							CM_comm_amount = request.POST.getlist("cm_amount[]")[index],
						#Fat = request.POST["cm"],
						#Document = uploaded_file_url,
						#active = active,
							route_number = request.POST.getlist("route[]")[index],
							bankname1 = request.POST.getlist("bank[]")[index],
							branch1 = request.POST.getlist("branch[]")[index],
							ifsc1=request.POST.getlist("ifsc[]")[index],

							ifsc=request.POST.getlist("ifsc[]")[index]

							#Route_attached1=request.POST.getlist("route1[]")[index],
							#Route_attached2=request.POST.getlist("route2[]")[index],
							#remove= request.POST.getlist("remove[]")[index],
							)
					
				
					messages.success(request, 'Your details have been saved!')

						#data = Agent.objects.filter(remove='Y').delete()			
						
			else:
				center = Center.objects.all()
				agent = Agent.objects.all()
				#av = Village.objects.all()
				route = Route.objects.all()
				if request.method == "POST":
					

					#dateH = request.POST["date_t2"]
					#shiftH = request.POST["shift_t2"]
					for index,j in enumerate(request.POST.getlist('code[]')):
						minmaxfat = Center.objects.filter(id=request.POST.getlist("dcid3[]")[index]).update( 
							centre_code = request.POST.getlist("code[]")[index],
							name = request.POST.getlist("name[]")[index],
							milk_type = request.POST.getlist("milk[]")[index],
							category = request.POST.getlist("category[]")[index],
							Formula = request.POST.getlist("state[]")[index],
						#name = request.POST["name"],
							agent_name = request.POST.getlist("agent[]")[index],
						#route_number = request.POST["route"],
							supervisor = request.POST.getlist("supervisor[]")[index],
							village_name = request.POST.getlist("village[]")[index],
							mobile = request.POST.getlist("mobile[]")[index],
							Email = request.POST.getlist("email[]")[index],
							address = request.POST.getlist("address[]")[index],
							actholdername=request.getlist("actholdername[]")[index],
							bankno = request.POST.getlist("bankno[]")[index],
							bankname = request.POST.getlist("bank[]")[index],
							branch = request.POST.getlist("branch[]")[index],
						#ifsc=request.POST["ifsc"],
							Distance = request.POST.getlist("kilo[]")[index],
							BM_Comm_unit = request.POST.getlist("bm[]")[index],
							CM_Comm_unit = request.POST.getlist("cm[]")[index],
							BM_Cartage_unit = request.POST.getlist("bmcartage[]")[index],
							CM_Cartage_unit = request.POST.getlist("cmcartage[]")[index],
							Fat = request.POST.getlist("cm[]")[index],
							#Document = uploaded_file_url,
							#active = active,
							BM_Cartage_amount = request.POST.getlist("bmcartage_amount[]")[index],
							CM_Cartage_amount = request.POST.getlist("cmcartage_amount[]")[index],
							BM_comm_amount = request.POST.getlist("bm_amount[]")[index],
							CM_comm_amount = request.POST.getlist("cm_amount[]")[index],
						#Fat = request.POST["cm"],
						#Document = uploaded_file_url,
						#active = active,
							route_number = request.POST.getlist("route[]")[index],
							bankname1 = request.POST.getlist("bank[]")[index],
							branch1 = request.POST.getlist("branch[]")[index],
							ifsc1=request.POST.getlist("ifsc[]")[index],

							ifsc=request.POST.getlist("ifsc[]")[index]

							#Route_attached1=request.POST.getlist("route1[]")[index],
							#Route_attached2=request.POST.getlist("route2[]")[index],
							#remove= request.POST.getlist("remove[]")[index],
							)
					
				
					messages.success(request, 'Your details have been saved!')
						

					#return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'manage_center.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:

		if search("1062",str(err)):
			messages.error(request,'Center Code Duplicated:'+request.POST["code"])
		else:		
			messages.success(request,'Invalid Data Entry')
		
	return render(request,'manage_center.html',locals())# Module -Masters #13-Ts Rates -bufallo milk - Saving bufallo-milk-center Values - bufallo-milk-center.html
# Created by - 2020-12-14 @ Charan
# Modified by - 2020-12-14 @ Charan 

# Modified by - 2020-12-14 @ Charan
def bufallo_milk_center(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			center = Center.objects.using(brch).all()
			milk=Milktype.objects.all()
			if request.session.has_key('name'):
				if request.method == "POST":
					# x = datetime.strptime(request.POST["dateform"], "%Y-%m-%d")
					# y = datetime.strptime(request.POST["dateto"], "%Y-%m-%d")
					z = request.POST.get('snfdeduction')
					if z:
						snfdeduction = True
					else:
						snfdeduction = False
					premiumvalue = float(0.0)
					amountvalue = float(0.0)
					curdrate = float(0.0)
					minrate = float(0.0)
					sourmilk = float(0.0)
					fixed_value = float(0.0)
					min_fat = float(0.0)
					max_fat = float(0.0)
					min_SNF = float(0.0)
					max_SNF = float(0.0)
					rate = float(0.0)
					#commission = float(0.0)
					fat_from = float(0.0)
					fat_to = float(0.0)
					penalty_in_RS = float(0.0)
					premiumvalue = request.POST["premium"]
					amountvalue = request.POST["amount"]
					curdrate = request.POST["curd_rate"]
					minrate = request.POST["min_rate"]
					sourmilk = request.POST["sourmilk_rate"]
					fixed_value = request.POST["fixedvalue"]
					datefrom = request.POST["dateform"]
					dateto = request.POST["dateto"]
					centercode = request.POST["category_cow"]
					# min_fat = request.POST["min_fat"]
					# max_fat = request.POST["max_fat"]
					# min_SNF = request.POST["min_SNF"]
					# max_SNF = request.POST["max_SNF"]
					# rate = request.POST["rate"]
					# commission = request.POST["commission"]
					fat_from = request.POST["from_snf"]
					fat_to = request.POST["to_snf"]
					penalty_in_RS = request.POST["penalty_snf"]
					if premiumvalue == "" or premiumvalue == "0.0":
						premiumvalue = float(0.0)
					if amountvalue == "" or amountvalue == "0.0":
						amountvalue = float(0.0)
					if curdrate == "" or curdrate == "0.0":
						curdrate = float(0.0)
					if minrate == "" or minrate == "0.0":
						minrate = float(0.0)
					if sourmilk == "" or sourmilk == "0.0":
						sourmilk = float(0.0)
					if fixed_value == "" or fixed_value == "0.0":
						fixed_value = float(0.0)
					if min_fat == "" or min_fat == "0.0":
						min_fat = float(0.0)
					if max_fat == "" or max_fat == "0.0":
						max_fat = float(0.0)
					if min_SNF == "" or min_SNF == "0.0":
						min_SNF = float(0.0)
					if max_SNF == "" or max_SNF == "0.0":
						max_SNF = float(0.0)
					if rate == "" or rate == "0.0":
						rate = float(0.0)
					#if commission == "" or commission == "0.0":
					#   commission = float(0.0)
					if fat_from == "" or fat_from == "0.0":
						fat_from = float(0.0)
					if fat_to == "" or fat_to == "0.0":
						fat_to = float(0.0)
					if penalty_in_RS == "" or penalty_in_RS == "0.0":
						penalty_in_RS = float(0.0)
					if BufalloMilkCenter.objects.using(brch).filter(from_date__range=[datefrom,dateto],centercode=centercode).exists():
						messages.info(request,  "TS Rates Already Registsred For From Date")
					elif BufalloMilkCenter.objects.using(brch).filter(to_date__range=[datefrom,dateto],centercode=centercode).exists():
						messages.info(request,  "TS Rates Already Registsred For To Date")
					#elif BufalloMilkCategory.objects.filter(from_date_gte=datefrom , to_date_lte=dateto).exists():
					#   messages.info(request, "Already date range exists")
					#elif BufalloMilkCategory.objects.filter(from_date__gte=datefrom).exists():
					#   messages.info(request, "Already date range exists")
					elif BufalloMilkCenter.objects.using(brch).filter(from_date__lte=datefrom ,to_date__gte=datefrom,centercode=centercode).exists():
						messages.info(request, "Already date range exists")
					elif request.POST["dateform"]>=request.POST["dateto"] :
						 messages.info(request,"From Date is Later than To Date")
					else:
						milkrate_form = BufalloMilkCenter.objects.using(brch).create(
							from_date = datefrom,
							to_date=dateto,
							centercode = request.POST["category_cow"],
							#from_date = request.POST["dateform"],
							#to_date = request.POST["dateto"],
							milk_type = request.POST["milk"],
							rate_calculation = request.POST["rate_calculation"],
							snf_value = request.POST["snfix_actual"],
							fixed_value = fixed_value,
							
							# min_fat = min_fat,
							# max_fat = max_fat,
							# min_SNF = min_SNF,
							# max_SNF = max_SNF,
							# rate = rate,
							# commission = commission,
							fat_from = fat_from,
							fat_to = fat_to,
							penalty_in_RS = penalty_in_RS,
							deduction_calculation = request.POST["ded_ltrkg"],
							premium = premiumvalue,
							amount = amountvalue,
							commission_type = request.POST["com_type"],
							sour_milk = request.POST["sour_ltrkg"],
							curd = curdrate,
							min_rate = minrate,
							sour_milkrate = sourmilk,
							snf_deduction = snfdeduction,
							)
						for index,j in enumerate(request.POST.getlist('min_fat[]')):
							if index != 0 :
								minmaxbuff = MinMaxBuff.objects.using(brch).create(
									centercode_id = milkrate_form.id,
									from_date = request.POST["dateform"],
									to_date = request.POST["dateto"],
									min_fat = request.POST.getlist('min_fat[]')[index],
									max_fat = request.POST.getlist('max_fat[]')[index],
									min_SNF = request.POST.getlist('min_SNF[]')[index],
									max_SNF = request.POST.getlist('max_SNF[]')[index],
									# milk_type = request.POST.getlist('milk_type[]')[index],
									tsrate = request.POST.getlist('rate[]')[index],
							#       commission = request.POST.getlist('commission[]')[index],
									)
								minmax_obj =  MinMaxFat.objects.using(brch).filter(centercode_id = milkrate_form.id)
						messages.success(request, 'Your details have been saved!')
		else:
			center = Center.objects.all()
			milk=Milktype.objects.all()
			if request.session.has_key('name'):
				if request.method == "POST":
					# x = datetime.strptime(request.POST["dateform"], "%Y-%m-%d")
					# y = datetime.strptime(request.POST["dateto"], "%Y-%m-%d")
					z = request.POST.get('snfdeduction')
					if z:
						snfdeduction = True
					else:
						snfdeduction = False
					premiumvalue = float(0.0)
					amountvalue = float(0.0)
					curdrate = float(0.0)
					minrate = float(0.0)
					sourmilk = float(0.0)
					fixed_value = float(0.0)
					min_fat = float(0.0)
					max_fat = float(0.0)
					min_SNF = float(0.0)
					max_SNF = float(0.0)
					rate = float(0.0)
					#commission = float(0.0)
					fat_from = float(0.0)
					fat_to = float(0.0)
					penalty_in_RS = float(0.0)
					premiumvalue = request.POST["premium"]
					amountvalue = request.POST["amount"]
					curdrate = request.POST["curd_rate"]
					minrate = request.POST["min_rate"]
					sourmilk = request.POST["sourmilk_rate"]
					fixed_value = request.POST["fixedvalue"]
					datefrom = request.POST["dateform"]
					dateto = request.POST["dateto"]
					centercode = request.POST["category_cow"]
					# min_fat = request.POST["min_fat"]
					# max_fat = request.POST["max_fat"]
					# min_SNF = request.POST["min_SNF"]
					# max_SNF = request.POST["max_SNF"]
					# rate = request.POST["rate"]
					# commission = request.POST["commission"]
					fat_from = request.POST["from_snf"]
					fat_to = request.POST["to_snf"]
					penalty_in_RS = request.POST["penalty_snf"]
					if premiumvalue == "" or premiumvalue == "0.0":
						premiumvalue = float(0.0)
					if amountvalue == "" or amountvalue == "0.0":
						amountvalue = float(0.0)
					if curdrate == "" or curdrate == "0.0":
						curdrate = float(0.0)
					if minrate == "" or minrate == "0.0":
						minrate = float(0.0)
					if sourmilk == "" or sourmilk == "0.0":
						sourmilk = float(0.0)
					if fixed_value == "" or fixed_value == "0.0":
						fixed_value = float(0.0)
					if min_fat == "" or min_fat == "0.0":
						min_fat = float(0.0)
					if max_fat == "" or max_fat == "0.0":
						max_fat = float(0.0)
					if min_SNF == "" or min_SNF == "0.0":
						min_SNF = float(0.0)
					if max_SNF == "" or max_SNF == "0.0":
						max_SNF = float(0.0)
					if rate == "" or rate == "0.0":
						rate = float(0.0)
					#if commission == "" or commission == "0.0":
					#   commission = float(0.0)
					if fat_from == "" or fat_from == "0.0":
						fat_from = float(0.0)
					if fat_to == "" or fat_to == "0.0":
						fat_to = float(0.0)
					if penalty_in_RS == "" or penalty_in_RS == "0.0":
						penalty_in_RS = float(0.0)
					if BufalloMilkCenter.objects.filter(from_date__range=[datefrom,dateto],centercode=centercode).exists():
						messages.info(request,  "TS Rates Already Registsred For From Date")
					elif BufalloMilkCenter.objects.filter(to_date__range=[datefrom,dateto],centercode=centercode).exists():
						messages.info(request,  "TS Rates Already Registsred For To Date")
					#elif BufalloMilkCategory.objects.filter(from_date_gte=datefrom , to_date_lte=dateto).exists():
					#   messages.info(request, "Already date range exists")
					#elif BufalloMilkCategory.objects.filter(from_date__gte=datefrom).exists():
					#   messages.info(request, "Already date range exists")
					elif BufalloMilkCenter.objects.filter(from_date__lte=datefrom ,to_date__gte=datefrom,centercode=centercode).exists():
						messages.info(request, "Already date range exists")
					elif request.POST["dateform"]>=request.POST["dateto"] :
						 messages.info(request,"From Date is Later than To Date")
					else:
						milkrate_form = BufalloMilkCenter.objects.create(
							from_date = datefrom,
							to_date=dateto,
							centercode = request.POST["category_cow"],
							#from_date = request.POST["dateform"],
							#to_date = request.POST["dateto"],
							milk_type = request.POST["milk"],
							rate_calculation = request.POST["rate_calculation"],
							snf_value = request.POST["snfix_actual"],
							fixed_value = fixed_value,
							
							# min_fat = min_fat,
							# max_fat = max_fat,
							# min_SNF = min_SNF,
							# max_SNF = max_SNF,
							# rate = rate,
							# commission = commission,
							fat_from = fat_from,
							fat_to = fat_to,
							penalty_in_RS = penalty_in_RS,
							deduction_calculation = request.POST["ded_ltrkg"],
							premium = premiumvalue,
							amount = amountvalue,
							commission_type = request.POST["com_type"],
							sour_milk = request.POST["sour_ltrkg"],
							curd = curdrate,
							min_rate = minrate,
							sour_milkrate = sourmilk,
							snf_deduction = snfdeduction,
							)
						for index,j in enumerate(request.POST.getlist('min_fat[]')):
							if index != 0 :
								minmaxbuff = MinMaxBuff.objects.create(
									centercode_id = milkrate_form.id,
									from_date = request.POST["dateform"],
									to_date = request.POST["dateto"],
									min_fat = request.POST.getlist('min_fat[]')[index],
									max_fat = request.POST.getlist('max_fat[]')[index],
									min_SNF = request.POST.getlist('min_SNF[]')[index],
									max_SNF = request.POST.getlist('max_SNF[]')[index],
									# milk_type = request.POST.getlist('milk_type[]')[index],
									tsrate = request.POST.getlist('rate[]')[index],
							#       commission = request.POST.getlist('commission[]')[index],
									)
								minmax_obj =  MinMaxFat.objects.filter(centercode_id = milkrate_form.id)
						messages.success(request, 'Your details have been saved!')

				return render(request,'bufallo-milk-center.html',locals())
			else:
				return render(request,'index.html',locals())
	except Exception as err:
			if search("1062",str(err)):
				messages.error(request,'Center Code Duplicated:')
			else:		
				messages.success(request,'Invalid Data Entry')
	   # messages.error(request,err)
	return render(request,'bufallo-milk-center.html',locals())
# Module -Masters #13-Ts Rates -bufallo milk - Saving bufallo_milk_category Values - bufallo-milk-category.html
# Created by - 2020-12-14 @ Charan
# Modified by - 2020-12-14 @ Charan 

# Modified by - 2020-12-14 @ Charan
def bufallo_milk_category(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			category = Category.objects.all()
			milk=Milktype.objects.all()
			milkrate = BufalloMilkRoute.objects.using(brch).all()
			if request.session.has_key('name'):
				if request.method == "POST":
					#x = datetime.strptime(request.POST["dateform"], "%Y-%m-%d")
					#y = datetime.strptime(request.POST["dateto"], "%Y-%m-%d")
					z = request.POST.get('snfdeduction')
					if z:
						snfdeduction = True
					else:
						snfdeduction = False
					premiumvalue = float(0.0)
					amountvalue = float(0.0)
					curdrate = float(0.0)
					minrate = float(0.0)
					sourmilk = float(0.0)
					fixed_value = float(0.0)
					# min_fat = float(0.0)
					# max_fat = float(0.0)
					# min_SNF = float(0.0)
					# max_SNF = float(0.0)
					# rate = float(0.0)
					# commission = float(0.0)
					fat_from = float(0.0)
					fat_to = float(0.0)
					penalty_in_RS = float(0.0)
					premiumvalue = request.POST["premium"]
					amountvalue = request.POST["amount"]
					curdrate = request.POST["curd_rate"]
					minrate = request.POST["min_rate"]
					sourmilk = request.POST["sourmilk_rate"]
					fixed_value = request.POST["fixedvalue"]
					datefrom = request.POST["dateform"]
					dateto = request.POST["dateto"]
					# min_fat = request.POST["min_fat"]
					# max_fat = request.POST["max_fat"]
					# min_SNF = request.POST["min_SNF"]
					# max_SNF = request.POST["max_SNF"]
					# rate = request.POST["rate"]
					# commission = request.POST["commission"]
					fat_from = request.POST["from_snf"]
					fat_to = request.POST["to_snf"]
					penalty_in_RS = request.POST["penalty_snf"]
					if premiumvalue == "" or premiumvalue == "0.0":
						premiumvalue = float(0.0)
					if amountvalue == "" or amountvalue == "0.0":
						amountvalue = float(0.0)
					if curdrate == "" or curdrate == "0.0":
						curdrate = float(0.0)
					if minrate == "" or minrate == "0.0":
						minrate = float(0.0)
					if sourmilk == "" or sourmilk == "0.0":
						sourmilk = float(0.0)
					if fixed_value == "" or fixed_value == "0.0":
						fixed_value = float(0.0)
					# if min_fat == "" or min_fat == "0.0":
					#     min_fat = float(0.0)
					# if max_fat == "" or max_fat == "0.0":
					#     max_fat = float(0.0)
					# if min_SNF == "" or min_SNF == "0.0":
					#     min_SNF = float(0.0)
					# if max_SNF == "" or max_SNF == "0.0":
					#     max_SNF = float(0.0)
					# if rate == "" or rate == "0.0":
					#     rate = float(0.0)
					# if commission == "" or commission == "0.0":
					#     commission = float(0.0)
					if fat_from == "" or fat_from == "0.0":
						fat_from = float(0.0)
					if fat_to == "" or fat_to == "0.0":
						fat_to = float(0.0)
					if penalty_in_RS == "" or penalty_in_RS == "0.0":
						penalty_in_RS = float(0.0)
					if BufalloMilkCategory.objects.using(brch).filter(from_date__range=[datefrom,dateto]).exists():
						messages.info(request, "TS Rates Already Registsred For From Date")
					elif BufalloMilkCategory.objects.using(brch).filter(to_date__range=[datefrom,dateto]).exists():
						messages.info(request,"TS Rates Already Registsred For To Date")
					#elif BufalloMilkCategory.objects.filter(from_date_gte=datefrom , to_date_lte=dateto).exists():
					#	messages.info(request, "Already date range exists")
					#elif BufalloMilkCategory.objects.filter(from_date__gte=datefrom).exists():
					#	messages.info(request, "Already date range exists")
					elif BufalloMilkCategory.objects.using(brch).filter(from_date__lte=datefrom ,to_date__gte=datefrom ).exists():
						messages.info(request, "Already date range exists")
					elif request.POST["dateform"]>=request.POST["dateto"] :
							messages.info(request,"From Date is Later than To Date")
					else:
						details_form=BufalloMilkCategory.objects.using(brch).create(
							from_date = datefrom,
							to_date=dateto,
							#milk_type = request.POST["milk"],
							#rate_calculation = request.POST["rate_calculation"],
							category = request.POST["category_cow"],
							milk_type = request.POST["milk"],
							rate_calculation = request.POST["rate_calculation"],
							snf_value = request.POST["snfix_actual"],
							fixed_value = fixed_value,
							# min_fat = min_fat,
							# max_fat = max_fat,
							# min_SNF = min_SNF,
							# max_SNF = max_SNF,
							# rate = rate,
							# commission = commission,
							fat_from = fat_from,
							fat_to = fat_to,
							penalty_in_RS = penalty_in_RS,
							deduction_calculation = request.POST["ded_ltrkg"],
							premium = premiumvalue,
							amount = amountvalue,
							commission_type = request.POST["com_type"],
							sour_milk = request.POST["sour_ltrkg"],
							curd = curdrate,
							min_rate = minrate,
							sour_milkrate = sourmilk,
							snf_deduction = snfdeduction,
							)
						details_form.save(using=brch)

						for index,j in enumerate(request.POST.getlist('min_fat[]')):
							if index != 0 :
								minmaxbuff = MinMaxBuff.objects.using(brch).create(
									category_id = details_form.id,
									from_date = request.POST["dateform"],
									to_date = request.POST["dateto"],
									min_fat = request.POST.getlist('min_fat[]')[index],
									max_fat = request.POST.getlist('max_fat[]')[index],
									min_SNF = request.POST.getlist('min_SNF[]')[index],
									max_SNF = request.POST.getlist('max_SNF[]')[index],
									tsrate = request.POST.getlist('rate[]')[index],
									#commission = request.POST.getlist('commission[]')[index],
									)
								minmax_obj =  MinMaxBuff.objects.using(brch).filter(category_id = details_form.id)
							# milkrate_form.save()
						messages.success(request, 'Your details have been saved!')
		else:
			category = Category.objects.all()
			milk=Milktype.objects.all()
			milkrate = BufalloMilkRoute.objects.all()
			if request.session.has_key('name'):
				if request.method == "POST":
					#x = datetime.strptime(request.POST["dateform"], "%Y-%m-%d")
					#y = datetime.strptime(request.POST["dateto"], "%Y-%m-%d")
					z = request.POST.get('snfdeduction')
					if z:
						snfdeduction = True
					else:
						snfdeduction = False
					premiumvalue = float(0.0)
					amountvalue = float(0.0)
					curdrate = float(0.0)
					minrate = float(0.0)
					sourmilk = float(0.0)
					fixed_value = float(0.0)
					# min_fat = float(0.0)
					# max_fat = float(0.0)
					# min_SNF = float(0.0)
					# max_SNF = float(0.0)
					# rate = float(0.0)
					# commission = float(0.0)
					fat_from = float(0.0)
					fat_to = float(0.0)
					penalty_in_RS = float(0.0)
					premiumvalue = request.POST["premium"]
					amountvalue = request.POST["amount"]
					curdrate = request.POST["curd_rate"]
					minrate = request.POST["min_rate"]
					sourmilk = request.POST["sourmilk_rate"]
					fixed_value = request.POST["fixedvalue"]
					datefrom = request.POST["dateform"]
					dateto = request.POST["dateto"]
					# min_fat = request.POST["min_fat"]
					# max_fat = request.POST["max_fat"]
					# min_SNF = request.POST["min_SNF"]
					# max_SNF = request.POST["max_SNF"]
					# rate = request.POST["rate"]
					# commission = request.POST["commission"]
					fat_from = request.POST["from_snf"]
					fat_to = request.POST["to_snf"]
					penalty_in_RS = request.POST["penalty_snf"]
					if premiumvalue == "" or premiumvalue == "0.0":
						premiumvalue = float(0.0)
					if amountvalue == "" or amountvalue == "0.0":
						amountvalue = float(0.0)
					if curdrate == "" or curdrate == "0.0":
						curdrate = float(0.0)
					if minrate == "" or minrate == "0.0":
						minrate = float(0.0)
					if sourmilk == "" or sourmilk == "0.0":
						sourmilk = float(0.0)
					if fixed_value == "" or fixed_value == "0.0":
						fixed_value = float(0.0)
					# if min_fat == "" or min_fat == "0.0":
					#     min_fat = float(0.0)
					# if max_fat == "" or max_fat == "0.0":
					#     max_fat = float(0.0)
					# if min_SNF == "" or min_SNF == "0.0":
					#     min_SNF = float(0.0)
					# if max_SNF == "" or max_SNF == "0.0":
					#     max_SNF = float(0.0)
					# if rate == "" or rate == "0.0":
					#     rate = float(0.0)
					# if commission == "" or commission == "0.0":
					#     commission = float(0.0)
					if fat_from == "" or fat_from == "0.0":
						fat_from = float(0.0)
					if fat_to == "" or fat_to == "0.0":
						fat_to = float(0.0)
					if penalty_in_RS == "" or penalty_in_RS == "0.0":
						penalty_in_RS = float(0.0)
					if BufalloMilkCategory.objects.filter(from_date__range=[datefrom,dateto]).exists():
						messages.info(request, "TS Rates Already Registsred For From Date")
					elif BufalloMilkCategory.objects.filter(to_date__range=[datefrom,dateto]).exists():
						messages.info(request,"TS Rates Already Registsred For To Date")
					#elif BufalloMilkCategory.objects.filter(from_date_gte=datefrom , to_date_lte=dateto).exists():
					#	messages.info(request, "Already date range exists")
					#elif BufalloMilkCategory.objects.filter(from_date__gte=datefrom).exists():
					#	messages.info(request, "Already date range exists")
					elif BufalloMilkCategory.objects.filter(from_date__lte=datefrom ,to_date__gte=datefrom ).exists():
						messages.info(request, "Already date range exists")
					elif request.POST["dateform"]>=request.POST["dateto"] :
							messages.info(request,"From Date is Later than To Date")
					else:
						details_form=BufalloMilkCategory.objects.create(
							from_date = datefrom,to_date=dateto,
							#milk_type = request.POST["milk"],
							#rate_calculation = request.POST["rate_calculation"],
							category = request.POST["category_cow"],
							milk_type = request.POST["milk"],
							rate_calculation = request.POST["rate_calculation"],
							snf_value = request.POST["snfix_actual"],
							fixed_value = fixed_value,
							# min_fat = min_fat,
							# max_fat = max_fat,
							# min_SNF = min_SNF,
							# max_SNF = max_SNF,
							# rate = rate,
							# commission = commission,
							fat_from = fat_from,
							fat_to = fat_to,
							penalty_in_RS = penalty_in_RS,
							deduction_calculation = request.POST["ded_ltrkg"],
							premium = premiumvalue,
							amount = amountvalue,
							commission_type = request.POST["com_type"],
							sour_milk = request.POST["sour_ltrkg"],
							curd = curdrate,
							min_rate = minrate,
							sour_milkrate = sourmilk,
							snf_deduction = snfdeduction,
							)
						details_form.save()

						for index,j in enumerate(request.POST.getlist('min_fat[]')):
							if index != 0 :
								minmaxbuff = MinMaxBuff.objects.create(
									category_id = details_form.id,
									from_date = request.POST["dateform"],
									to_date = request.POST["dateto"],
									min_fat = request.POST.getlist('min_fat[]')[index],
									max_fat = request.POST.getlist('max_fat[]')[index],
									min_SNF = request.POST.getlist('min_SNF[]')[index],
									max_SNF = request.POST.getlist('max_SNF[]')[index],
									tsrate = request.POST.getlist('rate[]')[index],
									#commission = request.POST.getlist('commission[]')[index],
									)
								minmax_obj =  MinMaxBuff.objects.filter(category_id = details_form.id)
							# milkrate_form.save()
							messages.success(request, 'Your details have been saved!')

					return render(request,'bufallo-milk-category.html',locals()) 
			else:
				return render(request,'index.html',locals())
	except Exception as err:
			if search("1062",str(err)):
				messages.error(request,'BufalloMilkCategory Duplicated')
			else:		
				messages.success(request,'Invalid Data Entry')
	return render(request,'bufallo-milk-category.html',locals())
# Module -Masters #13-Ts Rates -bufallo milk - Saving bufallo-milk-route Values - bufallo-milk-route.html
# Created by - 2020-12-14 @ Charan
# Modified by - 2020-12-14 @ Charan 
# Modified by - 2020-12-14 @ Charan
def bufallo_milk_route(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:

			route = Route.objects.using(brch).all()
			milk=Milktype.objects.all()
			if request.session.has_key('name'):
				if request.method == "POST":
					# x = datetime.strptime(request.POST["dateform"], "%Y-%m-%d")
					# y = datetime.strptime(request.POST["dateto"], "%Y-%m-%d")
					z = request.POST.get('snfdeduction')
					if z:
						snfdeduction = True
					else:
						snfdeduction = False
					premiumvalue = float(0.0)
					amountvalue = float(0.0)
					curdrate = float(0.0)
					minrate = float(0.0)
					sourmilk = float(0.0)
					fixed_value = float(0.0)
					min_fat = float(0.0)
					max_fat = float(0.0)
					min_SNF = float(0.0)
					max_SNF = float(0.0)
					rate = float(0.0)
					#commission = float(0.0)
					fat_from = float(0.0)
					fat_to = float(0.0)
					penalty_in_RS = float(0.0)
					premiumvalue = request.POST["premium"]
					amountvalue = request.POST["amount"]
					curdrate = request.POST["curd_rate"]
					minrate = request.POST["min_rate"]
					sourmilk = request.POST["sourmilk_rate"]
					fixed_value = request.POST["fixedvalue"]
					datefrom = request.POST["dateform"]
					dateto = request.POST["dateto"]
					Routecode = request.POST["category_cow"]
					# min_fat = request.POST["min_fat"]
					# max_fat = request.POST["max_fat"]
					# min_SNF = request.POST["min_SNF"]
					# max_SNF = request.POST["max_SNF"]
					# rate = request.POST["rate"]
					# commission = request.POST["commission"]
					fat_from = request.POST["from_snf"]
					fat_to = request.POST["to_snf"]
					penalty_in_RS = request.POST["penalty_snf"]
					if premiumvalue == "" or premiumvalue == "0.0":
						premiumvalue = float(0.0)
					if amountvalue == "" or amountvalue == "0.0":
						amountvalue = float(0.0)
					if curdrate == "" or curdrate == "0.0":
						curdrate = float(0.0)
					if minrate == "" or minrate == "0.0":
						minrate = float(0.0)
					if sourmilk == "" or sourmilk == "0.0":
						sourmilk = float(0.0)
					if fixed_value == "" or fixed_value == "0.0":
						fixed_value = float(0.0)
					if min_fat == "" or min_fat == "0.0":
						min_fat = float(0.0)
					if max_fat == "" or max_fat == "0.0":
						max_fat = float(0.0)
					if min_SNF == "" or min_SNF == "0.0":
						min_SNF = float(0.0)
					if max_SNF == "" or max_SNF == "0.0":
						max_SNF = float(0.0)
					if rate == "" or rate == "0.0":
						rate = float(0.0)
					#if commission == "" or commission == "0.0":
					#	commission = float(0.0)
					if fat_from == "" or fat_from == "0.0":
						fat_from = float(0.0)
					if fat_to == "" or fat_to == "0.0":
						fat_to = float(0.0)
					if penalty_in_RS == "" or penalty_in_RS == "0.0":
						penalty_in_RS = float(0.0)
					if BufalloMilkRoute.objects.using(brch).filter(from_date__range=[datefrom,dateto],Routecode=Routecode ).exists():
						messages.info(request, "TS Rates Already Registsred For From Date")
					elif BufalloMilkRoute.objects.using(brch).filter(to_date__range=[datefrom,dateto],Routecode=Routecode ).exists():
						messages.info(request, "TS Rates Already Registsred Form To Date")
					#elif BufalloMilkCategory.objects.filter(from_date_gte=datefrom , to_date_lte=dateto).exists():
					#	messages.info(request, "Already date range exists")
					#elif BufalloMilkCategory.objects.filter(from_date__gte=datefrom).exists():
					#	messages.info(request, "Already date range exists")
					elif BufalloMilkRoute.objects.using(brch).filter(from_date__lte=datefrom ,to_date__gte=datefrom ,Routecode=Routecode ).exists():
						messages.info(request, "Already date range exists")
					elif request.POST["dateform"]>=request.POST["dateto"] :
							messages.info(request,"From Date is Later than To Date")
					else:
						milkrate_form = BufalloMilkRoute.objects.using(brch).create(
							from_date = datefrom,
							to_date=dateto,
							Routecode = request.POST["category_cow"],
							#from_date = request.POST["dateform"],
							#to_date = request.POST["dateto"],
							milk_type = request.POST["milk"],
							rate_calculation = request.POST["rate_calculation"],
							snf_value = request.POST["snfix_actual"],
							fixed_value = fixed_value,
							
							# min_fat = min_fat,
							# max_fat = max_fat,
							# min_SNF = min_SNF,
							# max_SNF = max_SNF,
							# rate = rate,
							# commission = commission,
							fat_from = fat_from,
							fat_to = fat_to,
							penalty_in_RS = penalty_in_RS,
							deduction_calculation = request.POST["ded_ltrkg"],
							premium = premiumvalue,
							amount = amountvalue,
							commission_type = request.POST["com_type"],
							sour_milk = request.POST["sour_ltrkg"],
							curd = curdrate,
							min_rate = minrate,
							sour_milkrate = sourmilk,
							snf_deduction = snfdeduction,
							)
						for index,j in enumerate(request.POST.getlist('min_fat[]')):
							if index != 0 :
								minmaxbuff = MinMaxBuff.objects.using(brch).create(
									routecode_id = milkrate_form.id,
									from_date = request.POST["dateform"],
									to_date = request.POST["dateto"],
									min_fat = request.POST.getlist('min_fat[]')[index],
									max_fat = request.POST.getlist('max_fat[]')[index],
									min_SNF = request.POST.getlist('min_SNF[]')[index],
									max_SNF = request.POST.getlist('max_SNF[]')[index],
									# milk_type = request.POST.getlist('milk_type[]')[index],
									tsrate = request.POST.getlist('rate[]')[index],
							#		commission = request.POST.getlist('commission[]')[index],
									)
									
							
								# minmax_obj =  MinMaxBuff.objects.filter(routecode_id = milkrate_form.id)
							
						messages.success(request, 'Your details have been saved!')
		else:
			route = Route.objects.all()
			milk=Milktype.objects.all()
			if request.session.has_key('name'):
				if request.method == "POST":
					# x = datetime.strptime(request.POST["dateform"], "%Y-%m-%d")
					# y = datetime.strptime(request.POST["dateto"], "%Y-%m-%d")
					z = request.POST.get('snfdeduction')
					if z:
						snfdeduction = True
					else:
						snfdeduction = False
					premiumvalue = float(0.0)
					amountvalue = float(0.0)
					curdrate = float(0.0)
					minrate = float(0.0)
					sourmilk = float(0.0)
					fixed_value = float(0.0)
					min_fat = float(0.0)
					max_fat = float(0.0)
					min_SNF = float(0.0)
					max_SNF = float(0.0)
					rate = float(0.0)
					#commission = float(0.0)
					fat_from = float(0.0)
					fat_to = float(0.0)
					penalty_in_RS = float(0.0)
					premiumvalue = request.POST["premium"]
					amountvalue = request.POST["amount"]
					curdrate = request.POST["curd_rate"]
					minrate = request.POST["min_rate"]
					sourmilk = request.POST["sourmilk_rate"]
					fixed_value = request.POST["fixedvalue"]
					datefrom = request.POST["dateform"]
					dateto = request.POST["dateto"]
					Routecode = request.POST["category_cow"]
					# min_fat = request.POST["min_fat"]
					# max_fat = request.POST["max_fat"]
					# min_SNF = request.POST["min_SNF"]
					# max_SNF = request.POST["max_SNF"]
					# rate = request.POST["rate"]
					# commission = request.POST["commission"]
					fat_from = request.POST["from_snf"]
					fat_to = request.POST["to_snf"]
					penalty_in_RS = request.POST["penalty_snf"]
					if premiumvalue == "" or premiumvalue == "0.0":
						premiumvalue = float(0.0)
					if amountvalue == "" or amountvalue == "0.0":
						amountvalue = float(0.0)
					if curdrate == "" or curdrate == "0.0":
						curdrate = float(0.0)
					if minrate == "" or minrate == "0.0":
						minrate = float(0.0)
					if sourmilk == "" or sourmilk == "0.0":
						sourmilk = float(0.0)
					if fixed_value == "" or fixed_value == "0.0":
						fixed_value = float(0.0)
					if min_fat == "" or min_fat == "0.0":
						min_fat = float(0.0)
					if max_fat == "" or max_fat == "0.0":
						max_fat = float(0.0)
					if min_SNF == "" or min_SNF == "0.0":
						min_SNF = float(0.0)
					if max_SNF == "" or max_SNF == "0.0":
						max_SNF = float(0.0)
					if rate == "" or rate == "0.0":
						rate = float(0.0)
					#if commission == "" or commission == "0.0":
					#	commission = float(0.0)
					if fat_from == "" or fat_from == "0.0":
						fat_from = float(0.0)
					if fat_to == "" or fat_to == "0.0":
						fat_to = float(0.0)
					if penalty_in_RS == "" or penalty_in_RS == "0.0":
						penalty_in_RS = float(0.0)
					if BufalloMilkRoute.objects.filter(from_date__range=[datefrom,dateto],Routecode=Routecode ).exists():
						messages.info(request, "TS Rates Already Registsred For From Date")
					elif BufalloMilkRoute.objects.filter(to_date__range=[datefrom,dateto],Routecode=Routecode ).exists():
						messages.info(request, "TS Rates Already Registsred Form To Date")
					#elif BufalloMilkCategory.objects.filter(from_date_gte=datefrom , to_date_lte=dateto).exists():
					#	messages.info(request, "Already date range exists")
					#elif BufalloMilkCategory.objects.filter(from_date__gte=datefrom).exists():
					#	messages.info(request, "Already date range exists")
					elif BufalloMilkRoute.objects.filter(from_date__lte=datefrom ,to_date__gte=datefrom ,Routecode=Routecode ).exists():
						messages.info(request, "Already date range exists")
					elif request.POST["dateform"]>=request.POST["dateto"] :
							messages.info(request,"From Date is Later than To Date")
					else:
						milkrate_form = BufalloMilkRoute.objects.create(
							from_date = datefrom,
							to_date=dateto,
							Routecode = request.POST["category_cow"],
							#from_date = request.POST["dateform"],
							#to_date = request.POST["dateto"],
							milk_type = request.POST["milk"],
							rate_calculation = request.POST["rate_calculation"],
							snf_value = request.POST["snfix_actual"],
							fixed_value = fixed_value,
							
							# min_fat = min_fat,
							# max_fat = max_fat,
							# min_SNF = min_SNF,
							# max_SNF = max_SNF,
							# rate = rate,
							# commission = commission,
							fat_from = fat_from,
							fat_to = fat_to,
							penalty_in_RS = penalty_in_RS,
							deduction_calculation = request.POST["ded_ltrkg"],
							premium = premiumvalue,
							amount = amountvalue,
							commission_type = request.POST["com_type"],
							sour_milk = request.POST["sour_ltrkg"],
							curd = curdrate,
							min_rate = minrate,
							sour_milkrate = sourmilk,
							snf_deduction = snfdeduction,
							)
						for index,j in enumerate(request.POST.getlist('min_fat[]')):
							if index != 0 :
								minmaxbuff = MinMaxBuff.objects.create(
									routecode_id = milkrate_form.id,
									from_date = request.POST["dateform"],
									to_date = request.POST["dateto"],
									min_fat = request.POST.getlist('min_fat[]')[index],
									max_fat = request.POST.getlist('max_fat[]')[index],
									min_SNF = request.POST.getlist('min_SNF[]')[index],
									max_SNF = request.POST.getlist('max_SNF[]')[index],
									# milk_type = request.POST.getlist('milk_type[]')[index],
									tsrate = request.POST.getlist('rate[]')[index],
							#		commission = request.POST.getlist('commission[]')[index],
									)
									
							
								# minmax_obj =  MinMaxBuff.objects.filter(routecode_id = milkrate_form.id)
							
						messages.success(request, 'Your details have been saved!')

					return render(request,'bufallo-milk-route.html',locals())
			else:
					return render(request,'index.html',locals())
	except Exception as err:

			if search("1062",str(err)):
				messages.error(request,'BufalloMilkRoute Duplicated')
			else:		
				messages.success(request,'Invalid Data Entry')
	return render(request,'bufallo-milk-route.html',locals())
# Module -Masters #13-Ts Rates -cow milk - Saving cow-milk-route Values - cow-milk-route.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Charan
def cow_milk_category(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			category = Category.objects.all()
			milk = Milktype.objects.all()
			milkrate = CowMilkRoute.objects.using(brch).all()
			if request.session.has_key('name'):
				if request.method == 'POST':
					#x = datetime.strptime(request.POST["dateform"], "%Y-%m-%d")
					#y = datetime.strptime(request.POST["dateto"], "%Y-%m-%d")
					z = request.POST.get('snfdeduction')
					if z:
						snfdeduction = True
					else:
						snfdeduction = False
					premiumvalue = float(0.0)
					amountvalue = float(0.0)
					curdrate = float(0.0)
					minrate = float(0.0)
					sourmilk = float(0.0)
					fixed_value = float(0.0)
					# min_fat = float(0.0)
					# max_fat = float(0.0)
					# min_SNF = float(0.0)
					# max_SNF = float(0.0)
					# rate = float(0.0)
					# commission = float(0.0)
					fat_from = float(0.0)
					fat_to = float(0.0)
					penalty_in_RS = float(0.0)
					premiumvalue = request.POST["premium"]
					amountvalue = request.POST["amount"]
					curdrate = request.POST["curd_rate"]
					minrate = request.POST["min_rate"]
					sourmilk = request.POST["sourmilk_rate"]
					fixed_value = request.POST["fixedvalue"]
					datefrom = request.POST["dateform"]
					dateto = request.POST["dateto"]
					# min_fat = request.POST["min_fat"]
					# max_fat = request.POST["max_fat"]
					# min_SNF = request.POST["min_SNF"]
					# max_SNF = request.POST["max_SNF"]
					# rate = request.POST["rate"]
					# commission = request.POST["commission"]
					fat_from = request.POST["from_snf"]
					fat_to = request.POST["to_snf"]
					penalty_in_RS = request.POST["penalty_snf"]
					if premiumvalue == "" or premiumvalue == "0.0":
						premiumvalue = float(0.0)
					if amountvalue == "" or amountvalue == "0.0":
						amountvalue = float(0.0)
					if curdrate == "" or curdrate == "0.0":
						curdrate = float(0.0)
					if minrate == "" or minrate == "0.0":
						minrate = float(0.0)
					if sourmilk == "" or sourmilk == "0.0":
						sourmilk = float(0.0)
					if fixed_value == "" or fixed_value == "0.0":
						fixed_value = float(0.0)
					# if min_fat == "" or min_fat == "0.0":
					#     min_fat = float(0.0)
					# if max_fat == "" or max_fat == "0.0":
					#     max_fat = float(0.0)
					# if min_SNF == "" or min_SNF == "0.0":
					#     min_SNF = float(0.0)
					# if max_SNF == "" or max_SNF == "0.0":
					#     max_SNF = float(0.0)
					# if rate == "" or rate == "0.0":
					#     rate = float(0.0)
					# if commission == "" or commission == "0.0":
					#     commission = float(0.0)
					if fat_from == "" or fat_from == "0.0":
						fat_from = float(0.0)
					if fat_to == "" or fat_to == "0.0":
						fat_to = float(0.0)
					if penalty_in_RS == "" or penalty_in_RS == "0.0":
						penalty_in_RS = float(0.0)
					if CowMilkCategory.objects.using(brch).filter(from_date__range=[datefrom,dateto]).exists():
						messages.info(request, "TS Rates Already Registsred For From Date ")
					elif CowMilkCategory.objects.using(brch).filter(to_date__range=[datefrom,dateto]).exists():
						messages.info(request, "Please Verify To Date")
					#elif CowMilkCategory.objects.filter(from_date_gte=datefrom , to_date_lte=dateto).exists():
					#	messages.info(request, "Already date range exists")
					#elif CowMilkCategory.objects.filter(from_date__gte=datefrom).exists():
					#	messages.info(request, "Already date range exists")
					elif CowMilkCategory.objects.using(brch).filter(from_date__lte=datefrom ,to_date__gte=datefrom ).exists():
						messages.info(request, "Already date range exists")
					elif request.POST["dateform"]>=request.POST["dateto"] :
						messages.info(request,"From Date is Later than To Date")
					else:
						details_form=CowMilkCategory.objects.using(brch).create(
							from_date = datefrom,
							to_date=dateto,
							category = request.POST["category_cow"],
							milk_type = request.POST["milk"],
							rate_calculation = request.POST["rate_calculation"],
							snf_value = request.POST["snfix_actual"],
							fixed_value = fixed_value,
							fat_from = fat_from,
							fat_to = fat_to,
							penalty_in_RS = penalty_in_RS,
							deduction_calculation = request.POST["ded_ltrkg"],
							premium = premiumvalue,
							amount = amountvalue,
							commission_type = request.POST["com_type"],
							sour_milk = request.POST["sour_ltrkg"],
							curd = curdrate,
							min_rate = minrate,
							sour_milkrate = sourmilk,
							snf_deduction = snfdeduction,
							)
						details_form.save(using=brch)

						for index,j in enumerate(request.POST.getlist('min_fat[]')):
							if index != 0 :
								minmaxfat = MinMaxFat.objects.using(brch).create(
									category_id = details_form.id,
									from_date = request.POST["dateform"],
									to_date = request.POST["dateto"],
									min_fat = request.POST.getlist('min_fat[]')[index],
									max_fat = request.POST.getlist('max_fat[]')[index],
									min_SNF = request.POST.getlist('min_SNF[]')[index],
									max_SNF = request.POST.getlist('max_SNF[]')[index],
									tsrate = request.POST.getlist('rate[]')[index],
										#commission = request.POST.getlist('commission[]')[index],
									)
								minmax_obj =  MinMaxFat.objects.using(brch).filter(category_id = details_form.id)
						messages.success(request,'Your details have been saved!')
		else:
			category = Category.objects.all()
			milk = Milktype.objects.all()
			milkrate = CowMilkRoute.objects.all()
			if request.session.has_key('name'):
				if request.method == 'POST':
					#x = datetime.strptime(request.POST["dateform"], "%Y-%m-%d")
					#y = datetime.strptime(request.POST["dateto"], "%Y-%m-%d")
					z = request.POST.get('snfdeduction')
					if z:
						snfdeduction = True
					else:
						snfdeduction = False
					premiumvalue = float(0.0)
					amountvalue = float(0.0)
					curdrate = float(0.0)
					minrate = float(0.0)
					sourmilk = float(0.0)
					fixed_value = float(0.0)
					# min_fat = float(0.0)
					# max_fat = float(0.0)
					# min_SNF = float(0.0)
					# max_SNF = float(0.0)
					# rate = float(0.0)
					# commission = float(0.0)
					fat_from = float(0.0)
					fat_to = float(0.0)
					penalty_in_RS = float(0.0)
					premiumvalue = request.POST["premium"]
					amountvalue = request.POST["amount"]
					curdrate = request.POST["curd_rate"]
					minrate = request.POST["min_rate"]
					sourmilk = request.POST["sourmilk_rate"]
					fixed_value = request.POST["fixedvalue"]
					datefrom = request.POST["dateform"]
					dateto = request.POST["dateto"]
					# min_fat = request.POST["min_fat"]
					# max_fat = request.POST["max_fat"]
					# min_SNF = request.POST["min_SNF"]
					# max_SNF = request.POST["max_SNF"]
					# rate = request.POST["rate"]
					# commission = request.POST["commission"]
					fat_from = request.POST["from_snf"]
					fat_to = request.POST["to_snf"]
					penalty_in_RS = request.POST["penalty_snf"]
					if premiumvalue == "" or premiumvalue == "0.0":
						premiumvalue = float(0.0)
					if amountvalue == "" or amountvalue == "0.0":
						amountvalue = float(0.0)
					if curdrate == "" or curdrate == "0.0":
						curdrate = float(0.0)
					if minrate == "" or minrate == "0.0":
						minrate = float(0.0)
					if sourmilk == "" or sourmilk == "0.0":
						sourmilk = float(0.0)
					if fixed_value == "" or fixed_value == "0.0":
						fixed_value = float(0.0)
					# if min_fat == "" or min_fat == "0.0":
					#     min_fat = float(0.0)
					# if max_fat == "" or max_fat == "0.0":
					#     max_fat = float(0.0)
					# if min_SNF == "" or min_SNF == "0.0":
					#     min_SNF = float(0.0)
					# if max_SNF == "" or max_SNF == "0.0":
					#     max_SNF = float(0.0)
					# if rate == "" or rate == "0.0":
					#     rate = float(0.0)
					# if commission == "" or commission == "0.0":
					#     commission = float(0.0)
					if fat_from == "" or fat_from == "0.0":
						fat_from = float(0.0)
					if fat_to == "" or fat_to == "0.0":
						fat_to = float(0.0)
					if penalty_in_RS == "" or penalty_in_RS == "0.0":
						penalty_in_RS = float(0.0)
					if CowMilkCategory.objects.filter(from_date__range=[datefrom,dateto]).exists():
						messages.info(request, "TS Rates Already Registsred For From Date ")
					elif CowMilkCategory.objects.filter(to_date__range=[datefrom,dateto]).exists():
						messages.info(request, "Please Verify To Date")
					#elif CowMilkCategory.objects.filter(from_date_gte=datefrom , to_date_lte=dateto).exists():
					#	messages.info(request, "Already date range exists")
					#elif CowMilkCategory.objects.filter(from_date__gte=datefrom).exists():
					#	messages.info(request, "Already date range exists")
					elif CowMilkCategory.objects.filter(from_date_lte=datefrom ,to_date_gte=datefrom ).exists():
						messages.info(request, "Already date range exists")

					else:
						details_form=CowMilkCategory.objects.create(from_date = datefrom,to_date=dateto,milk_type = request.POST["milk"],rate_calculation = request.POST["rate_calculation"],
							snf_value = request.POST["snfix_actual"],
							fixed_value = fixed_value,
							fat_from = fat_from,
							fat_to = fat_to,
							penalty_in_RS = penalty_in_RS,
							deduction_calculation = request.POST["ded_ltrkg"],
							premium = premiumvalue,
							amount = amountvalue,
							commission_type = request.POST["com_type"],
							sour_milk = request.POST["sour_ltrkg"],
							curd = curdrate,
							min_rate = minrate,
							sour_milkrate = sourmilk,
							snf_deduction = snfdeduction,
							)
						details_form.save()

						for index,j in enumerate(request.POST.getlist('min_fat[]')):
							if index != 0 :
								minmaxfat = MinMaxFat.objects.create(
									category_id = details_form.id,
									from_date = request.POST["dateform"],
									to_date = request.POST["dateto"],
									min_fat = request.POST.getlist('min_fat[]')[index],
									max_fat = request.POST.getlist('max_fat[]')[index],
									min_SNF = request.POST.getlist('min_SNF[]')[index],
									max_SNF = request.POST.getlist('max_SNF[]')[index],
									tsrate = request.POST.getlist('rate[]')[index],
										#commission = request.POST.getlist('commission[]')[index],
									)
								minmax_obj =  MinMaxFat.objects.filter(category_id = details_form.id)
						messages.success(request,'Your details have been saved!')
	
				return render(request,'cow-milk-category.html',locals()) 
		
			else:

				return render(request,'index.html',locals())
	except Exception as err:
			if search("1062",str(err)):
				messages.error(request,'CowMilkCategory Duplicated')
			else:		
				messages.success(request,'Invalid Data Entry')
	return render(request,'cow-milk-category.html',locals())
def cow_milk_route(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			route = Route.objects.using(brch).all()
			milk=Milktype.objects.all()
			if request.session.has_key('name'):
				if request.method == "POST":
					# x = datetime.strptime(request.POST["dateform"], "%Y-%m-%d")
					# y = datetime.strptime(request.POST["dateto"], "%Y-%m-%d")
					z = request.POST.get('snfdeduction')
					if z:
						snfdeduction = True
					else:
						snfdeduction = False
					premiumvalue = float(0.0)
					amountvalue = float(0.0)
					curdrate = float(0.0)
					minrate = float(0.0)
					sourmilk = float(0.0)
					fixed_value = float(0.0)
					min_fat = float(0.0)
					max_fat = float(0.0)
					min_SNF = float(0.0)
					max_SNF = float(0.0)
					rate = float(0.0)
					#commission = float(0.0)
					fat_from = float(0.0)
					fat_to = float(0.0)
					penalty_in_RS = float(0.0)
					premiumvalue = request.POST["premium"]
					amountvalue = request.POST["amount"]
					curdrate = request.POST["curd_rate"]
					minrate = request.POST["min_rate"]
					sourmilk = request.POST["sourmilk_rate"]
					fixed_value = request.POST["fixedvalue"]
					datefrom = request.POST["dateform"]
					dateto = request.POST["dateto"]
					Routecode = request.POST["category_cow"]
					# min_fat = request.POST["min_fat"]
					# max_fat = request.POST["max_fat"]
					# min_SNF = request.POST["min_SNF"]
					# max_SNF = request.POST["max_SNF"]
					# rate = request.POST["rate"]
					# commission = request.POST["commission"]
					fat_from = request.POST["from_snf"]
					fat_to = request.POST["to_snf"]
					penalty_in_RS = request.POST["penalty_snf"]
					if premiumvalue == "" or premiumvalue == "0.0":
						premiumvalue = float(0.0)
					if amountvalue == "" or amountvalue == "0.0":
						amountvalue = float(0.0)
					if curdrate == "" or curdrate == "0.0":
						curdrate = float(0.0)
					if minrate == "" or minrate == "0.0":
						minrate = float(0.0)
					if sourmilk == "" or sourmilk == "0.0":
						sourmilk = float(0.0)
					if fixed_value == "" or fixed_value == "0.0":
						fixed_value = float(0.0)
					if min_fat == "" or min_fat == "0.0":
						min_fat = float(0.0)
					if max_fat == "" or max_fat == "0.0":
						max_fat = float(0.0)
					if min_SNF == "" or min_SNF == "0.0":
						min_SNF = float(0.0)
					if max_SNF == "" or max_SNF == "0.0":
						max_SNF = float(0.0)
					if rate == "" or rate == "0.0":
						rate = float(0.0)
					#if commission == "" or commission == "0.0":
					#	commission = float(0.0)
					if fat_from == "" or fat_from == "0.0":
						fat_from = float(0.0)
					if fat_to == "" or fat_to == "0.0":
						fat_to = float(0.0)
					if penalty_in_RS == "" or penalty_in_RS == "0.0":
						penalty_in_RS = float(0.0)
					if CowMilkRoute.objects.using(brch).filter(from_date__range=[datefrom,dateto],Routecode=Routecode).exists():
						messages.info(request, "TS Rates Already Registsred For From Date")
					elif CowMilkRoute.objects.using(brch).filter(to_date__range=[datefrom,dateto],Routecode=Routecode).exists():
						messages.info(request, "TS Rates Already Registsred For To Date")
					#elif CowMilkCategory.objects.filter(from_date_gte=datefrom , to_date_lte=dateto).exists():
					#	messages.info(request, "Already date range exists")
					#elif CowMilkCategory.objects.filter(from_date__gte=datefrom).exists():
					#	messages.info(request, "Already date range exists")
					elif CowMilkRoute.objects.using(brch).filter(from_date__lte=datefrom ,to_date__gte=datefrom,Routecode=Routecode).exists():
						messages.info(request, "Already date range exists")
					elif request.POST["dateform"]>=request.POST["dateto"] :
						messages.info(request,"From Date is Later than To Date")
					else:
						milkrate_form = CowMilkRoute.objects.using(brch).create(
							from_date = datefrom,
							to_date=dateto,
							Routecode = request.POST["category_cow"],
							#from_date = request.POST["dateform"],
							#to_date = request.POST["dateto"],
							milk_type = request.POST["milk"],
							rate_calculation = request.POST["rate_calculation"],
							snf_value = request.POST["snfix_actual"],
							fixed_value = fixed_value,
							
							# min_fat = min_fat,
							# max_fat = max_fat,
							# min_SNF = min_SNF,
							# max_SNF = max_SNF,
							# rate = rate,
							# commission = commission,
							fat_from = fat_from,
							fat_to = fat_to,
							penalty_in_RS = penalty_in_RS,
							deduction_calculation = request.POST["ded_ltrkg"],
							premium = premiumvalue,
							amount = amountvalue,
							commission_type = request.POST["com_type"],
							sour_milk = request.POST["sour_ltrkg"],
							curd = curdrate,
							min_rate = minrate,
							sour_milkrate = sourmilk,
							snf_deduction = snfdeduction,
							)
						
						for index,j in enumerate(request.POST.getlist('min_fat[]')):
							if index != 0 :
								minmaxfat = MinMaxFat.objects.using(brch).create(
									routecode_id = milkrate_form.id,
									from_date = request.POST["dateform"],
									to_date = request.POST["dateto"],
									min_fat = request.POST.getlist('min_fat[]')[index],
									max_fat = request.POST.getlist('max_fat[]')[index],
									min_SNF = request.POST.getlist('min_SNF[]')[index],
									max_SNF = request.POST.getlist('max_SNF[]')[index],
									# milk_type = request.POST.getlist('milk_type[]')[index],
									tsrate = request.POST.getlist('rate[]')[index],
							#		commission = request.POST.getlist('commission[]')[index],
									)
								minmax_obj =  MinMaxFat.objects.using(brch).filter(routecode_id = milkrate_form.id)
						messages.success(request,'Your details have been saved!')
			else:
				route = Route.objects.all()
				milk=Milktype.objects.all()
				if request.session.has_key('name'):
					if request.method == "POST":
						# x = datetime.strptime(request.POST["dateform"], "%Y-%m-%d")
						# y = datetime.strptime(request.POST["dateto"], "%Y-%m-%d")
						z = request.POST.get('snfdeduction')
						if z:
							snfdeduction = True
						else:
							snfdeduction = False
						premiumvalue = float(0.0)
						amountvalue = float(0.0)
						curdrate = float(0.0)
						minrate = float(0.0)
						sourmilk = float(0.0)
						fixed_value = float(0.0)
						min_fat = float(0.0)
						max_fat = float(0.0)
						min_SNF = float(0.0)
						max_SNF = float(0.0)
						rate = float(0.0)
						#commission = float(0.0)
						fat_from = float(0.0)
						fat_to = float(0.0)
						penalty_in_RS = float(0.0)
						premiumvalue = request.POST["premium"]
						amountvalue = request.POST["amount"]
						curdrate = request.POST["curd_rate"]
						minrate = request.POST["min_rate"]
						sourmilk = request.POST["sourmilk_rate"]
						fixed_value = request.POST["fixedvalue"]
						datefrom = request.POST["dateform"]
						dateto = request.POST["dateto"]
						Routecode = request.POST["category_cow"]
						# min_fat = request.POST["min_fat"]
						# max_fat = request.POST["max_fat"]
						# min_SNF = request.POST["min_SNF"]
						# max_SNF = request.POST["max_SNF"]
						# rate = request.POST["rate"]
						# commission = request.POST["commission"]
						fat_from = request.POST["from_snf"]
						fat_to = request.POST["to_snf"]
						penalty_in_RS = request.POST["penalty_snf"]
						if premiumvalue == "" or premiumvalue == "0.0":
							premiumvalue = float(0.0)
						if amountvalue == "" or amountvalue == "0.0":
							amountvalue = float(0.0)
						if curdrate == "" or curdrate == "0.0":
							curdrate = float(0.0)
						if minrate == "" or minrate == "0.0":
							minrate = float(0.0)
						if sourmilk == "" or sourmilk == "0.0":
							sourmilk = float(0.0)
						if fixed_value == "" or fixed_value == "0.0":
							fixed_value = float(0.0)
						if min_fat == "" or min_fat == "0.0":
							min_fat = float(0.0)
						if max_fat == "" or max_fat == "0.0":
							max_fat = float(0.0)
						if min_SNF == "" or min_SNF == "0.0":
							min_SNF = float(0.0)
						if max_SNF == "" or max_SNF == "0.0":
							max_SNF = float(0.0)
						if rate == "" or rate == "0.0":
							rate = float(0.0)
						#if commission == "" or commission == "0.0":
						#	commission = float(0.0)
						if fat_from == "" or fat_from == "0.0":
							fat_from = float(0.0)
						if fat_to == "" or fat_to == "0.0":
							fat_to = float(0.0)
						if penalty_in_RS == "" or penalty_in_RS == "0.0":
							penalty_in_RS = float(0.0)
						if CowMilkRoute.objects.filter(from_date__range=[datefrom,dateto],Routecode=Routecode).exists():
							messages.info(request, "TS Rates Already Registsred For From Date")
						elif CowMilkRoute.objects.filter(to_date__range=[datefrom,dateto],Routecode=Routecode).exists():
							messages.info(request, "TS Rates Already Registsred For To Date")
						#elif CowMilkCategory.objects.filter(from_date_gte=datefrom , to_date_lte=dateto).exists():
						#	messages.info(request, "Already date range exists")
						#elif CowMilkCategory.objects.filter(from_date__gte=datefrom).exists():
						#	messages.info(request, "Already date range exists")
						elif CowMilkRoute.objects.filter(from_date__lte=datefrom ,to_date__gte=datefrom,Routecode=Routecode).exists():
							messages.info(request, "Already date range exists")
						elif request.POST["dateform"]>=request.POST["dateto"] :
							messages.info(request,"From Date is Later than To Date")
						else:
							milkrate_form = CowMilkRoute.objects.create(
								from_date = datefrom,
								to_date=dateto,
								Routecode = request.POST["category_cow"],
								#from_date = request.POST["dateform"],
								#to_date = request.POST["dateto"],
								milk_type = request.POST["milk"],
								rate_calculation = request.POST["rate_calculation"],
								snf_value = request.POST["snfix_actual"],
								fixed_value = fixed_value,
								
								# min_fat = min_fat,
								# max_fat = max_fat,
								# min_SNF = min_SNF,
								# max_SNF = max_SNF,
								# rate = rate,
								# commission = commission,
								fat_from = fat_from,
								fat_to = fat_to,
								penalty_in_RS = penalty_in_RS,
								deduction_calculation = request.POST["ded_ltrkg"],
								premium = premiumvalue,
								amount = amountvalue,
								commission_type = request.POST["com_type"],
								sour_milk = request.POST["sour_ltrkg"],
								curd = curdrate,
								min_rate = minrate,
								sour_milkrate = sourmilk,
								snf_deduction = snfdeduction,
								)
							
							for index,j in enumerate(request.POST.getlist('min_fat[]')):
								if index != 0 :
									minmaxfat = MinMaxFat.objects.create(
										routecode_id = milkrate_form.id,
										from_date = request.POST["dateform"],
										to_date = request.POST["dateto"],
										min_fat = request.POST.getlist('min_fat[]')[index],
										max_fat = request.POST.getlist('max_fat[]')[index],
										min_SNF = request.POST.getlist('min_SNF[]')[index],
										max_SNF = request.POST.getlist('max_SNF[]')[index],
										# milk_type = request.POST.getlist('milk_type[]')[index],
										tsrate = request.POST.getlist('rate[]')[index],
								#		commission = request.POST.getlist('commission[]')[index],
										)
									minmax_obj =  MinMaxFat.objects.filter(routecode_id = milkrate_form.id)
							messages.success(request,'Your details have been saved!')	
			return render(request,'cow-milk-route.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'CowMilkRoute Duplicated')
		else:		
			messages.success(request,'Invalid Data Entry')
	return render(request,'cow-milk-route.html',locals())

def managecowcategory(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			cc = CowMilkCategory.objects.using(brch).all()
			minmaxfat=MinMaxFat.objects.using(brch).all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					request.session["date3703"] = request.POST["datefrom"]
					request.session["date3704"] = request.POST["dateto"]


					cc1 = CowMilkCategory.objects.using(brch).filter(from_date__range=[datefrom , dateto])
					cowcategory = "select M.id id, C.category,M.from_date from_date,M.to_date to_date ,C.rate_calculation,C.commission_type,C.fixed_value ,M.min_fat,M.max_fat,M.min_SNF,M.max_SNF,M.tsrate from school_cowmilkcategory C , school_minmaxfat M where C.from_date between  '%s' and '%s' and C.to_date between '%s' and '%s' and C.id=M.category_id " %(str(datefrom),str(dateto),str(datefrom),str(dateto))
					
					mf1 =  CowMilkCategory.objects.using(brch).raw(cowcategory)
				#messages.success(request,'Your details have been saved')	
				return render(request,'managecowcategory.html',locals())
		else:
			cc = CowMilkCategory.objects.all()
			minmaxfat=MinMaxFat.objects.all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					cc1 = CowMilkCategory.objects.using(brch).filter(from_date__range=[datefrom , dateto])
					cowcategory = "select M.id id, C.category,M.from_date from_date,M.to_date to_date ,C.rate_calculation,C.commission_type,C.fixed_value ,M.min_fat,M.max_fat,M.min_SNF,M.max_SNF,M.tsrate from school_cowmilkcategory C , school_minmaxfat M where C.from_date between  '%s' and '%s' and C.to_date between '%s' and '%s' and C.id=M.category_id " %(str(datefrom),str(dateto),str(datefrom),str(dateto))
					
					mf1 =  CowMilkCategory.objects.using(brch).raw(cowcategory)

				return render(request,'managecowcategory.html',locals())
			else:
				return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Key field Duplicated:'+request.POST["routeCode"],)
		else:
			messages.success(request,'Your details have been saved')
	return render (request,'managecowcategory.html',locals())
def managecowcategory1(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			cc = CowMilkCategory.objects.using(brch).all()
			minmaxfat=MinMaxFat.objects.using(brch).all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			datefrom3750 = request.session["date3703"]
			dateto3751 = request.session["date3704"]

			if request.session.has_key('name'):
				if request.method == "POST":
					#cc = CowMilkCategory.objects.all()
					#mm = MinMaxFat.objects.all()
					for index,j in enumerate(request.POST.getlist('id1[]')):
						dateF1 = request.POST.getlist("id1[]")[index]
						for index,j in enumerate(request.POST.getlist('fixedvalue[]')):
							cc2= CowMilkCategory.objects.using(brch).filter(id=request.POST.getlist('id1[]')[index]).update(
								category = request.POST.getlist('category[]')[index],
								from_date = request.POST.getlist('fromdate[]')[index],
								to_date =request.POST.getlist('todate[]')[index],
								milk_type =request.POST.getlist('milktype[]')[index],
								rate_calculation  =request.POST.getlist('ratecalculation[]')[index],
								commission_type = request.POST.getlist('commtype[]')[index],
								fixed_value = float(request.POST.getlist('fixedvalue[]')[index]),
								)  
					for index,j in enumerate(request.POST.getlist('id[]')):
						dateF12 = request.POST.getlist("id[]")[index]
						for index,j in enumerate(request.POST.getlist('minfat1[]')):
							mf2 = MinMaxFat.objects.using(brch).filter(id=request.POST.getlist('id[]')[index]).update(
								#from_date = request.POST.getlist('fromdate1[]')[index],
								#to_date = request.POST.getlist('todate1[]')[index],
								min_fat = request.POST.getlist('minfat1[]')[index],
								max_fat = request.POST.getlist('maxfat1[]')[index],
								min_SNF = request.POST.getlist('minsnf1[]')[index],
								max_SNF = request.POST.getlist('maxsnf1[]')[index],
								tsrate = request.POST.getlist('tsrate1[]')[index],
								) 
					#print(2.3)
					for index,j in enumerate(request.POST.getlist('id1[]')):
						dateF1 = request.POST.getlist("id1[]")[index]
						#print(5.3)
						#cursor = connection.cursor()
						#print(1.47)
						#dataupdate = "update %s.school_minmaxfat mf ,%s.school_cowmilkcategory cr set mf.from_date = cr.from_date,mf.to_date = cr.to_date where cr.id = mf.category_id and cr.date_from between '%s' and '%s' and cr.to_date between '%s' and '%s' "%(str(brch),str(brch),str(datefrom3750),str(dateto3751),str(datefrom3750),str(dateto3751))
						#dataup = "update %s.school_minmaxfat mf ,%s.school_cowmilkcategory cr set mf.from_date = cr.from_date,mf.to_date = cr.to_date where cr.id = mf.category_id and cr.id = '%s' "%(str(brch),str(brch),str(dateF1))
						#print(dataup)
						#print(1.13)
						#cursor.execute(dataupdate)
						#print(dataupdate)
						#print(2.32)
						#print(dataup)
						cursor1=connection.cursor()
						datas="update %s.school_minmaxfat mf ,%s.school_cowmilkcategory cr set mf.from_date = cr.from_date,mf.to_date = cr.to_date where cr.id = mf.category_id and cr.id = '%s' "%(str(brch),str(brch),str(dateF1))
						cursor1.execute(datas)
						print(datas)

					messages.success(request, 'Your details have been saved!')
					return render(request,'managecowcategory.html',locals())
				else:
					return render(request,'index.html',locals())  
		else:
			cc = CowMilkCategory.objects.all()
			minmaxfat=MinMaxFat.objects.all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			
			if request.session.has_key('name'):
				if request.method == "POST":
					cc = CowMilkCategory.objects.all()
					#mm = MinMaxFat.objects.all()
					
					for index,j in enumerate(request.POST.getlist('category[]')):
						cc2= CowMilkCategory.objects.filter(id=request.POST.getlist('id1[]')[index]).update(
							category = request.POST.getlist('category[]')[index],
							from_date = request.POST.getlist('fromdate[]')[index],
							to_date = request.POST.getlist('todate[]')[index],
							milk_type =request.POST.getlist('milktype[]')[index],
							rate_calculation  =request.POST.getlist('ratecalculation[]')[index],
							commission_type = request.POST.getlist('commtype[]')[index],
							fixed_value = request.POST.getlist('fixedvalue[]')[index],
							)  
					for index,j in enumerate(request.POST.getlist('minfat[]')):
						mf2 = MinMaxFat.objects.using(brch).filter(id=request.POST.getlist('id[]')[index]).update(
							from_date = request.POST.getlist('fromdate[]')[index],
							to_date = request.POST.getlist('todate[]')[index],
							min_fat = request.POST.getlist('minfat[]')[index],
							max_fat = request.POST.getlist('maxfat[]')[index],
							min_SNF = request.POST.getlist('minsnf[]')[index],
							max_SNF = request.POST.getlist('maxsnf[]')[index],
							tsrate = request.POST.getlist('tsrate[]')[index],
							) 
					
					
				messages.success(request, 'Your details have been saved!')  

				return render(request,'managecowcategory.html',locals())
			else:
				return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Key field Duplicated:'+request.POST["routeCode"],)
		else:
			messages.success(request,'Your details have been saved!')
	#messages.info(request,'err')
	return render (request,'managecowcategory.html',locals())

def managecowroute(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			cc = CowMilkRoute.objects.using(brch).all()
			minmaxfat=MinMaxFat.objects.using(brch).all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					request.session["date3868"] = request.POST["datefrom"]
					request.session["date3869"] = request.POST["dateto"]
					
					cc1 = CowMilkRoute.objects.using(brch).filter(from_date__range=[datefrom , dateto])
					cowroute = "select M.id id, C.Routecode,M.from_date from_date,M.to_date to_date ,C.rate_calculation,C.commission_type,C.fixed_value ,M.min_fat,M.max_fat,M.min_SNF,M.max_SNF,M.tsrate from school_cowmilkroute C , school_minmaxfat M where C.from_date between  '%s' and '%s' and C.to_date between '%s' and '%s' and C.id=M.routecode_id " %(str(datefrom),str(dateto),str(datefrom),str(dateto))
					
					mf1 =  CowMilkRoute.objects.using(brch).raw(cowroute)
				return render(request,'managecowroute.html',locals())
		else:
			cc = CowMilkRoute.objects.all()
			minmaxfat=MinMaxFat.objects.all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					cc1 = CowMilkRoute.objects.filter(from_date__range=[datefrom , dateto])
					cowroute = "select M.id id, C.Routecode,M.from_date from_date,M.to_date to_date ,C.rate_calculation,C.commission_type,C.fixed_value ,M.min_fat,M.max_fat,M.min_SNF,M.max_SNF,M.tsrate from school_cowmilkroute C , school_minmaxfat M where C.from_date between  '%s' and '%s' and C.to_date between '%s' and '%s' and C.id=M.routecode_id " %(str(datefrom),str(dateto),str(datefrom),str(dateto))
					
					mf1 =  CowMilkRoute.objects.raw(cowroute)
				return render(request,'managecowroute.html',locals())
			else:
				return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Key field Duplicated:'+request.POST["routeCode"],)
		else:
			messages.success(request,'Your details have been saved!')
	#messages.info(request,'err')+9+
	return render (request,'managecowroute.html',locals())
def managecowroute1(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			cc = CowMilkRoute.objects.using(brch).all()
			minmaxfat=MinMaxFat.objects.using(brch).all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			datefrom3868 = request.session["date3868"]
			dateto3869 = request.session["date3869"]
			if request.session.has_key('name'):
				if request.method == "POST":
					#cc = CowMilkCategory.objects.all()
					#mm = MinMaxFat.objects.all()
					for index,j in enumerate(request.POST.getlist('id1[]')):
						dateF1 = request.POST.getlist("id1[]")[index]
						for index,j in enumerate(request.POST.getlist('routecode[]')):
							cc2= CowMilkRoute.objects.using(brch).filter(id=request.POST.getlist('id1[]')[index]).update(
								Routecode = request.POST.getlist('routecode[]')[index],
								from_date = request.POST.getlist('fromdate[]')[index],
								to_date =request.POST.getlist('todate[]')[index],
								milk_type =request.POST.getlist('milktype[]')[index],
								rate_calculation  =request.POST.getlist('ratecalculation[]')[index],
								commission_type = request.POST.getlist('commtype[]')[index],
								fixed_value = float(request.POST.getlist('fixedvalue[]')[index]),
								)  
					
					for index,j in enumerate(request.POST.getlist('id[]')):
						dateF1 = request.POST.getlist("id[]")[index]	
						for index,j in enumerate(request.POST.getlist('minfat1[]')):
							mf2 = MinMaxFat.objects.using(brch).filter(id=request.POST.getlist('id[]')[index]).update(
								#from_date = request.POST.getlist('fromdate1[]')[index],
								#to_date = request.POST.getlist('todate1[]')[index],
								min_fat = request.POST.getlist('minfat1[]')[index],
								max_fat = request.POST.getlist('maxfat1[]')[index],
								min_SNF = request.POST.getlist('minsnf1[]')[index],
								max_SNF = request.POST.getlist('maxsnf1[]')[index],
								tsrate = request.POST.getlist('tsrate1[]')[index],
								) 
					for index,j in enumerate(request.POST.getlist('id1[]')):
						dateF1 = request.POST.getlist("id1[]")[index]
						#print(5.3)
						#cursor = connection.cursor()
						#print(1.47)
						#dataupdate = "update %s.school_minmaxfat mf ,%s.school_cowmilkcategory cr set mf.from_date = cr.from_date,mf.to_date = cr.to_date where cr.id = mf.category_id and cr.date_from between '%s' and '%s' and cr.to_date between '%s' and '%s' "%(str(brch),str(brch),str(datefrom3750),str(dateto3751),str(datefrom3750),str(dateto3751))
						#dataup = "update %s.school_minmaxfat mf ,%s.school_cowmilkcategory cr set mf.from_date = cr.from_date,mf.to_date = cr.to_date where cr.id = mf.category_id and cr.id = '%s' "%(str(brch),str(brch),str(dateF1))
						#print(dataup)
						#print(1.13)
						#cursor.execute(dataupdate)
						#print(dataupdate)
						#print(2.32)
						#print(dataup)
						cursor1=connection.cursor()
						datas="update %s.school_minmaxfat mf ,%s.school_cowmilkroute cr set mf.from_date = cr.from_date,mf.to_date = cr.to_date where cr.id = mf.routecode_id and cr.id = '%s' "%(str(brch),str(brch),str(dateF1))
						cursor1.execute(datas)
						print(datas)

					messages.success(request, 'Your details have been saved!')
					return render(request,'managecowroute.html',locals())
				else:
					return render(request,'index.html',locals())  
		else:
			cc = CowMilkRoute.objects.all()
			minmaxfat=MinMaxFat.objects.all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)

			if request.session.has_key('name'):
				if request.method == "POST":
					#cc = CowMilkCategory.objects.all()
					#mm = MinMaxFat.objects.all()
					
					for index,j in enumerate(request.POST.getlist('routecode[]')):
						cc2= CowMilkRoute.objects.filter(id=request.POST.getlist('id1[]')[index]).update(
							Routecode = request.POST.getlist('routecode[]')[index],
							from_date = request.POST.getlist('fromdate[]')[index],
							to_date =request.POST.getlist('todate[]')[index],
							milk_type =request.POST.getlist('milktype[]')[index],
							rate_calculation  =request.POST.getlist('ratecalculation[]')[index],
							commission_type = request.POST.getlist('commtype[]')[index],
							fixed_value = float(request.POST.getlist('fixedvalue[]')[index]),
							)  
						
					for index,j in enumerate(request.POST.getlist('minfat[]')):
						mf2 = MinMaxFat.objects.filter(id=request.POST.getlist('id[]')[index]).update(
							from_date = request.POST.getlist('fromdate[]')[index],
							to_date = request.POST.getlist('todate[]')[index],
							min_fat = request.POST.getlist('minfat[]')[index],
							max_fat = request.POST.getlist('maxfat[]')[index],
							min_SNF = request.POST.getlist('minsnf[]')[index],
							max_SNF = request.POST.getlist('maxsnf[]')[index],
							tsrate = request.POST.getlist('tsrate[]')[index],
							) 
					messages.success(request, 'Your details have been saved!')
					return render(request,'managecowroute.html',locals())
				else:
					return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Key field Duplicated:'+request.POST["routeCode"],)
		else:
			messages.success(request,'Your details have been saved!')
	#messages.info(request,'err')+9+
	return render (request,'managecowroute.html',locals())
def managecowcenter(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			cc = CowMilkCenter.objects.using(brch).all()
			minmaxfat=MinMaxFat.objects.using(brch).all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					request.session["date4027"] = request.POST["datefrom"]
					request.session["date4028"] = request.POST["dateto"]
					cc1 = CowMilkCenter.objects.using(brch).filter(from_date__range=[datefrom , dateto])
					cowcenter = "select M.id id, C.centercode,M.from_date from_date,M.to_date to_date ,C.rate_calculation,C.commission_type,C.fixed_value ,M.min_fat,M.max_fat,M.min_SNF,M.max_SNF,M.tsrate from school_cowmilkcenter C , school_minmaxfat M where C.from_date between  '%s' and '%s' and C.to_date between '%s' and '%s' and C.id=M.centercode_id " %(str(datefrom),str(dateto),str(datefrom),str(dateto))
					
					mf1 =  CowMilkCenter.objects.using(brch).raw(cowcenter)
				return render(request,'managecowcenter.html',locals())
		else:
			cc = CowMilkCenter.objects.all()
			minmaxfat=MinMaxFat.objects.all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					cc1 = CowMilkCenter.objects.filter(from_date__range=[datefrom , dateto])
					cowcenter = "select M.id id, C.centercode,M.from_date from_date,M.to_date to_date ,C.rate_calculation,C.commission_type,C.fixed_value ,M.min_fat,M.max_fat,M.min_SNF,M.max_SNF,M.tsrate from school_cowmilkcenter C , school_minmaxfat M where C.from_date between  '%s' and '%s' and C.to_date between '%s' and '%s' and C.id=M.centercode_id " %(str(datefrom),str(dateto),str(datefrom),str(dateto))
					
					mf1 =  CowMilkcenter.objects.raw(cowcenter)
				return render(request,'managecowcenter.html',locals())
			else:
				return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Key field Duplicated:'+request.POST["routeCode"],)
		else:
			messages.success(request,'Your details have been saved!')
	#messages.info(request,'err')+9+
	return render (request,'managecowcenter.html',locals())


def managecowcenter1(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			cc = CowMilkCenter.objects.using(brch).all()
			minmaxfat=MinMaxFat.objects.using(brch).all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			datefrom4027 = request.session["date4027"]
			dateto4028 = request.session["date4028"]

			if request.session.has_key('name'):
				if request.method == "POST":
					#cc = CowMilkCategory.objects.all()
					#mm = MinMaxFat.objects.all()
					for index,j in enumerate(request.POST.getlist('id1[]')):
						dateF1 = request.POST.getlist("id1[]")[index]
						for index,j in enumerate(request.POST.getlist('centercode[]')):
							cc2= CowMilkCenter.objects.using(brch).filter(id=request.POST.getlist('id1[]')[index]).update(
								centercode = request.POST.getlist('centercode[]')[index],
								from_date = request.POST.getlist('fromdate[]')[index],
								to_date =request.POST.getlist('todate[]')[index],
								milk_type =request.POST.getlist('milktype[]')[index],
								rate_calculation  =request.POST.getlist('ratecalculation[]')[index],
								commission_type = request.POST.getlist('commtype[]')[index],
								fixed_value = float(request.POST.getlist('fixedvalue[]')[index]),
								)  
					for index,j in enumerate(request.POST.getlist('id[]')):
						dateF1 = request.POST.getlist("id[]")[index]
						for index,j in enumerate(request.POST.getlist('minfat1[]')):
							mf2 = MinMaxFat.objects.using(brch).filter(id=request.POST.getlist('id[]')[index]).update(
								#from_date = request.POST.getlist('fromdate1[]')[index],
								#to_date = request.POST.getlist('todate1[]')[index],
								min_fat = request.POST.getlist('minfat1[]')[index],
								max_fat = request.POST.getlist('maxfat1[]')[index],
								min_SNF = request.POST.getlist('minsnf1[]')[index],
								max_SNF = request.POST.getlist('maxsnf1[]')[index],
								tsrate = request.POST.getlist('tsrate1[]')[index],
								) 
						
					for index,j in enumerate(request.POST.getlist('id1[]')):
						dateF1 = request.POST.getlist("id1[]")[index]
						#print(5.3)
						#cursor = connection.cursor()
						#print(1.47)
						#dataupdate = "update %s.school_minmaxfat mf ,%s.school_cowmilkcategory cr set mf.from_date = cr.from_date,mf.to_date = cr.to_date where cr.id = mf.category_id and cr.date_from between '%s' and '%s' and cr.to_date between '%s' and '%s' "%(str(brch),str(brch),str(datefrom3750),str(dateto3751),str(datefrom3750),str(dateto3751))
						#dataup = "update %s.school_minmaxfat mf ,%s.school_cowmilkcategory cr set mf.from_date = cr.from_date,mf.to_date = cr.to_date where cr.id = mf.category_id and cr.id = '%s' "%(str(brch),str(brch),str(dateF1))
						#print(dataup)
						#print(1.13)
						#cursor.execute(dataupdate)
						#print(dataupdate)
						#print(2.32)
						#print(dataup)
						cursor1=connection.cursor()
						datas="update %s.school_minmaxfat mf ,%s.school_cowmilkcenter cr set mf.from_date = cr.from_date,mf.to_date = cr.to_date where cr.id = mf.centercode_id and cr.id = '%s' "%(str(brch),str(brch),str(dateF1))
						cursor1.execute(datas)
						print(datas)
	
					
					
					messages.success(request, 'Your details have been saved!')
					return render(request,'managecowcenter.html',locals())
				else:
					return render(request,'index.html',locals())  
		else:
			cc = CowMilkCenter.objects.all()
			minmaxfat=MinMaxFat.objects.all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)

			if request.session.has_key('name'):
				if request.method == "POST":
					#cc = CowMilkCategory.objects.all()
					#mm = MinMaxFat.objects.all()
					
					for index,j in enumerate(request.POST.getlist('centercode[]')):
						cc2= CowMilkRoute.objects.filter(id=request.POST.getlist('id1[]')[index]).update(
							centercode = request.POST.getlist('centercode[]')[index],
							from_date = request.POST.getlist('fromdate[]')[index],
							to_date =request.POST.getlist('todate[]')[index],
							milk_type =request.POST.getlist('milktype[]')[index],
							rate_calculation  =request.POST.getlist('ratecalculation[]')[index],
							commission_type = request.POST.getlist('commtype[]')[index],
							fixed_value = float(request.POST.getlist('fixedvalue[]')[index]),
							)  
						
					for index,j in enumerate(request.POST.getlist('minfat[]')):
				
						mf2 = MinMaxFat.objects.filter(id=request.POST.getlist('id[]')[index]).update(
							
							from_date = request.POST.getlist('fromdate[]')[index],
							to_date = request.POST.getlist('todate[]')[index],
							min_fat = request.POST.getlist('minfat[]')[index],
							max_fat = request.POST.getlist('maxfat[]')[index],
							min_SNF = request.POST.getlist('minsnf[]')[index],
							max_SNF = request.POST.getlist('maxsnf[]')[index],
							tsrate = request.POST.getlist('tsrate[]')[index],
							) 
						
					
					
					messages.success(request, 'Your details have been saved!')
					return render(request,'managecowcenter.html',locals())
				else:
					return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Key field Duplicated:'+request.POST["routeCode"],)
		else:
			messages.success(request,'Your details have been saved!')
	#messages.info(request,'err')+9+
	return render (request,'managecowcenter.html',locals())



def managebuffcategory(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			cc = BufalloMilkCategory.objects.using(brch).all()
			minmaxbuff=MinMaxBuff.objects.using(brch).all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					request.session["date4198"] = request.POST["datefrom"]
					request.session["date4199"] = request.POST["dateto"]
					cc1 = BufalloMilkCategory.objects.using(brch).filter(from_date__range=[datefrom , dateto])
					buffcategory = "select M.id id, M.from_date from_date,M.to_date to_date ,B.category,B.rate_calculation,B.commission_type,B.fixed_value ,M.min_fat,M.max_fat,M.min_SNF,M.max_SNF,M.tsrate from school_bufallomilkcategory B , school_minmaxbuff M where B.from_date between  '%s' and '%s' and B.to_date between '%s' and '%s' and B.id=M.category_id " %(str(datefrom),str(dateto),str(datefrom),str(dateto))
					
					mf1 =  BufalloMilkCategory.objects.using(brch).raw(buffcategory)
				#messages.success(request,'Your details have been saved!')
				return render(request,'managebuffcategory.html',locals())
		else:
			cc = BufalloMilkCategory.objects.all()
			minmaxbuff=MinMaxBuff.objects.all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					cc1 = BufalloMilkCategory.objects.using(brch).filter(from_date__range=[datefrom , dateto])
					buffcategory = "select M.id id, M.from_date from_date,M.to_date to_date ,B.category,B.rate_calculation,B.commission_type,B.fixed_value ,M.min_fat,M.max_fat,M.min_SNF,M.max_SNF,M.tsrate from school_bufallomilkcategory B , school_minmaxbuff M where B.from_date between  '%s' and '%s' and B.to_date between '%s' and '%s' and B.id=M.category_id " %(str(datefrom),str(dateto),str(datefrom),str(dateto))
					
					mf1 =  BufalloMilkCategory.objects.raw(buffcategory)
				return render(request,'managebuffcategory.html',locals())
			else:
				return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Key field Duplicated:'+request.POST["routeCode"],)
		else:
			messages.success(request,'Invalid Data Entry')
	#messages.info(request,'err')
	return render (request,'managebuffcategory.html',locals())

def managebuffcategory1(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			cc = BufalloMilkCategory.objects.using(brch).all()
			minmaxbuff=MinMaxBuff.objects.using(brch).all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			datefrom4198 = request.session["date4198"]
			dateto4199 = request.session["date4199"]
			if request.session.has_key('name'):
				if request.method == "POST":
					#cc = BufalloMilkCategory.objects.all()
					#mm = MinMaxFat.objects.all()
					for index,j in enumerate(request.POST.getlist('id1[]')):
						dateF1 = request.POST.getlist("id1[]")[index]
						for index,j in enumerate(request.POST.getlist('fixedvalue[]')):
							cc2= BufalloMilkCategory.objects.using(brch).filter(id=request.POST.getlist('id1[]')[index]).update(
								category = request.POST.getlist('category[]')[index],
								from_date = request.POST.getlist('fromdate[]')[index],
								to_date =request.POST.getlist('todate[]')[index],
								milk_type =request.POST.getlist('milktype[]')[index],
								rate_calculation  =request.POST.getlist('ratecalculation[]')[index],
								commission_type = request.POST.getlist('commtype[]')[index],
								fixed_value = float(request.POST.getlist('fixedvalue[]')[index]),
								)
					for index,j in enumerate(request.POST.getlist('id[]')):
						dateF1 = request.POST.getlist("id[]")[index]  
						for index,j in enumerate(request.POST.getlist('minfat1[]')):
							mf2 = MinMaxBuff.objects.using(brch).filter(id=request.POST.getlist('id[]')[index]).update(
								#from_date = request.POST.getlist('fromdate1[]')[index],
								#to_date = request.POST.getlist('todate1[]')[index],
								min_fat = request.POST.getlist('minfat1[]')[index],
								max_fat = request.POST.getlist('maxfat1[]')[index],
								min_SNF = request.POST.getlist('minsnf1[]')[index],
								max_SNF = request.POST.getlist('maxsnf1[]')[index],
								tsrate = request.POST.getlist('tsrate1[]')[index],
								) 
					for index,j in enumerate(request.POST.getlist('id1[]')):
						dateF1 = request.POST.getlist("id1[]")[index]
						#print(5.3)
						#cursor = connection.cursor()
						#print(1.47)
						#dataupdate = "update %s.school_minmaxfat mf ,%s.school_cowmilkcategory cr set mf.from_date = cr.from_date,mf.to_date = cr.to_date where cr.id = mf.category_id and cr.date_from between '%s' and '%s' and cr.to_date between '%s' and '%s' "%(str(brch),str(brch),str(datefrom3750),str(dateto3751),str(datefrom3750),str(dateto3751))
						#dataup = "update %s.school_minmaxfat mf ,%s.school_cowmilkcategory cr set mf.from_date = cr.from_date,mf.to_date = cr.to_date where cr.id = mf.category_id and cr.id = '%s' "%(str(brch),str(brch),str(dateF1))
						#print(dataup)
						#print(1.13)
						#cursor.execute(dataupdate)
						#print(dataupdate)
						#print(2.32)
						#print(dataup)
						cursor1=connection.cursor()
						datas="update %s.school_minmaxbuff mb ,%s.school_bufallomilkcategory br set mb.from_date = br.from_date,mb.to_date = br.to_date where br.id = mb.category_id and br.id = '%s' "%(str(brch),str(brch),str(dateF1))
						cursor1.execute(datas)
						print(datas)

					
					messages.success(request, 'Your details have been saved!')
					return render(request,'managebuffcategory.html',locals())
				else:
					return render(request,'index.html',locals())  
		else:
			cc = BufalloMilkCategory.objects.all()
			minmaxbuff=MinMaxBuff.objects.all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			
			if request.session.has_key('name'):
				if request.method == "POST":
					cc = BufalloMilkCategory.objects.all()
					#mm = MinMaxFat.objects.all()
					
					for index,j in enumerate(request.POST.getlist('category[]')):
						cc2= BufalloMilkCategory.objects.filter(id=request.POST.getlist('id1[]')[index]).update(
							category = request.POST.getlist('category[]')[index],
							from_date = request.POST.getlist('fromdate[]')[index],
							to_date = request.POST.getlist('todate[]')[index],
							milk_type =request.POST.getlist('milktype[]')[index],
							rate_calculation  =request.POST.getlist('ratecalculation[]')[index],
							commission_type = request.POST.getlist('commtype[]')[index],
							fixed_value = request.POST.getlist('fixedvalue[]')[index],
							)  
					for index,j in enumerate(request.POST.getlist('minfat[]')):
						mf2 = MinMaxBuff.objects.filter(id=request.POST.getlist('id[]')[index]).update(
							from_date = request.POST.getlist('fromdate[]')[index],
							to_date = request.POST.getlist('todate[]')[index],
							min_fat = request.POST.getlist('minfat[]')[index],
							max_fat = request.POST.getlist('maxfat[]')[index],
							min_SNF = request.POST.getlist('minsnf[]')[index],
							max_SNF = request.POST.getlist('maxsnf[]')[index],
							tsrate = request.POST.getlist('tsrate[]')[index],
							) 
					
					
				messages.success(request, 'Your details have been saved!')  

				return render(request,'managebuffcategory.html',locals())
			else:
				return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Key field Duplicated:'+request.POST["routeCode"],)
		else:
			messages.success(request,'Your details have been saved')
	#messages.info(request,'err')
	return render (request,'managebuffcategory.html',locals())

def managebuffroute(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			cc = BufalloMilkRoute.objects.using(brch).all()
			minmaxbuff=MinMaxBuff.objects.using(brch).all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					request.session["date4360"] = request.POST["datefrom"]
					request.session["date4361"] = request.POST["dateto"]
					cc1 = BufalloMilkRoute.objects.using(brch).filter(from_date__range=[datefrom , dateto])
					buffroute = "select M.id id, B.Routecode,M.from_date from_date,M.to_date to_date ,B.rate_calculation,B.commission_type,B.fixed_value ,M.min_fat,M.max_fat,M.min_SNF,M.max_SNF,M.tsrate from school_bufallomilkroute B , school_minmaxbuff M where B.from_date between  '%s' and '%s' and B.to_date between '%s' and '%s' and B.id=M.routecode_id " %(str(datefrom),str(dateto),str(datefrom),str(dateto))
					
					mf1 =  BufalloMilkRoute.objects.using(brch).raw(buffroute)
				return render(request,'managebuffroute.html',locals())
		else:
			cc = CowMilkRoute.objects.all()
			minmaxfat=MinMaxFat.objects.all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					cc1 = BufalloMilkRoute.objects.filter(from_date__range=[datefrom , dateto])
					buffroute = "select M.id id, B.Routecode,M.from_date from_date,M.to_date to_date ,B.rate_calculation,B.commission_type,B.fixed_value ,M.min_fat,M.max_fat,M.min_SNF,M.max_SNF,M.tsrate from school_bufallomilkroute B , school_minmaxbuff M where B.from_date between  '%s' and '%s' and B.to_date between '%s' and '%s' and B.id=M.routecode_id " %(str(datefrom),str(dateto),str(datefrom),str(dateto))
					
					mf1 =  BufalloMilkRoute.objects.raw(buffroute)
				return render(request,'managebuffroute.html',locals())
			else:
				return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Key field Duplicated:'+request.POST["routeCode"],)
		else:
			messages.success(request,'Your details have been saved!')
	#messages.info(request,'err')+9+
	return render (request,'managebuffroute.html',locals())

def managebuffroute1(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			cc = BufalloMilkRoute.objects.using(brch).all()
			minmaxbuff=MinMaxBuff.objects.using(brch).all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			datefrom4360 = request.session["date4360"]
			dateto4361 = request.session["date4361"]
			if request.session.has_key('name'):
				if request.method == "POST":
					#cc = CowMilkCategory.objects.all()
					#mm = MinMaxFat.objects.all()
					for index,j in enumerate(request.POST.getlist('id1[]')):
						dateF1 = request.POST.getlist("id1[]")[index]
						for index,j in enumerate(request.POST.getlist('routecode[]')):
							cc2= BufalloMilkRoute.objects.using(brch).filter(id=request.POST.getlist('id1[]')[index]).update(
								Routecode = request.POST.getlist('routecode[]')[index],
								from_date = request.POST.getlist('fromdate[]')[index],
								to_date =request.POST.getlist('todate[]')[index],
								milk_type =request.POST.getlist('milktype[]')[index],
								rate_calculation  =request.POST.getlist('ratecalculation[]')[index],
								commission_type = request.POST.getlist('commtype[]')[index],
								fixed_value = float(request.POST.getlist('fixedvalue[]')[index]),
								)  
					for index,j in enumerate(request.POST.getlist('id[]')):
						dateF1 = request.POST.getlist("id[]")[index]	
						for index,j in enumerate(request.POST.getlist('minfat1[]')):
							mf2 = MinMaxBuff.objects.using(brch).filter(id=request.POST.getlist('id[]')[index]).update(
								#from_date = request.POST.getlist('fromdate1[]')[index],
								#to_date = request.POST.getlist('todate1[]')[index],
								min_fat = request.POST.getlist('minfat1[]')[index],
								max_fat = request.POST.getlist('maxfat1[]')[index],
								min_SNF = request.POST.getlist('minsnf1[]')[index],
								max_SNF = request.POST.getlist('maxsnf1[]')[index],
								tsrate = request.POST.getlist('tsrate1[]')[index],
								) 
					for index,j in enumerate(request.POST.getlist('id1[]')):
						dateF1 = request.POST.getlist("id1[]")[index]
						#print(5.3)
						#cursor = connection.cursor()
						#print(1.47)
						#dataupdate = "update %s.school_minmaxfat mf ,%s.school_cowmilkcategory cr set mf.from_date = cr.from_date,mf.to_date = cr.to_date where cr.id = mf.category_id and cr.date_from between '%s' and '%s' and cr.to_date between '%s' and '%s' "%(str(brch),str(brch),str(datefrom3750),str(dateto3751),str(datefrom3750),str(dateto3751))
						#dataup = "update %s.school_minmaxfat mf ,%s.school_cowmilkcategory cr set mf.from_date = cr.from_date,mf.to_date = cr.to_date where cr.id = mf.category_id and cr.id = '%s' "%(str(brch),str(brch),str(dateF1))
						#print(dataup)
						#print(1.13)
						#cursor.execute(dataupdate)
						#print(dataupdate)
						#print(2.32)
						#print(dataup)
						cursor1=connection.cursor()
						datas="update %s.school_minmaxbuff mb ,%s.school_bufallomilkroute br set mb.from_date = br.from_date,mb.to_date = br.to_date where br.id = mb.routecode_id and br.id = '%s' "%(str(brch),str(brch),str(dateF1))
						cursor1.execute(datas)
						print(datas)

					messages.success(request, 'Your details have been saved!')
					return render(request,'managebuffroute.html',locals())
				else:
					return render(request,'index.html',locals())  
		else:
			cc = BufalloMilkRoute.objects.all()
			minmaxbuff=MinMaxBuff.objects.all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)

			if request.session.has_key('name'):
				if request.method == "POST":
					#cc = CowMilkCategory.objects.all()
					#mm = MinMaxFat.objects.all()
					
					for index,j in enumerate(request.POST.getlist('routecode[]')):
						cc2= BufalloMilkRoute.objects.filter(id=request.POST.getlist('id1[]')[index]).update(
							Routecode = request.POST.getlist('routecode[]')[index],
							from_date = request.POST.getlist('fromdate[]')[index],
							to_date =request.POST.getlist('todate[]')[index],
							milk_type =request.POST.getlist('milktype[]')[index],
							rate_calculation  =request.POST.getlist('ratecalculation[]')[index],
							commission_type = request.POST.getlist('commtype[]')[index],
							fixed_value = float(request.POST.getlist('fixedvalue[]')[index]),
							)  
					
					for index,j in enumerate(request.POST.getlist('minfat[]')):
					
						mf2 = MinMaxBuff.objects.filter(id=request.POST.getlist('id[]')[index]).update(
							from_date = request.POST.getlist('fromdate[]')[index],
							to_date = request.POST.getlist('todate[]')[index],
							min_fat = request.POST.getlist('minfat[]')[index],
							max_fat = request.POST.getlist('maxfat[]')[index],
							min_SNF = request.POST.getlist('minsnf[]')[index],
							max_SNF = request.POST.getlist('maxsnf[]')[index],
							tsrate = request.POST.getlist('tsrate[]')[index],
							) 
					messages.success(request, 'Your details have been saved!')
					return render(request,'managebuffroute.html',locals())
				else:
					return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Key field Duplicated:'+request.POST["routeCode"],)
		else:
			messages.success(request,'Your details have been saved!')
	#messages.info(request,'err')+9+
	return render (request,'managebuffroute.html',locals())

def managebuffcenter(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			cc = BufalloMilkCenter.objects.using(brch).all()
			minmaxbuff=MinMaxBuff.objects.using(brch).all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					request.session["date4519"] = request.POST["datefrom"]
					request.session["date4520"] = request.POST["dateto"]
					cc1 = BufalloMilkCenter.objects.using(brch).filter(from_date__range=[datefrom , dateto])
					buffcenter = "select M.id id, B.centercode,M.from_date from_date,M.to_date to_date ,B.rate_calculation,B.commission_type,B.fixed_value ,M.min_fat,M.max_fat,M.min_SNF,M.max_SNF,M.tsrate from school_bufallomilkcenter B , school_minmaxbuff M where B.from_date between  '%s' and '%s' and B.to_date between '%s' and '%s' and B.id=M.centercode_id " %(str(datefrom),str(dateto),str(datefrom),str(dateto))
					
					mf1 =  BufalloMilkCenter.objects.using(brch).raw(buffcenter)
				return render(request,'managebuffcenter.html',locals())
		else:
			cc = BufalloMilkRoute.objects.all()
			minmaxfat=MinMaxBuff.objects.all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					cc1 = BufalloMilkCenter.objects.filter(from_date__range=[datefrom , dateto])
					buffcenter = "select M.id id, B.centercode,M.from_date from_date,M.to_date to_date ,B.rate_calculation,B.commission_type,B.fixed_value ,M.min_fat,M.max_fat,M.min_SNF,M.max_SNF,M.tsrate from school_bufallomilkcenter B , school_minmaxbuff M where B.from_date between  '%s' and '%s' and B.to_date between '%s' and '%s' and B.id=M.centercode_id " %(str(datefrom),str(dateto),str(datefrom),str(dateto))
					
					mf1 =  BufalloMilkCenter.objects.raw(buffcenter)
				messages.success(request,'Your details have been saved!')
				return render(request,'managebuffcenter.html',locals())
			else:
				return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Key field Duplicated:'+request.POST["routeCode"],)
		else:
			messages.success(request,'Your details have been saved!')
	#messages.info(request,'err')+9+
	return render (request,'managebuffcenter.html',locals())


def managebuffcenter1(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			cc = BufalloMilkCenter.objects.using(brch).all()
			minmaxbuff=MinMaxBuff.objects.using(brch).all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			datefrom4519 = request.session["date4519"]
			dateto4520 = request.session["date4520"]
			if request.session.has_key('name'):
				if request.method == "POST":
					#cc = CowMilkCategory.objects.all()
					#mm = MinMaxFat.objects.all()
					
					for index,j in enumerate(request.POST.getlist('centercode[]')):
						cc2= BufalloMilkCenter.objects.using(brch).filter(id=request.POST.getlist('id1[]')[index]).update(
							centercode = request.POST.getlist('centercode[]')[index],
							from_date = request.POST.getlist('fromdate[]')[index],
							to_date =request.POST.getlist('todate[]')[index],
							milk_type =request.POST.getlist('milktype[]')[index],
							rate_calculation  =request.POST.getlist('ratecalculation[]')[index],
							commission_type = request.POST.getlist('commtype[]')[index],
							fixed_value = float(request.POST.getlist('fixedvalue[]')[index]),
							)  
					for index,j in enumerate(request.POST.getlist('minfat1[]')):
						mf2 = MinMaxBuff.objects.using(brch).filter(id=request.POST.getlist('id[]')[index]).update(
							#from_date = request.POST.getlist('fromdate1[]')[index],
							#to_date = request.POST.getlist('todate1[]')[index],
							min_fat = request.POST.getlist('minfat1[]')[index],
							max_fat = request.POST.getlist('maxfat1[]')[index],
							min_SNF = request.POST.getlist('minsnf1[]')[index],
							max_SNF = request.POST.getlist('maxsnf1[]')[index],
							tsrate = request.POST.getlist('tsrate1[]')[index],
							) 
					for index,j in enumerate(request.POST.getlist('id1[]')):
						dateF1 = request.POST.getlist("id1[]")[index]
						#print(5.3)
						#cursor = connection.cursor()
						#print(1.47)
						#dataupdate = "update %s.school_minmaxfat mf ,%s.school_cowmilkcategory cr set mf.from_date = cr.from_date,mf.to_date = cr.to_date where cr.id = mf.category_id and cr.date_from between '%s' and '%s' and cr.to_date between '%s' and '%s' "%(str(brch),str(brch),str(datefrom3750),str(dateto3751),str(datefrom3750),str(dateto3751))
						#dataup = "update %s.school_minmaxfat mf ,%s.school_cowmilkcategory cr set mf.from_date = cr.from_date,mf.to_date = cr.to_date where cr.id = mf.category_id and cr.id = '%s' "%(str(brch),str(brch),str(dateF1))
						#print(dataup)
						#print(1.13)
						#cursor.execute(dataupdate)
						#print(dataupdate)
						#print(2.32)
						#print(dataup)
						cursor1=connection.cursor()
						datas="update %s.school_minmaxbuff mb ,%s.school_bufallomilkcenter br set mb.from_date = br.from_date,mb.to_date = br.to_date where br.id = mb.centercode_id and br.id = '%s' "%(str(brch),str(brch),str(dateF1))
						cursor1.execute(datas)
						print(datas)
					messages.success(request, 'Your details have been saved!')
					return render(request,'managebuffcenter.html',locals())
				else:
					return render(request,'index.html',locals())  
		else:
			cc = BufalloMilkCenter.objects.all()
			minmaxbuff=MinMaxBuff.objects.all()
			milk = Milktype.objects.all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)

			if request.session.has_key('name'):
				if request.method == "POST":
					#cc = CowMilkCategory.objects.all()
					#mm = MinMaxFat.objects.all()
					for index,j in enumerate(request.POST.getlist('id1[]')):
						dateF1 = request.POST.getlist("id1[]")[index]
						for index,j in enumerate(request.POST.getlist('centercode[]')):
							cc2= BufalloMilkCenter.objects.filter(id=request.POST.getlist('id1[]')[index]).update(
								centercode = request.POST.getlist('centercode[]')[index],
								from_date = request.POST.getlist('fromdate[]')[index],
								to_date =request.POST.getlist('todate[]')[index],
								milk_type =request.POST.getlist('milktype[]')[index],
								rate_calculation  =request.POST.getlist('ratecalculation[]')[index],
								commission_type = request.POST.getlist('commtype[]')[index],
								fixed_value = float(request.POST.getlist('fixedvalue[]')[index]),
								)  
					for index,j in enumerate(request.POST.getlist('id[]')):
						dateF1 = request.POST.getlist("id[]")[index]	
						for index,j in enumerate(request.POST.getlist('minfat1[]')):
					
							mf2 = MinMaxBuff.objects.filter(id=request.POST.getlist('id[]')[index]).update(
								from_date = request.POST.getlist('fromdate1[]')[index],
								to_date = request.POST.getlist('todate1[]')[index],
								min_fat = request.POST.getlist('minfat1[]')[index],
								max_fat = request.POST.getlist('maxfat1[]')[index],
								min_SNF = request.POST.getlist('minsnf1[]')[index],
								max_SNF = request.POST.getlist('maxsnf1[]')[index],
								tsrate = request.POST.getlist('tsrate1[]')[index],
								) 
					messages.success(request, 'Your details have been saved!')
					return render(request,'managebuffcenter.html',locals())
				else:
					return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'Key field Duplicated:'+request.POST["routeCode"],)
		else:
			messages.success(request,'Your details have been saved!')
	#messages.info(request,'err')+9+
	return render (request,'managebuffcenter.html',locals())



def milkform_view(request,id):
	if request.session.has_key('name'):
		milkrate = CowMilkRoute.objects.get(id=id)
		minmax_obj =  MinMaxFat.objects.filter(routecode_id = milkrate.id)
	# centerrate = CowMilkCenter.objects.get(id=id)
	# center_obj =  MinMaxFat.objects.filter(centercode_id = centerrate.id)
	# return HttpResponse(minmax_obj)
		return render(request,'milk-form-view.html',locals())
	else:
		return render(request,'index.html',locals())



def milkform_view(request,id):
	if request.session.has_key('name'):
		milkrate = CowMilkRoute.objects.get(id=id)
		minmax_obj =  MinMaxFat.objects.filter(routecode_id = milkrate.id)
		# centerrate = CowMilkCenter.objects.get(id=id)
		# center_obj =  MinMaxFat.objects.filter(centercode_id = centerrate.id)
		# return HttpResponse(minmax_obj)
		return render(request,'milk-form-view.html',locals())
	else:
		return render(request,'index.html',locals())



def conditionEdit(request,id):
	if request.session.has_key('name'):
		minmax_obj =  MinMaxFat.objects.filter(id = id)
		return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
	else:
		return render(request,'index.html',locals())


def conditionUpdate(request,id):
	if request.session.has_key('name'):
		if request.method == 'POST':     
			minmaxfat = MinMaxFat.objects.filter(id = id).update(
					min_fat = request.POST['min_fat'],
					max_fat = request.POST['max_fat'],
					min_SNF = request.POST['min_SNF'],
					max_SNF = request.POST['max_SNF'],
					tsrate = request.POST['rate'],
					commission = request.POST['commission'],
					)
		return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
	else:
		return render(request,'index.html',locals())

def checked_delete(request):
	if request.session.has_key('name'):
		if request.method == 'POST':
			del_inq = request.POST.getlist('check')
			# return HttpResponse(del_inq)
			for x in del_inq:
				minmax = MinMaxFat.objects.filter(id = x)
				minmax.delete()
		else:
			return HttpResponse("You don't have Permission to delete")
		return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
	else:
		return render(request,'index.html',locals())


def daily_trans(request):
	center = Center.objects.all()
	if request.session.has_key('name'):
		if request.method == "POST":
			# milkrate_form = Daily_trans.objects.create(
			# )
			for index,j in enumerate(request.POST.getlist('can[]')):
				minmaxfat = Daily_trans.objects.create(
					date = request.POST["date"],
					time = request.POST["time"],
					milk_type = request.POST["milktype"],
					centercode = request.POST["centercode"],
					can = request.POST.getlist('can[]')[index],
					qty = request.POST.getlist('qty[]')[index],
					fat = request.POST.getlist('fat[]')[index],
					snf = request.POST.getlist('snf[]')[index],
					clr = request.POST.getlist('clr[]')[index],
					)
		return render(request,'from-pay.html',locals())
	else:
		return render(request,'index.html',locals())
# Module -Masters #13-Ts Rates -cow milk - Saving cow-milk-center Values - cow-milk-center.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Charan
def cow_milk_center(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			center = Center.objects.using(brch).all()
			milk=Milktype.objects.all()
			if request.session.has_key('name'):
				if request.method == "POST":
					z = request.POST.get('snfdeduction')
					if z:
						snfdeduction = True
					else:
						snfdeduction = False
					premiumvalue = float(0.0)
					amountvalue = float(0.0)
					curdrate = float(0.0)
					minrate = float(0.0)
					sourmilk = float(0.0)
					fixed_value = float(0.0)
					min_fat = float(0.0)
					max_fat = float(0.0)
					min_SNF = float(0.0)
					max_SNF = float(0.0)
					rate = float(0.0)
					#commission = float(0.0)
					fat_from = float(0.0)
					fat_to = float(0.0)
					penalty_in_RS = float(0.0)
					premiumvalue = request.POST["premium"]
					amountvalue = request.POST["amount"]
					curdrate = request.POST["curd_rate"]
					minrate = request.POST["min_rate"]
					sourmilk = request.POST["sourmilk_rate"]
					fixed_value = request.POST["fixedvalue"]
					datefrom=request.POST["dateform"]
					dateto=request.POST["dateto"]
					centercode = request.POST["category_cow"]
					# min_fat = request.POST["min_fat"]
					# max_fat = request.POST["max_fat"]
					# min_SNF = request.POST["min_SNF"]
					# max_SNF = request.POST["max_SNF"]
					# rate = request.POST["rate"]
					# commission = request.POST["commission"]
					fat_from = request.POST["from_snf"]
					fat_to = request.POST["to_snf"]
					penalty_in_RS = request.POST["penalty_snf"]
					if premiumvalue == "" or premiumvalue == "0.0":
						premiumvalue = float(0.0)
					if amountvalue == "" or amountvalue == "0.0":
						amountvalue = float(0.0)
					if curdrate == "" or curdrate == "0.0":
						curdrate = float(0.0)
					if minrate == "" or minrate == "0.0":
						minrate = float(0.0)
					if sourmilk == "" or sourmilk == "0.0":
						sourmilk = float(0.0)
					if fixed_value == "" or fixed_value == "0.0":
						fixed_value = float(0.0)
					if min_fat == "" or min_fat == "0.0":
						min_fat = float(0.0)
					if max_fat == "" or max_fat == "0.0":
						max_fat = float(0.0)
					if min_SNF == "" or min_SNF == "0.0":
						min_SNF = float(0.0)
					if max_SNF == "" or max_SNF == "0.0":
						max_SNF = float(0.0)
					if rate == "" or rate == "0.0":
						rate = float(0.0)
					#if commission == "" or commission == "0.0":
						#commission = float(0.0)
					if fat_from == "" or fat_from == "0.0":
						fat_from = float(0.0)
					if fat_to == "" or fat_to == "0.0":
						fat_to = float(0.0)
					if penalty_in_RS == "" or penalty_in_RS == "0.0":
						penalty_in_RS = float(0.0)
					if CowMilkCenter.objects.using(brch).filter(from_date__range=[datefrom,dateto],centercode=centercode).exists():
						messages.info(request, "TS Rates already registsred for From Date")	
					elif CowMilkCenter.objects.using(brch).filter(to_date__range=[datefrom,dateto],centercode=centercode).exists():
						messages.info(request, "TS Rates already registsred for To Date")
					elif CowMilkCenter.objects.using(brch).filter(from_date__lte=datefrom, to_date__gte=dateto,centercode=centercode).exists():
						messages.info(request, "Alredy Date Range Exists")
					elif request.POST["dateform"]>=request.POST["dateto"] :
						messages.info(request,"From Date is Later than To Date")
					else:
						milkrate_form = CowMilkCenter.objects.using(brch).create(
							from_date = datefrom,
							to_date=dateto,
							centercode = request.POST["category_cow"],
							#from_date = request.POST["dateform"],
							#to_date = request.POST["dateto"],
							rate_calculation = request.POST["rate_calculation"],
							snf_value = request.POST["snfix_actual"],
							fixed_value = fixed_value,
							milk_type = request.POST["milk"],
							# min_fat = min_fat,
							# max_fat = max_fat,
							# min_SNF = min_SNF,
							# max_SNF = max_SNF,
							# tsrate = rate,
							# commission = commission,
							fat_from = fat_from,
							fat_to = fat_to,
							penalty_in_RS = penalty_in_RS,
							deduction_calculation = request.POST["ded_ltrkg"],
							premium = premiumvalue,
							amount = amountvalue,
							commission_type = request.POST["com_type"],
							sour_milk = request.POST["sour_ltrkg"],
							curd = curdrate,
							min_rate = minrate,
							sour_milkrate = sourmilk,
							snf_deduction = snfdeduction,
							)
						milkrate_form.save(using=brch)

						for index,j in enumerate(request.POST.getlist('min_fat[]')):
							if index != 0 :						
								minmaxfat = MinMaxFat.objects.using(brch).create(
									centercode_id = milkrate_form.id,
									from_date = request.POST["dateform"],
									to_date = request.POST["dateto"],
									min_fat = request.POST.getlist('min_fat[]')[index],
									max_fat = request.POST.getlist('max_fat[]')[index],
									min_SNF = request.POST.getlist('min_SNF[]')[index],
									max_SNF = request.POST.getlist('max_SNF[]')[index],
									# milk_type = request.POST.getlist('milk_type[]')[index],
									tsrate = request.POST.getlist('rate[]')[index],
									#commission = request.POST.getlist('commission[]')[index],
									)
								minmax_obj =  MinMaxFat.objects.using(brch).filter(centercode_id = milkrate_form.id)

							#milkrate_form.save()
						messages.success(request,'Your details have been saved!')
		else:
			center = Center.objects.all()
			milk=Milktype.objects.all()
			if request.session.has_key('name'):
				if request.method == "POST":
					z = request.POST.get('snfdeduction')
					if z:
						snfdeduction = True
					else:
						snfdeduction = False
					premiumvalue = float(0.0)
					amountvalue = float(0.0)
					curdrate = float(0.0)
					minrate = float(0.0)
					sourmilk = float(0.0)
					fixed_value = float(0.0)
					min_fat = float(0.0)
					max_fat = float(0.0)
					min_SNF = float(0.0)
					max_SNF = float(0.0)
					rate = float(0.0)
					#commission = float(0.0)
					fat_from = float(0.0)
					fat_to = float(0.0)
					penalty_in_RS = float(0.0)
					premiumvalue = request.POST["premium"]
					amountvalue = request.POST["amount"]
					curdrate = request.POST["curd_rate"]
					minrate = request.POST["min_rate"]
					sourmilk = request.POST["sourmilk_rate"]
					fixed_value = request.POST["fixedvalue"]
					datefrom=request.POST["dateform"]
					dateto=request.POST["dateto"]
					centercode = request.POST["category_cow"]
					# min_fat = request.POST["min_fat"]
					# max_fat = request.POST["max_fat"]
					# min_SNF = request.POST["min_SNF"]
					# max_SNF = request.POST["max_SNF"]
					# rate = request.POST["rate"]
					# commission = request.POST["commission"]
					fat_from = request.POST["from_snf"]
					fat_to = request.POST["to_snf"]
					penalty_in_RS = request.POST["penalty_snf"]
					if premiumvalue == "" or premiumvalue == "0.0":
						premiumvalue = float(0.0)
					if amountvalue == "" or amountvalue == "0.0":
						amountvalue = float(0.0)
					if curdrate == "" or curdrate == "0.0":
						curdrate = float(0.0)
					if minrate == "" or minrate == "0.0":
						minrate = float(0.0)
					if sourmilk == "" or sourmilk == "0.0":
						sourmilk = float(0.0)
					if fixed_value == "" or fixed_value == "0.0":
						fixed_value = float(0.0)
					if min_fat == "" or min_fat == "0.0":
						min_fat = float(0.0)
					if max_fat == "" or max_fat == "0.0":
						max_fat = float(0.0)
					if min_SNF == "" or min_SNF == "0.0":
						min_SNF = float(0.0)
					if max_SNF == "" or max_SNF == "0.0":
						max_SNF = float(0.0)
					if rate == "" or rate == "0.0":
						rate = float(0.0)
					#if commission == "" or commission == "0.0":
						#commission = float(0.0)
					if fat_from == "" or fat_from == "0.0":
						fat_from = float(0.0)
					if fat_to == "" or fat_to == "0.0":
						fat_to = float(0.0)
					if penalty_in_RS == "" or penalty_in_RS == "0.0":
						penalty_in_RS = float(0.0)
					if CowMilkCenter.objects.filter(from_date__range=[datefrom,dateto],centercode=centercode).exists():
						messages.info(request, "TS Rates already registsred for From Date")	
					elif CowMilkCenter.objects.filter(to_date__range=[datefrom,dateto],centercode=centercode).exists():
						messages.info(request, "TS Rates already registsred for To Date")
					elif CowMilkCenter.objects.filter(from_date_lte=datefrom, to_date_gte=dateto,centercode=centercode).exists():
						messages.info(request, "Alredy Date Range Exists")
					elif request.POST["dateform"]>=request.POST["dateto"] :
						messages.info(request,"From Date is Later than To Date")
					else:
						milkrate_form = CowMilkCenter.objects.create(
							from_date = datefrom,
							to_date=dateto,
							centercode = request.POST["category_cow"],
							#from_date = request.POST["dateform"],
							#to_date = request.POST["dateto"],
							rate_calculation = request.POST["rate_calculation"],
							snf_value = request.POST["snfix_actual"],
							fixed_value = fixed_value,
							milk_type = request.POST["milk"],
							# min_fat = min_fat,
							# max_fat = max_fat,
							# min_SNF = min_SNF,
							# max_SNF = max_SNF,
							# tsrate = rate,
							# commission = commission,
							fat_from = fat_from,
							fat_to = fat_to,
							penalty_in_RS = penalty_in_RS,
							deduction_calculation = request.POST["ded_ltrkg"],
							premium = premiumvalue,
							amount = amountvalue,
							commission_type = request.POST["com_type"],
							sour_milk = request.POST["sour_ltrkg"],
							curd = curdrate,
							min_rate = minrate,
							sour_milkrate = sourmilk,
							snf_deduction = snfdeduction,
							)
						milkrate_form.save()

						for index,j in enumerate(request.POST.getlist('min_fat[]')):
							if index != 0 :						
								minmaxfat = MinMaxFat.objects.create(
									centercode_id = milkrate_form.id,
									from_date = request.POST["dateform"],
									to_date = request.POST["dateto"],
									min_fat = request.POST.getlist('min_fat[]')[index],
									max_fat = request.POST.getlist('max_fat[]')[index],
									min_SNF = request.POST.getlist('min_SNF[]')[index],
									max_SNF = request.POST.getlist('max_SNF[]')[index],
									# milk_type = request.POST.getlist('milk_type[]')[index],
									tsrate = request.POST.getlist('rate[]')[index],
									#commission = request.POST.getlist('commission[]')[index],
									)
								minmax_obj =  MinMaxFat.objects.filter(centercode_id = milkrate_form.id)

							#milkrate_form.save()
						messages.success(request,'Your details have been saved!')
				return render(request,'cow-milk-center.html',locals())
			else:
				return render(request,'index.html',locals())
	except Exception as err:
		if search("1062",str(err)):
			messages.error(request,'CowMilkCenter Duplicated:'+request.POST["name"])
		else:		
			messages.success(request,'Invalid Data Entry')
	return render(request,'cow-milk-center.html',locals())	


# def cowmilkviewcenter(request,id):
#     centerrate = CowMilkCenter.objects.get(id=id)
#     center_obj =  MinMaxFat.objects.filter(centercode_id = centerrate.id)
#     return render(request,'cowmilk-center-view.html',locals())

# Module -Masters #13-Ts Rates -cow milk - Saving cow-milk-category Values - cow-milk-category.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Charan
def milk_rate(request):
	category = Category.objects.all()
	if request.session.has_key('name'):
		if request.method == "POST":
			z = request.POST.get('snfdeduction')
			if z:
				snfdeduction = True
			else:
				snfdeduction = False
			milkrate_form = CowMilkCategory.objects.create(
				category = request.POST["category_cow"],
				from_date = request.POST["dateform"],
				to_date = request.POST["dateto"],
				rate_calculation = request.POST["rate_calculation"],
				snf_value = request.POST["snfix_actual"],
				fixed_value = request.POST["fixedvalue"],
				min_fat = request.POST["min_fat"],
				max_fat = request.POST["max_fat"],
				min_SNF = request.POST["min_SNF"],
				max_SNF = request.POST["max_SNF"],
				rate = request.POST["rate"],
				commission = request.POST["commission"],
				fat_from = request.POST["from_snf"],
				fat_to = request.POST["to_snf"],
				penalty_in_RS = request.POST["penalty_snf"],
				deduction_calculation = request.POST["ded_ltrkg"],
				premium = request.POST["premium"],
				amount = request.POST["amount"],
				commission_type = request.POST["com_type"],
				sour_milk = request.POST["sour_ltrkg"],
				curd = request.POST["curd_rate"],
				min_rate = request.POST["min_rate"],
				sour_milkrate = request.POST["sourmilk_rate"],
				snf_deduction = snfdeduction,
				)
			milkrate_form.save()
			messages.success(request, 'Your details have been saved!')
		return render(request,'milk.html',locals())
	else:
		return render(request,'index.html',locals())


def transaction_form(request):
	center = Center.objects.all()
	cowmilkrate = CowMilkRoute.objects.all()
	if request.session.has_key('name'):
		if request.method == "POST":
			x = request.POST["dateform"]
			cowmilkrate = CowMilkRoute.objects.get(Routecode = request.POST["centercode"])
			rate =  MinMaxFat.objects.get(routecode_id = cowmilkrate.id)
			return HttpResponseRedirect('/transaction/'+str(rate.id)+'/'+str(x)+'/')
		return render(request,'transcation.html',locals()) 
	else:
		return render(request,'index.html',locals())


def transaction(request,id,slug):
	center = Center.objects.all()
	today = date.today()
	rate = MinMaxFat.objects.get(id=id)
	cowmilkrate = CowMilkRoute.objects.all()
	# return HttpResponse(rate.routecode)
	if request.session.has_key('name'):
		if request.method == "POST":
			transaction_form = Transcation.objects.create(
				date = slug,
				time = request.POST["time"],
				good_sour = request.POST["goodsour"],
				centre_code = request.POST["centercode"],
				milk_type = request.POST["milktype"],
				can = request.POST["can"],
				qty = request.POST["qty"],
				# exp = request.POST["exp"],
				rate = request.POST["rate"],
				fat = 0.0,
				# cartage = request.POST["cartage"],
				# pen = request.POST["pen"],
				exp = 0.0,
				cartage = 0.0,
				pen = 0.0,
				clr = 0.0,
				amount = request.POST["amount"],
				total_amount = 0.0,
				snf = request.POST["snf"],
				)
			transaction_form.save()
			messages.success(request, 'Your details have been saved!')
		return render(request,'transcation_details.html',locals()) 
	else:
		return render(request,'index.html',locals())
# Module -Transaction #1 - Dok entry Data Saving- doc_entry.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Charan
def dockentry_form(request):
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				center = Center.objects.using(brch).all()
				branch=Branch.objects.all()
			
				if request.method == "POST":
					for index,j in enumerate(request.POST.getlist('code[]')):
						minmaxfat = DoK_Create.objects.using(brch).create(
							branch =brch,
							date = request.POST["dateform"],
							sour = request.POST["goodsour"],
							shift = request.POST["time"],
							routecode = request.POST["route"],
							code = request.POST.getlist('code[]')[index],
							samplecode = request.POST.getlist('samplecode[]')[index],
							milk_type = request.POST.getlist('milktype[]')[index],
							Quantity = request.POST.getlist('qty[]')[index],
							cans = request.POST.getlist('can[]')[index],
							
							branch1 =brch,
							date1 = request.POST["dateform"],
							sour1 = request.POST["goodsour"],
							shift1 = request.POST["time"],
							routecode1 = request.POST["route"],
							code1 = request.POST.getlist('code[]')[index],
							samplecode1 = request.POST.getlist('samplecode[]')[index],
							milk_type1 = request.POST.getlist('milktype[]')[index],
							Quantity1 = request.POST.getlist('qty[]')[index],
							cans1 = request.POST.getlist('can[]')[index],
							createddd_by=request.user,
							create=datetime.datetime.now(),
							)
				
						minmaxfat = DoK_Entry.objects.using(brch).create(
							branch =brch,
							date = request.POST["dateform"],
							sour = request.POST["goodsour"],
							shift = request.POST["time"],
							routecode = request.POST["route"],
							code = request.POST.getlist('code[]')[index],
							samplecode = request.POST.getlist('samplecode[]')[index],
							milk_type = request.POST.getlist('milktype[]')[index],
							Quantity = request.POST.getlist('qty[]')[index],
							cans = request.POST.getlist('can[]')[index],
							
							)
					messages.success(request, 'Your details have been saved!')
			return render(request,'doc_entry.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:

		messages.error(request,err)
		return render(request,'doc_entry.html',locals())
# Module -Transaction #1 - managing the Dok values- dok_manage.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Charan
def manage_dok(request):  
	try: 
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				if request.method == "POST":
					date1 = request.POST["date"]
					shift1 = request.POST["shift"]
					
					dc = DoK_Entry.objects.using(brch).filter(date=date1,shift=shift1)
					

			return render(request,'dok_manage.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:

		messages.error(request,err)
		return render(request,'dok_manage.html',locals())



# Module -Transaction #1 - managing  and saving the Dok values- dok_manage.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Charan
def csv_dok_entry(request):
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				if request.method == "POST":

					dateH = request.POST["date_t2"]
					shiftH = request.POST["shift_t2"]
					for index,j in enumerate(request.POST.getlist('samplecode[]')):
						minmaxfat = DoK_Entry.objects.using(brch).filter(id=request.POST.getlist("dcid1[]")[index]).update( 
							branch =brch,
							date = request.POST.getlist("sdate1[]")[index],
							sour = request.POST["sour"],
							shift = request.POST.getlist("shift1[]")[index],
							routecode = request.POST.getlist("route[]")[index],
							code = request.POST.getlist('code[]')[index],
							samplecode = request.POST.getlist('samplecode[]')[index],
							milk_type = request.POST.getlist('milk_type[]')[index],
							Quantity = request.POST.getlist('qty[]')[index],
							cans = request.POST.getlist('can[]')[index],
							remove= request.POST.getlist('remove[]')[index],
							)
			
						minmaxfat = DoK_Create.objects.using(brch).filter(id=request.POST.getlist("dcid1[]")[index]).update( 
							branch1 =brch,
							date1 = request.POST.getlist("sdate1[]")[index],
							sour1 = request.POST["sour"],
							shift1 = request.POST.getlist("shift1[]")[index],
							routecode1 = request.POST.getlist("route[]")[index],
							code1 = request.POST.getlist('code[]')[index],
							samplecode1 = request.POST.getlist('samplecode[]')[index],
							milk_type1 = request.POST.getlist('milk_type[]')[index],
							Quantity1 = request.POST.getlist('qty[]')[index],
							cans1 = request.POST.getlist('can[]')[index],
							remove1= request.POST.getlist('remove[]')[index],
							up_by=request.user,
							updated=datetime.datetime.now(),
							)
						
					   
					messages.success(request, 'Your details have been saved!')

						
					   
				   
					data = DoK_Entry.objects.using(brch).filter(date=dateH,shift=shiftH,remove='Y').delete()


					return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'dok_manage.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:

		messages.error(request,err)
	return render(request,'dok_manage.html',locals())




# Module -Transaction #2 - saving the QC_form values- qcentry.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Charan
def qc_form(request):
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				center = Center.objects.using(brch).all()
				branch=Branch.objects.all()
			
				if request.method == "POST":
					for index,j in enumerate(request.POST.getlist('samplecode[]')):
						minmaxfat = QC_Create.objects.using(brch).create(
							branch =brch,
							date = request.POST["date"],
							shift = request.POST["shift"],
							samplecode = request.POST.getlist('samplecode[]')[index],
							fat = request.POST.getlist('fat[]')[index],
							clr = request.POST.getlist('clr[]')[index],
							snf = round(float(request.POST.getlist('snf[]')[index]),2),
							branch1 =brch,
							date1 = request.POST["date"],
							shift1 = request.POST["shift"],
							samplecode1 = request.POST.getlist('samplecode[]')[index],
							fat1 = request.POST.getlist('fat[]')[index],
							clr1 = request.POST.getlist('clr[]')[index],
							snf1 = request.POST.getlist('snf[]')[index],
							created_by=request.user,
							crreatedd=datetime.datetime.now(),
							)
				
						minmaxfat = QC_Entry.objects.using(brch).create(
							branch =brch,
							date = request.POST["date"],
							shift = request.POST["shift"],
							samplecode = request.POST.getlist('samplecode[]')[index],
							fat = request.POST.getlist('fat[]')[index],
							clr = request.POST.getlist('clr[]')[index],
							snf = round(float(request.POST.getlist('snf[]')[index]),2),
							
							)
						
					messages.success(request, 'Your details have been saved!')
			return render(request,'qcentry.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:

		messages.error(request,err)
		return render(request,'qcentry.html',locals())

# Module -Transaction #2 - managing the QC_form values- qc_manage.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Charan
def manage_qc(request):  
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				if request.method == "POST":
					date1 = request.POST["date"]
					shift1 = request.POST["shift"]
					
					qc = QC_Entry.objects.using(brch).filter(date=date1,shift=shift1)
					

			
				

			return render(request,'qc_manage.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:

		messages.error(request,err)
		return render(request,'qc_manage.html',locals())


# Module -Transaction #2 -  managing and saving the QC_form values- qc_manage.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Charan
def csv_qc_entry(request):
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				if request.method == "POST":

					dateH = request.POST["date_t2"]
					shiftH = request.POST["shift_t2"]
					for index,j in enumerate(request.POST.getlist('samplecode[]')):
						minmaxfat = QC_Entry.objects.using(brch).filter(id=request.POST.getlist("qcid1[]")[index]).update( 
							branch =brch,
							date = request.POST.getlist("sdate1[]")[index],
							shift = request.POST.getlist("shift1[]")[index],
							samplecode = request.POST.getlist('samplecode[]')[index],
							fat = request.POST.getlist('fat[]')[index],
							clr = request.POST.getlist('clr[]')[index],
							snf = round(float(request.POST.getlist('snf[]')[index]),2),
							remove= request.POST.getlist('remove[]')[index],
							)
		
						minmaxfat = QC_Create.objects.using(brch).filter(id=request.POST.getlist("qcid1[]")[index]).update( 
							branch1 =brch,
							date1 = request.POST.getlist("sdate1[]")[index],
							shift1 = request.POST.getlist("shift1[]")[index],
							samplecode1 = request.POST.getlist('samplecode[]')[index],
							fat1 = request.POST.getlist('fat[]')[index],
							clr1 = request.POST.getlist('clr[]')[index],
							snf1 = request.POST.getlist('snf[]')[index],
							remove1= request.POST.getlist('remove[]')[index],
							updatedd=datetime.datetime.now(),
							upt_by=request.user,
							)
						
					   
					messages.success(request, 'Your details have been saved!')

						
					   
				   
					data = QC_Entry.objects.using(brch).filter(date=dateH,shift=shiftH,remove='Y').delete()


					return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'qc_manage.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:

		messages.error(request,err)
		return render(request,'qc_manage.html',locals())



# Module -Transaction #3 - Getting Match Data values- match.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Charan
def match_data(request):  
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				if request.method == "POST":
					date1 = request.POST["date"]
					shift1 = request.POST["shift"]
					#dc1 = DoK_Entry.objects.filter(date=date1,shift=shift1,remove='Y').delete()
					#qc1 = QC_Entry.objects.filter(date=date1,shift=shift1,remove='Y').delete()
					dc = DoK_Entry.objects.using(brch).filter(date=date1,shift=shift1)
					qc = QC_Entry.objects.using(brch).filter(date=date1,shift=shift1)


					# dd = Daily_data.objects.get(date__range = [date],shift_loc__range = [shift_loc], centercode= centercode)
				# if request.method == "POST":
				#     date = request.POST["date"]
				#     shift_loc = request.POST["shift"]
				#     dc = DoK_Entry.objects.filter(date=date,shift=shift_loc)
				#     qc = QC_Entry.objects.filter(date=date,shift=shift_loc)      
				#     if request.method == "GET":
				#         daily = Dailyproc.objects.create(
				#             sampleno = request.POST["samplecode"],
				#             branch = request.POST["branch"],
				#             date = date,
				#             shift_loc = shift_loc,
				#             centercode = request.POST.get["code"],
				#             milk_type = request.POST["milk_type"],
				#             quantity = request.POST["Quantity"],
				#             can = request.POST["cans"],
				#             fat = request.POST["fat"],
				#             snf = request.POST["snf"],
				#             clr = request.POST["clr"],
				#             sampleno2=request.POST["smpno2"]
				#             )
				#Karthik...later we have to open this...to enable saving...lets do step by step ok
				#         daily.save()
						# tsrate = request.POST["tsrate"],
						# ltrrate = request.POST["ltrrate"],
						# comm = request.POST["exp"],
						# pni = request.POST["rate"],
						# amount = request.POST["rate"]
					
			return render(request,'match.html',locals())
			messages.success(request, 'Your details have been saved!')
		else:
			return render(request,'index.html',locals())
	except Exception as err:

		messages.error(request,err)
	return render(request,'match.html',locals())

# import pandas as pd
# import os
# Module -Transaction #3 - Match Data Saving- match.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Karthik

def logfile(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		bc=DoK_Create.objects.using(brch).all()
		cc=QC_Create.objects.using(brch).all()
		bb=Daily_dataa.objects.using(brch).all()
		dd=Matchlog.objects.using(brch).all()
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			selecting = request.POST["report"]

			cursor1=connection.cursor()
			datas="delete from %s.school_logfile"%(str(brch))
			cursor1.execute(datas)
			cursor2=connection.cursor()
			cursor3=connection.cursor()
			cursor4=connection.cursor()
			data="insert into %s.school_logfile(date,shift,code,Quantity,cans,crreateddd_by,crreatedddd,Quantity1,cans1,uppdated_by,upppdated) select D.date,D.shift,D.code,D.Quantity,D.cans,D.createddd_by_id,D.create,D.Quantity1,D.cans1,D.up_by_id,D.updated from %s.school_dok_create D where   D.Quantity1!=D.Quantity or D.cans1 !=D.cans and date between '%s' and '%s'"%(str(brch),str(brch),str(datefrom),str(dateto))
			bc="update %s.school_logfile L,auth_user U set L.crreateddd_by = U.username where L.crreateddd_by = U.id "%(str(brch))
			cb="update %s.school_logfile L,auth_user U set L.uppdated_by = U.username where  L.uppdated_by = U.id"%(str(brch))
			print(data)
			print(bc)
			print(cb)
			cursor2.execute(data)
			cursor3.execute(bc)
			cursor4.execute(cb)

			cursor5=connection.cursor()
			dataas="delete from %s.school_logfilee"%(str(brch))
			cursor5.execute(dataas)
			cursor6=connection.cursor()
			cursor7=connection.cursor()
			cursor8=connection.cursor()
			dataa="insert into %s.school_logfilee(date,shift,fat,clr,snf,ccreated_by,ccrreatedd,fat1,clr1,snf1,uupdaated_by,uupdatedd) select D.date,D.shift,D.fat,D.clr,D.snf,D.created_by_id,D.crreatedd,D.fat1,D.clr1,D.snf1,D.upt_by_id,D.updatedd from %s.school_qc_create D where   D.fat1!=D.fat or D.clr1!=D.clr  and date between '%s' and '%s'"%(str(brch),str(brch),str(datefrom),str(dateto))
			bcc="update %s.school_logfilee L,auth_user U set L.ccreated_by = U.username where L.ccreated_by = U.id "%(str(brch))
			ccb="update %s.school_logfilee L,auth_user U set L.uupdaated_by = U.username where  L.uupdaated_by = U.id"%(str(brch))
			print(dataa)
			cursor6.execute(dataa)
			cursor7.execute(bcc)
			cursor8.execute(ccb)


			cursor9=connection.cursor()
			dataaas="delete from %s.school_logfileee"%(str(brch))
			cursor9.execute(dataaas)
			cursor10=connection.cursor()
			cursor11=connection.cursor()
			cursor12=connection.cursor()
			dataaa="insert into %s.school_logfileee(date,shift,centercode,milk_type,qty,can,fat,clr,snf,crea_by,crb,qty1,can1,fat1,clr1,snf1,updatedd_by,updateddd) select D.date,D.shift,D.centercode,D.milk_type,D.qty,D.can,D.fat,D.clr,D.snf,D.crea_by_id,D.crb,D.qty1,D.can1,D.fat1,D.clr1,D.snf1,D.updatedd_by_id,D.updateddd from %s.school_daily_dataa D where  D.qty1!=D.qty or D.can1!=D.can or D.fat1!=D.fat or D.clr1!=D.clr  and date between '%s' and '%s'"%(str(brch),str(brch),str(datefrom),str(dateto))
			bcbc="update %s.school_logfileee L,auth_user U set L.crea_by = U.username where L.crea_by = U.id "%(str(brch))
			cbcb="update %s.school_logfileee L,auth_user U set L.updatedd_by = U.username where  L.updatedd_by = U.id"%(str(brch))
			print(dataaa)
			cursor10.execute(dataaa)
			cursor11.execute(bcbc)
			cursor12.execute(cbcb)



			cursor13=connection.cursor()
			dataaaas="delete from %s.school_loogfileee"%(str(brch))
			cursor13.execute(dataaaas)
			cursor14=connection.cursor()
			cursor15=connection.cursor()
			cursor16=connection.cursor()
			daataaa="insert into %s.school_loogfileee(date,shift,centercode,milk_type,qty,can,fat,clr,snf,ltrrate,net,pel,amount,crrea_by,crb,qty1,can1,fat1,clr1,snf1,ltrrate1,net1,pel1,amount1,csv_file,uppdatedd_by,updateddd) select D.date,D.shift,D.centercode,D.milk_type,D.qty,D.can,D.fat,D.clr,D.snf,D.ltrrate,D.net,D.pel,D.amount,D.crrea_by_id,D.crbb,D.qty1,D.can1,D.fat1,D.clr1,D.snf1,D.ltrrate1,D.net1,D.pel1,D.amount1,D.csv_file,D.updar_by_id,D.updar from %s.school_Daily_dataaa D where  D.qty1!=D.qty or D.fat1!=D.fat  and date between '%s' and '%s'"%(str(brch),str(brch),str(datefrom),str(dateto))
			bbcbc="update %s.school_loogfileee L,auth_user U set L.crrea_by = U.username where L.crrea_by = U.id "%(str(brch))
			ccbcb="update %s.school_loogfileee L,auth_user U set L.uppdatedd_by = U.username where  L.uppdatedd_by = U.id"%(str(brch))
			print(daataaa)
			cursor14.execute(daataaa)
			cursor15.execute(bbcbc)
			cursor16.execute(ccbcb)




			cursor20=connection.cursor()
			dddataaaas="delete from school_Branchlog"
			cursor20.execute(dddataaaas)
			cursor21=connection.cursor()
			cursor22=connection.cursor()
			cursor23=connection.cursor()
			ddaataaa="insert into school_Branchlog(code,name,address,pin,contno,email,creaated_by,crreaatedd,code1,name1,address1,pin1,contno1,email1,uppt_by,updaatedd) select D.code,D.name,D.address,D.pin,D.contno,D.email,D.creaated_by_id,D.crreaatedd,D.code,D.name1,D.address1,D.pin1,D.contno1,D.email1,D.uppt_by_id,D.updaatedd from school_Branch1 D where D.code1!=D.code or  D.name1!=D.name or D.address1!=D.address or D.pin1!=D.pin or D.contno1!= D.contno or  D.email1!= D.email"
			bbc="update school_Branchlog L,auth_user U set L.creaated_by = U.username where L.creaated_by = U.id "
			cbb="update school_Branchlog L,auth_user U set L.uppt_by = U.username where  L.uppt_by = U.id"
			print(daataaa)
			cursor21.execute(ddaataaa)
			cursor22.execute(bbc)
			cursor23.execute(cbb)





			cursor24=connection.cursor()
			daaaaatas="delete from %s.school_Logmatch"%(str(brch))
			cursor24.execute(daaaaatas)
			cursor25=connection.cursor()
			cursor26=connection.cursor()
			daaaaaata="insert into %s.school_Logmatch(date,shift,code,milk_type,qty,can,fat,clr,snf,milk_type1,code1,qty1,can1,fat1,clr1,snf1,hcreated_by,hupdatedd) select D.date,D.shift,D.code,D.milk_type,D.qty,D.can,D.fat,D.clr,D.snf,D.milk_type1,D.code1,D.qty1,D.can1,D.fat1,D.clr1,D.snf1,D.hcreated_by_id,D.hupdatedd from %s.school_Matchlog D where D.qty1!=D.qty or  D.can1!=D.can or D.fat1!=D.fat or D.clr1!=D.clr or D.snf1!= D.snf and date between '%s' and '%s'"%(str(brch),str(brch),str(datefrom),str(dateto))
			db="update %s.school_Logmatch L,auth_user U set L.hcreated_by = U.username where L.hcreated_by = U.id "%(str(brch))
			print(daaaaaata)
			cursor25.execute(daaaaaata)
			cursor26.execute(db)




			if selecting == 'dok':
				dok= Logfile.objects.using(brch).all()
			elif selecting == 'qcc':
				qcc=Logfilee.objects.using(brch).all()
			elif selecting == 'mat':
				mat=Logmatch.objects.using(brch).all()
			elif selecting == 'upr':
				upr=Logfileee.objects.using(brch).all()
			elif selecting == 'kp':
				kp=Loogfileee.objects.using(brch).all()
			else :
				bl=Branchlog.objects.all()

			#cursor2=connection.cursor()
			#data="insert into school_logfile(uppdated_by) select U.username from auth_user U,school_dok_create D where  U.id=D.createddd_by_id and D.Quantity1!='null' and D.cans1!='null' and D.Quantity1!=D.Quantity and D.cans1 !=D.cans"
			#cursor2.execute(data)
			
		return render(request,'logreport.html',locals())



def logreportexcel(request,slug):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		kp=Loogfileee.objects.using(brch).all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.session.has_key('name'):
			cente = Loogfileee.objects.using(brch).filter(centercode = slug)
		#return HttpResponseRedirect("/centerreportdetails/"+slug+"/")
		
		return render(request,'logreportexcel.html',locals())




def csv_data_model(request):
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				if request.method == "POST":

					dateH = request.POST["date_t2"]
					shiftH = request.POST["shift_t2"]
					z = request.POST.get('active')
					if z:
						active = True
					else:
						active = False
					

					#dc = DoK_Entry.objects.filter(date=date,shift=shift_loc)
					#qc = QC_Entry.objects.filter(date=date,shift=shift_loc)
					dcount = DoK_Entry.objects.using(brch).filter(date=dateH,shift=shiftH).count()
					qcount = QC_Entry.objects.using(brch).filter(date=dateH,shift=shiftH).count()

					if dcount != qcount :
						messages.info(request, "Match the data , Columns didn't match")
					else:


						for index,j in enumerate(request.POST.getlist('code[]')):
							#dailydata=DoK_Entry.objects.filter(request.POST.getlist("dcid[]")[index]==checked)
							#dailyata=QC_Entry.objects.filter()
							dailydata=Daily_data.objects.using(brch).create(
								
								date = request.POST.getlist("sdate1[]")[index],
								shift = request.POST.getlist("shift1[]")[index],                
								branch=request.POST["branch11"],
								routecode = request.POST.getlist("route[]")[index],
								sampno=request.POST.getlist("samplecode[]")[index],
								sampno2=request.POST.getlist("samplecode1[]")[index],                
								milk_type = request.POST.getlist("milk_type[]")[index],
								centercode = request.POST.getlist("code[]")[index],
								can = request.POST.getlist('cans[]')[index],
								qty = request.POST.getlist('Quantity[]')[index],
								ltrs= round((float(request.POST.getlist('Quantity[]')[index])/1.03),3),
								fat =round(( float(request.POST.getlist('fat[]')[index])),3),
								snf = round((float(request.POST.getlist('snf[]')[index])),3),
								  
								clr = round((float(request.POST.getlist('clr[]')[index])),3),
								#active = request.POST.getlist('dcchecked[]')[index]              
								)
							dailydata=Matchlog.objects.using(brch).create(
								
								date = request.POST.getlist("sdate1[]")[index],
								shift = request.POST.getlist("shift1[]")[index],                
								
								  
								milk_type = request.POST.getlist("milk_type2[]")[index],
								code = request.POST.getlist("code2[]")[index],
								can = request.POST.getlist('cans2[]')[index],
								qty = request.POST.getlist('Quantity2[]')[index],
								fat =round(( float(request.POST.getlist('fat2[]')[index])),3),
								snf = round((float(request.POST.getlist('snf2[]')[index])),3),
								  
								clr = round((float(request.POST.getlist('clr2[]')[index])),3),
											 
								milk_type1 = request.POST.getlist("milk_type[]")[index],
								code1 = request.POST.getlist("code[]")[index],
								can1 = request.POST.getlist('cans[]')[index],
								qty1 = request.POST.getlist('Quantity[]')[index],
								fat1 =round(( float(request.POST.getlist('fat[]')[index])),3),
								snf1 = round((float(request.POST.getlist('snf[]')[index])),3),
								  
								clr1 = round((float(request.POST.getlist('clr[]')[index])),3),
								hcreated_by=request.user,
								hupdatedd=datetime.datetime.now(),

								#active = request.POST.getlist('dcchecked[]')[index]              
								)
							dailydata=Daily_dataa.objects.using(brch).create(
							
								date = request.POST.getlist("sdate1[]")[index],
								shift = request.POST.getlist("shift1[]")[index],                
								branch=request.POST["branch11"],
								routecode = request.POST.getlist("route[]")[index],
								sampno=request.POST.getlist("samplecode[]")[index],
								sampno2=request.POST.getlist("samplecode1[]")[index],                
								milk_type = request.POST.getlist("milk_type[]")[index],
								centercode = request.POST.getlist("code[]")[index],
								can = request.POST.getlist('cans[]')[index],
								qty = request.POST.getlist('Quantity[]')[index],
								ltrs= round((float(request.POST.getlist('Quantity[]')[index])/1.03),3),
								fat =round(( float(request.POST.getlist('fat[]')[index])),3),
								snf = round((float(request.POST.getlist('snf[]')[index])),3),
								  
								clr = round((float(request.POST.getlist('clr[]')[index])),3),
								milk_type1 = request.POST.getlist("milk_type[]")[index],
								centercode1 = request.POST.getlist("code[]")[index],
								#branch=request.POST["branch"],
								can1 = request.POST.getlist('cans[]')[index],
								#qty = float(request.POST.getlist('qty[]')[index])+float(AkgsH),
							   # ltrs=  request.POST.getlist('Quantity[]/1.03')[index],
								qty1 = request.POST.getlist('Quantity[]')[index],
								fat1 =round(( float(request.POST.getlist('fat[]')[index])),3),
								snf1 = round((float(request.POST.getlist('snf[]')[index])),3),
								clr1 = round((float(request.POST.getlist('clr[]')[index])),3),
								#tsrate1 = round((float(request.POST.getlist('tsrate[]')[index])),3),
								#ltrrate1 = round((float(request.POST.getlist('ltrrate[]')[index])),3),
								#comm1 = round((float(request.POST.getlist('comm[]')[index])),3),
								#pel1 = round((float(request.POST.getlist('pel[]')[index])),3),
								#amount1 = round((float(request.POST.getlist('amount[]')[index])),5),
								#net1 = round((float(request.POST.getlist('netamount[]')[index] )) ,5),  
								
								crea_by=request.user,
								crb=datetime.datetime.now(),
								#active = request.POST.getlist('dcchecked[]')[index]              
								)
					   
												#ltrs=qty/1.03;
						   
							dailydata.save()
						

						
						try :
							cursor1 = connection.cursor()    
							milkltr1 = "update %s.school_daily_data set  ltrs = round(ltrs,3) where date = '%s' and shift = '%s' "  %(str(brch),str(dateH), str(shiftH))
							print(milkltr1)
							cursor1.execute(milkltr1)

							#cursor.execute(updatequery)
							#ratequery3 = cursor.fetchall()
									  
							#for row in ratequery3:
							#id=row[0]
							#cursor2 = connection.cursor()
							# Start comments TSRate update by Route and center Commented dtd 07April2021
							#updateCmTsCenter = "select dd.id,mf.tsrate,dd.fat,dd.snf,mf.min_fat,mf.max_fat,mf.min_snf, mf.max_snf from %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkcenter cr where dd.centercode = cr.centercode and mf.centercode_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and dd.date = '%s' and dd.shift = '%s' "  %(str(brch),str(brch),str(brch),str(dateH), str(shiftH)) 
							#print("updateCmTsCenter = ", updateCmTsCenter)
							#update4mCmTsCenter = "update %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkcenter cr set dd.tsrate = mf.tsrate  where dd.centercode = cr.centercode and mf.centercode_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and dd.date between '%s' and '%s' " %(str(brch),str(brch),str(brch),str(dateH),str(dateH))
							#print("update4mCmTsCenter = ", update4mCmTsCenter)
							#cursor2.execute(update4mCmTsCenter)
							#cursor3 = connection.cursor()
							#updateCmTsRoute = "select dd.id,mf.tsrate from %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkroute cr,%s.school_center cm where dd.centercode = cm.centre_code and mf.routecode_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and cm.centre_code =centercode and dd.date = '%s' and dd.shift = '%s' "  %(str(brch),str(brch),str(brch),str(brch),str(dateH), str(shiftH))
							#print(updateCmTsRoute)
							#update4mCmTsRoute = "update school_daily_data dd,school_minmaxfat mf,school_cowmilkroute cr,school_center cm set dd.tsrate = mf.tsrate , dd.comm= mf.commission where dd.tsrate = 0 and dd.centercode = cm.centre_code and mf.routecode_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and cm.centre_code =centercode and dd.date between '%s' and '%s' " %(str(datefrom),str(dateto))
							#update4mCmTsRoute = "update %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkroute cr,%s.school_center cm set dd.tsrate = mf.tsrate  where dd.tsrate = 0 and dd.centercode = cm.centre_code and mf.routecode_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and cm.centre_code =centercode and dd.date = '%s' and dd.shift = '%s' "  %(str(brch),str(brch),str(brch),str(brch),str(dateH), str(shiftH))
							#print(update4mCmTsRoute)
							#MariaDB [demo3]>   select dd.id,mf.tsrate,mf.commission,dd.fat,dd.snf,mf.min_fat,mf.max_fat,mf.min_snf, mf.max_snf from school_daily_data dd,school_minmaxfat mf,school_cowmilkcenter cr where dd.centercode = cr.centercode and mf.centercode_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date;
							#cursor3.execute(update4mCmTsRoute)
							# End Comment dtd 07April2021
							cursor4 = connection.cursor()
							updateCmTsCatgry = "select dd.id,mf.tsrate,dd.fat,dd.snf,mf.min_fat, mf.max_fat, mf.min_snf, mf.max_snf from %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkcategory cr where  mf.category_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and dd.date = '%s' and dd.shift = '%s' "  %(str(brch),str(brch),str(brch),str(dateH), str(shiftH))
							#update4mCmTsCatgry = "update school_daily_data dd,school_minmaxfat mf,school_cowmilkcategory cr set dd.tsrate = mf.tsrate ,dd.comm = mf.commission where  dd.tsrate = 0 and mf.category_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and dd.date between '%s' and '%s' " %(str(datefrom),str(dateto))
							update4mCmTsCatgry = "update %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkcategory cr set dd.tsrate = mf.tsrate  where  dd.tsrate = 0 and mf.category_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and  dd.date = '%s' and dd.shift = '%s' "  %(str(brch),str(brch),str(brch),str(dateH), str(shiftH))
							print(updateCmTsCatgry)
							print(update4mCmTsCatgry)
							cursor4.execute(update4mCmTsCatgry)

							cursor5 = connection.cursor()
							routeupdate = "update %s.school_Daily_data D ,%s.School_center C set routecode = C.route_number  where D.centercode = C.centre_code and date = '%s' "%(str(brch),str(brch),str(dateH))
							cursor5.execute(routeupdate)

							cursor6 = connection.cursor()
							routeupdate1 = "update %s.school_Daily_data D ,%s.School_route R set routename = R.route_name  where D.routecode = R.route_number and date = '%s' "%(str(brch),str(brch),str(dateH))
							cursor6.execute(routeupdate1)

							cursor7 = connection.cursor()
							centerupdate1 = "update %s.school_Daily_data D ,%s.School_center C set centername = C.name  where D.centercode = C.centre_code and date = '%s' "%(str(brch),str(brch),str(dateH))
							
							cursor7.execute(centerupdate1)

							messages.success(request, 'Your details have been saved!')
						#except: 
						 #   return HttpResponse("no records")
							#* Ends Siri17Dec2020***
						except Exception as err:
							messages.error(request,err)
							return render(request,'match.html',locals())
						dc = DoK_Entry.objects.using(brch).filter(date=dateH,shift=shiftH).delete()
						qc = QC_Entry.objects.using(brch).filter(date=dateH,shift=shiftH).delete()
					
					

					
					return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'match.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:

		messages.error(request,err)
		return render(request,'match.html',locals())
# def model_form_upload(request):
#     if request.method == 'POST':
#         form = DocumentForm(request.POST, request.FILES)
#         if form.is_valid():
#             form.save()            
#     else:
#         form = DocumentForm()
#     return render(request, 'testdata.html', {
#         'form': form
#     })
import datetime
from django.db import connection
import mysql.connector
from mysql.connector import Error

def update_dataho(request):  
	#try:
		
	if request.session.has_key('name'):
		branch=Branch.objects.all()
		
		cursor = connection.cursor()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		if request.method == "POST":
			branch1=request.POST["brch"]
			
			datefrom = request.POST["datefrom"]
			shift_from = request.POST["shiftfrom"]
			dateto = request.POST["dateto"]
			shift_to = request.POST["shiftto"]
			center = Center.objects.using(branch1).all()
			centercode =  request.POST["centercode"]
			request.session['branch1k'] = request.POST["brch"]
		   


			#try:
			if centercode == 'all':
				dc = Daily_data.objects.using(branch1).filter(date__range = [datefrom,dateto],shift__range = [shift_from,shift_to])
			else:
				dc = Daily_data.objects.using(branch1).filter(date__range = [datefrom,dateto],shift__range = [shift_from,shift_to], centercode= centercode)

				  
			

		return render(request,'updateho.html',locals())
	else:
		return render(request,'index.html',locals())
	#except Exception as err:
	#	messages.error(request,err)
	#	return render(request,'updateho.html',locals())
def csv_update_ratesho(request):
	try:
	
		if request.session.has_key('name'):			
			#center=Center.objects.using(branch1).all()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day =1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			if request.method == "POST":
				branch1=request.session['branch1k']
				AfatH = request.POST["fatH"]

				AsnfH = request.POST["snfH"]
				#AclrH = request.POST["clrH"]
				AkgsH = request.POST["kgsH"]
				#dc = DoK_Entry.objects.filter(date=date,shift=shift_loc)
				#qc = QC_Entry.objects.filter(date=date,shift=shift_loc)
				for index,j in enumerate(request.POST.getlist('dcid1[]')):
					dateF1 = request.POST.getlist("dcid1[]")[index]
					for index,j in enumerate(request.POST.getlist('center[]')):
						print(3.1)
						dailydata=Daily_data.objects.using(branch1).filter(id=request.POST.getlist('dcid1[]')[index]).update(              
							date = request.POST.getlist("sdate1[]")[index],
							#shift = request.POST.getlist("shift1[]")[index],                
							#milk_type = request.POST.getlist("milk_type[]")[index],
							centercode = request.POST.getlist("center[]")[index],
							#branch=request.POST["branch"],
							can = request.POST.getlist('can[]')[index],
							#qty = float(request.POST.getlist('qty[]')[index])+float(AkgsH),
						   # ltrs=  request.POST.getlist('Quantity[]/1.03')[index],
							qty = round((float(request.POST.getlist('qty[]')[index])+float(AkgsH)),3),
							fat = round((float(request.POST.getlist('fat[]')[index])+float(AfatH)),3),
							snf = round((float(request.POST.getlist('snf[]')[index])+float(AsnfH)),3),
							clr = round((float(request.POST.getlist('clr[]')[index])),3),
							tsrate = round((float(request.POST.getlist('tsrate[]')[index])),3),
							ltrrate = round((float(request.POST.getlist('ltrrate[]')[index])),3),
							comm = round((float(request.POST.getlist('comm[]')[index])),3),
							pel = round((float(request.POST.getlist('pel[]')[index])),3),
							amount = round((float(request.POST.getlist('amount[]')[index])),5),
							net = round((float(request.POST.getlist('netamount[]')[index] )) ,5)             
							)
						
						

					
						cursor2 = connection.cursor()    
						milkltr12 = "update %s.school_daily_data set  ltrs = round(ltrs,1) where id = '%s' "  %((str(branch1)),dateF1)
						print(milkltr12)
						cursor2.execute(milkltr12)

						cursor1 = connection.cursor() 
						updateCmTsCatgry = "select dd.id,mf.tsrate,dd.fat,dd.snf,mf.min_fat, mf.max_fat, mf.min_snf, mf.max_snf from %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkcategory cr where  mf.category_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and dd.id = '%s' "  %(str(branch1),str(branch1),str(branch1),str(dateF1))
						update4mCmTsCatgry = "update %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkcategory cr set dd.tsrate = mf.tsrate  where  mf.category_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and dd.id = '%s' " %(str(branch1),str(branch1),str(branch1),str(dateF1))
						update4mCmTsCatgry = "update %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkcategory cr set dd.tsrate = mf.tsrate  where  mf.category_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and  dd.id = '%s'  "  %(str(branch1),str(branch1),str(branch1),str(dateF1))
						print(updateCmTsCatgry)
						print(update4mCmTsCatgry)
						cursor1.execute(update4mCmTsCatgry)

						cursor3 = connection.cursor() 
						updateCmTsRoute = "select dd.id,mf.tsrate from %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkroute cr,%s.school_center cm where dd.centercode = cm.centre_code and mf.routecode_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and cm.centre_code =centercode and dd.id = '%s'  "  %(str(branch1),str(branch1),str(branch1),str(branch1),str(dateF1))
						print(updateCmTsRoute)
						#update4mCmTsRoute = "update school_daily_data dd,school_minmaxfat mf,school_cowmilkroute cr,school_center cm set dd.tsrate = mf.tsrate , dd.comm= mf.commission where dd.tsrate = 0 and dd.centercode = cm.centre_code and mf.routecode_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and cm.centre_code =centercode and dd.date between '%s' and '%s' " %(str(datefrom),str(dateto))
						update4mCmTsRoute = "update %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkroute cr,%s.school_center cm set dd.tsrate = mf.tsrate  where dd.tsrate = 0 and dd.centercode = cm.centre_code and mf.routecode_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and cm.centre_code =centercode and dd.id = '%s'  "  %(str(branch1),str(branch1),str(branch1),str(branch1),str(dateF1))
						print(update4mCmTsRoute)
						#MariaDB [demo3]>   select dd.id,mf.tsrate,mf.commission,dd.fat,dd.snf,mf.min_fat,mf.max_fat,mf.min_snf, mf.max_snf from school_daily_data dd,school_minmaxfat mf,school_cowmilkcenter cr where dd.centercode = cr.centercode and mf.centercode_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date;
						cursor3.execute(update4mCmTsRoute)


						cursor5 = connection.cursor()     

						UpdNetamt2 = "update %s.school_daily_data dd  set  ltrrate  = round(((fat+snf)*tsrate/100),2), amount = round((ltrrate*ltrs),2), net = round((amount+pel),2) where  dd.id= '%s' "  %((str(branch1)),dateF1)
						#print("UpdNetamt2",UpdNetamt2)
						cursor5.execute(UpdNetamt2)

						cursor10 = connection.cursor()     

						UpdNetamt10 = "update %s.school_daily_data dd , %s.school_center C set pel = round((ltrs*C.cm_comm_amount),2),comm = C.cm_comm_amount where C.cm_comm_unit = 'ltr' and dd.centercode = C.centre_code and dd.id= '%s' "  %(str(branch1),str(branch1),dateF1)
						print("UpdNetamt10",UpdNetamt10)
						cursor10.execute(UpdNetamt10)

						cursor11 = connection.cursor()     

						UpdNetamt11 = "update %s.school_daily_data dd , %s.school_center C set pel = round((qty*C.cm_comm_amount),2),comm = C.cm_comm_amount where C.cm_comm_unit = 'kg' and dd.centercode = C.centre_code and dd.id= '%s' "  %(str(branch1),str(branch1),dateF1)
						print("UpdNetamt11",UpdNetamt11)
						cursor11.execute(UpdNetamt11)

						cursor9 = connection.cursor()
						updclr = "update %s.school_Daily_data set clr=(((snf-0.36)-(0.21*fat))*4) where id ='%s' "%((str(branch1)),dateF1)
						print("updclr",updclr)
						cursor9.execute(updclr)
							
						   
					messages.success(request, 'Your details have been saved!')
					return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'updateho.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:

		messages.error(request,err)
		return render(request,'updateho.html',locals())


# Module -Transaction #4 - Getting Update Data Values- update_rates.html
# Created by - 2020-12-14 @ karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Charan
import datetime
from django.db import connection
import mysql.connector
from mysql.connector import Error
def update_data(request):  
	try:
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				center = Center.objects.using(brch).all()
				cursor = connection.cursor()
				today = date.today()
				t_m = datetime.datetime.now().month
				start_of_m = today.replace(day =1, month=t_m)
				end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					shift_from = request.POST["shiftfrom"]
					dateto = request.POST["dateto"]
					shift_to = request.POST["shiftto"]
					centercode =  request.POST["centercode"]
				   


					#try:
					if centercode == 'all':
						dc = Daily_data.objects.using(brch).filter(date__range = [datefrom,dateto],shift__range = [shift_from,shift_to]).order_by('centercode','date','shift')
					else:
						dc = Daily_data.objects.using(brch).filter(date__range = [datefrom,dateto],shift__range = [shift_from,shift_to], centercode= centercode).order_by('date','shift')

						  
					#dqryts3 = "SELECT dd.id,mf.tsrate,mf.commission FROM school_daily_data dd , school_minmaxfat mf, school_cowmilkroute cr, school_center cm WHERE dd.centercode =  cm.centre_code AND mf.routecode_id = cr.id AND dd.fat BETWEEN mf.min_fat AND mf.max_fat AND dd.snf BETWEEN mf.min_snf AND mf.max_snf AND cm.centre_code = centercode and dd.date between '%s' and '%s'  and dd.date between mf.from_date and mf.to_date " %(str(datefrom),str(dateto))
					#updatequery = "select dd.id,mf.tsratefrom school_daily_data dd,school_minmaxfat mf,school_cowmilkroute cr,school_center cm where dd.centercode = cm.centre_code and mf.routecode_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and cm.centre_code =centercode and dd.date between '%s' and '%s' " %(str(datefrom),str(dateto))

				   
					#cursor.execute(updatequery)
					#ratequery3 = cursor.fetchall()
					#for row in ratequery3:
					#	id=row[0]
					#	tsrate = row[1]
						#commission = row[2]
					  #  Updqryts3 = "update school_daily_data set  tsrate = %s , comm = %s where id = %s" %(tsrate,commission,id)
					   # print(Updqryts3)
					   # cursor.execute(Updqryts3)
					#	print("id = " ,row[0])
					##	print("tsrate = ", row[1], )
						#print("commission = ", row[2])
					#	print(tsrate)
						#print(commission)        
					#	print(updatequery)

					#cursor.execute(dqryts3)
					#ratequery3 = cursor.fetchall()
				   ## for row in ratequery3:
					##    id=row[0]
					 #   tsrate = row[1]
					 #   commission = row[2]
					#   Updqryts3 = "update school_daily_data set  tsrate = %s , comm = %s where id = %s" %(tsrate,commission,id)
					#   print(Updqryts3)
					#   cursor.execute(Updqryts3)
					#   print("tsrate = ", row[1], )
					#   print("commission = ", row[2])
					#print(tsrate)
					#print(commission)        
					  #  print(dqryts3)
				   
						#Updqryts3 = "update school_daily_data set  tsrate = %s , comm = %s where id = %s" %(tsrate,commission,id)
						#print(Updqryts3)
						#cursor.execute(Updqryts3)

						#Updqrytsr = "update school_daily_data set  ltrrate = (fat+snf)*tsrate/100 where id = %s" %(id)
						#print(Updqrytsr)
						#cursor.execute(Updqrytsr)
			#except:
				#    return HttpResponse('no records found')
			   
					#kgrate = (dc.fat + dc.snf )* 220 /100
					#ltrrate = kgrate/1.03

					#tsrate = 220
					#commmission = 2
					#kgrate = 24
					#ltrrate = 24/1.03 = 22.90
					#Quantity = 50kg

					#commissionAmt = quantity/1.03*commision
					#commAmt = 48*2 = 96
					#48*22.90 = 1300+96 = 1396




					# amount = (qty * ltrrate) , ((qty/1.03)*commission)

					# print(ltrrate)
					# for row in ratequery:
					#     tsrate = row[0]
					# print(ratequery)
					# print(querycheck)

			return render(request,'update_rates.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:

		messages.error(request,err)
		return render(request,'update_rates.html',locals())

# Module -Transaction #4 - Update Data Saving- update_rates.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Charan
def csv_update_rates(request):
	try:
	
		if request.session.has_key('name'):
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
				center=Center.objects.using(brch).all()
				today = date.today()
				t_m = datetime.datetime.now().month
				start_of_m = today.replace(day =1, month=t_m)
				end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
				if request.method == "POST":
					AfatH = request.POST["fatH"]
					AsnfH = request.POST["snfH"]
					#AclrH = request.POST["clrH"]
					AkgsH = request.POST["kgsH"]
					#dc = DoK_Entry.objects.filter(date=date,shift=shift_loc)
					#qc = QC_Entry.objects.filter(date=date,shift=shift_loc)
					for index,j in enumerate(request.POST.getlist('dcid1[]')):
						dateF1 = request.POST.getlist("dcid1[]")[index]
						for index,j in enumerate(request.POST.getlist('center[]')):
							print(3.1)
							dailydata=Daily_data.objects.using(brch).filter(id=request.POST.getlist('dcid1[]')[index]).update(              
								date = request.POST.getlist("sdate1[]")[index],
								#shift = request.POST.getlist("shift1[]")[index],                
								#milk_type = request.POST.getlist("milk_type[]")[index],
								centercode = request.POST.getlist("center[]")[index],
								#branch=request.POST["branch"],
								can = request.POST.getlist('can[]')[index],
								#qty = float(request.POST.getlist('qty[]')[index])+float(AkgsH),
							   # ltrs=  request.POST.getlist('Quantity[]/1.03')[index],
								qty = round((float(request.POST.getlist('qty[]')[index])+float(AkgsH)),3),
								fat = round((float(request.POST.getlist('fat[]')[index])+float(AfatH)),3),
								snf = round((float(request.POST.getlist('snf[]')[index])+float(AsnfH)),3),
								clr = round((float(request.POST.getlist('clr[]')[index])),3),
								tsrate = round((float(request.POST.getlist('tsrate[]')[index])),3),
								ltrrate = round((float(request.POST.getlist('ltrrate[]')[index])),3),
								comm = round((float(request.POST.getlist('comm[]')[index])),3),
								pel = round((float(request.POST.getlist('pel[]')[index])),3),
								amount = round((float(request.POST.getlist('amount[]')[index])),5),
								net = round((float(request.POST.getlist('netamount[]')[index] )) ,5)             
								)
							dailydataaa=Daily_dataa.objects.using(brch).filter(id=request.POST.getlist("dcid1[]")[index]).update(              
								date1 = request.POST.getlist("sdate1[]")[index],
								#shift1 = request.POST.getlist("shift1[]")[index],                
								#milk_type1 = request.POST.getlist("milk_type[]")[index],
								centercode1 = request.POST.getlist("center[]")[index],
								#branch=request.POST["branch"],
								can1 = request.POST.getlist('can[]')[index],
								#qty = float(request.POST.getlist('qty[]')[index])+float(AkgsH),
							   # ltrs=  request.POST.getlist('Quantity[]/1.03')[index],
								qty1 = round((float(request.POST.getlist('qty[]')[index])+float(AkgsH)),3),
								fat1 = round((float(request.POST.getlist('fat[]')[index])+float(AfatH)),3),
								snf1 = round((float(request.POST.getlist('snf[]')[index])+float(AsnfH)),3),
								clr1 = round((float(request.POST.getlist('clr[]')[index])),3),
								tsrate1 = round((float(request.POST.getlist('tsrate[]')[index])),3),
								ltrrate1 = round((float(request.POST.getlist('ltrrate[]')[index])),3),
								comm1 = round((float(request.POST.getlist('comm[]')[index])),3),
								pel1 = round((float(request.POST.getlist('pel[]')[index])),3),
								amount1 = round((float(request.POST.getlist('amount[]')[index])),5),
								net1 = round((float(request.POST.getlist('netamount[]')[index] )) ,5),  
								updatedd_by=request.user, 
								updateddd=datetime.datetime.now(),          
								)
							dailydataaa=Daily_dataaa.objects.using(brch).filter(id=request.POST.getlist("dcid1[]")[index]).update(              
								date1 = request.POST.getlist("sdate1[]")[index],
								#shift1 = request.POST.getlist("shift1[]")[index],                
								#milk_type1 = request.POST.getlist("milk_type[]")[index],
								centercode1 = request.POST.getlist("center[]")[index],
								#branch=request.POST["branch"],
								can1 = request.POST.getlist('can[]')[index],
								#qty = float(request.POST.getlist('qty[]')[index])+float(AkgsH),
							   # ltrs=  request.POST.getlist('Quantity[]/1.03')[index],
								qty1 = round((float(request.POST.getlist('qty[]')[index])+float(AkgsH)),3),
								fat1 = round((float(request.POST.getlist('fat[]')[index])+float(AfatH)),3),
								snf1 = round((float(request.POST.getlist('snf[]')[index])+float(AsnfH)),3),
								clr1 = round((float(request.POST.getlist('clr[]')[index])),3),
								tsrate1 = round((float(request.POST.getlist('tsrate[]')[index])),3),
								ltrrate1 = round((float(request.POST.getlist('ltrrate[]')[index])),3),
								comm1 = round((float(request.POST.getlist('comm[]')[index])),3),
								pel1 = round((float(request.POST.getlist('pel[]')[index])),3),
								amount1 = round((float(request.POST.getlist('amount[]')[index])),5),
								net1 = round((float(request.POST.getlist('netamount[]')[index] )) ,5),  
								updar_by=request.user, 
								updar=datetime.datetime.now(),          
								)

							for index,j in enumerate(request.POST.getlist('dcid1[]')):
								dateF1 = request.POST.getlist("dcid1[]")[index]
								print("@gh",dateF1)

						
								cursor2 = connection.cursor()    
								milkltr12 = "update %s.school_daily_data set  ltrs = round(ltrs,3) where id = '%s' "  %((str(brch)),dateF1)
								print(milkltr12)
								cursor2.execute(milkltr12)

								

								cursor1 = connection.cursor() 
								updateCmTsCatgry = "select dd.id,mf.tsrate,dd.fat,dd.snf,mf.min_fat, mf.max_fat, mf.min_snf, mf.max_snf from %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkcategory cr where  mf.category_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between cr.from_date and cr.to_date and dd.id = '%s' "  %(str(brch),str(brch),str(brch),str(dateF1))
								update4mCmTsCatgry = "update %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkcategory cr set dd.tsrate = mf.tsrate  where  mf.category_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between cr.from_date and cr.to_date and dd.id = '%s' " %(str(brch),str(brch),str(brch),str(dateF1))
								#update4mCmTsCatgry = "update %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkcategory cr set dd.tsrate = mf.tsrate  where  mf.category_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and  dd.id = '%s'  "  %(str(brch),str(brch),str(brch),str(dateF1))
								print(updateCmTsCatgry)
								print(update4mCmTsCatgry)
								cursor1.execute(update4mCmTsCatgry)

								#Below 2 blocks of Route wise and center wise TSRate updates commented Dtd 7thApril2021

								#cursor3 = connection.cursor() 
								#updateCmTsRoute = "select dd.id,mf.tsrate from %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkroute cr,%s.school_center cm where dd.centercode = cm.centre_code and mf.routecode_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and cm.centre_code =centercode and dd.id = '%s'  "  %(str(brch),str(brch),str(brch),str(brch),str(dateF1))
								#print(updateCmTsRoute)
								#update4mCmTsRoute = "update school_daily_data dd,school_minmaxfat mf,school_cowmilkroute cr,school_center cm set dd.tsrate = mf.tsrate , dd.comm= mf.commission where dd.tsrate = 0 and dd.centercode = cm.centre_code and mf.routecode_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and cm.centre_code =centercode and dd.date between '%s' and '%s' " %(str(datefrom),str(dateto))
								#update4mCmTsRoute = "update %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkroute cr,%s.school_center cm set dd.tsrate = mf.tsrate  where dd.centercode = cm.centre_code and mf.routecode_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and cm.centre_code =centercode and dd.id = '%s'  "  %(str(brch),str(brch),str(brch),str(brch),str(dateF1))
								#print(update4mCmTsRoute)
								#MariaDB [demo3]>   select dd.id,mf.tsrate,mf.commission,dd.fat,dd.snf,mf.min_fat,mf.max_fat,mf.min_snf, mf.max_snf from school_daily_data dd,school_minmaxfat mf,school_cowmilkcenter cr where dd.centercode = cr.centercode and mf.centercode_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date;
								#cursor3.execute(update4mCmTsRoute)

								#cursor15 = connection.cursor() 
								#updateCmTsCenter = "select dd.id,mf.tsrate,dd.fat,dd.snf,mf.min_fat, mf.max_fat, mf.min_snf, mf.max_snf from %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkcenter cr where  mf.centercode_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and dd.id = '%s' and cr.centercode = dd.centercode  "  %(str(brch),str(brch),str(brch),str(dateF1))
								#print("@gt",updateCmTsCenter)
								#update4mCmTsCenter = "update %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkcenter cr set dd.tsrate = mf.tsrate  where  mf.centercode_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and dd.id = '%s' and cr.centercode = dd.centercode " %(str(brch),str(brch),str(brch),str(dateF1))
								#update4mCmTsCatgry = "update %s.school_daily_data dd,%s.school_minmaxfat mf,%s.school_cowmilkcategory cr set dd.tsrate = mf.tsrate  where  mf.category_id = cr.id and dd.fat between mf.min_fat and mf.max_fat and dd.snf between mf.min_snf and mf.max_snf and dd.date between mf.from_date and mf.to_date and  dd.id = '%s'  "  %(str(brch),str(brch),str(brch),str(dateF1))
								#print(updateCmTsCatgry)
								#print("@6095",update4mCmTsCenter)
								#cursor15.execute(update4mCmTsCenter)

								# End Comments Dtd 7thApril2021

								

								cursor10 = connection.cursor()     

								UpdNetamt10 = "update %s.school_daily_data dd , %s.school_center C set pel = round((ltrs*C.cm_comm_amount),2),comm = C.cm_comm_amount where C.cm_comm_unit = 'ltr' and dd.centercode = C.centre_code and dd.id= '%s' "  %(str(brch),str(brch),dateF1)
								print("UpdNetamt10",UpdNetamt10)
								cursor10.execute(UpdNetamt10)

								cursor11 = connection.cursor()     

								UpdNetamt11 = "update %s.school_daily_data dd , %s.school_center C set pel = round((qty*C.cm_comm_amount),2),comm = C.cm_comm_amount where C.cm_comm_unit = 'kg' and dd.centercode = C.centre_code and dd.id= '%s' "  %(str(brch),str(brch),dateF1)
								print("UpdNetamt11",UpdNetamt11)
								cursor11.execute(UpdNetamt11)

								cursor5 = connection.cursor()     

								UpdNetamt2 = "update %s.school_daily_data dd  set  ltrrate  = round(((fat+snf)*tsrate/100),3), amount = round((round(ltrrate,2)*ltrs),3), net = round((amount+pel),3) where  dd.id= '%s' "  %((str(brch)),dateF1)
								#print("UpdNetamt2",UpdNetamt2)
								cursor5.execute(UpdNetamt2)

								cursor9 = connection.cursor()
								updclr = "update %s.school_Daily_data set clr=(((snf-0.36)-(0.21*fat))*4) where id ='%s' "%((str(brch)),dateF1)
								print("updclr",updclr)
								cursor9.execute(updclr)

								#using querys update route name and center code
								#cursor15 = connection.cursor()
								#routeupdate = "update %s.school_Daily_data D ,%s.School_center C set routecode = C.route_number  where D.centercode = C.centre_code and D.id = '%s' "%(str(brch),str(brch),str(dateF1))
								#cursor15.execute(routeupdate)

								#cursor16 = connection.cursor()
								#routeupdate1 = "update %s.school_Daily_data D ,%s.School_route R set routename = R.route_name  where D.routecode = R.route_number and D.id = '%s' "%(str(brch),str(brch),str(dateF1))
								#cursor16.execute(routeupdate1)

								#cursor17 = connection.cursor()
								#centerupdate1 = "update %s.school_Daily_data D ,%s.School_center C set centername = C.name  where D.centercode = C.centre_code and D.id = '%s' "%(str(brch),str(brch),str(dateF1))
								
								#cursor17.execute(centerupdate1)
									
							   
						messages.success(request, 'Your details have been saved!')
						return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
				return render(request,'update_rates.html',locals())
			else:
				return render(request,'index.html',locals())
	except Exception as err:

		messages.error(request,err)
		return render(request,'update_rates.html',locals())

# Module -Transaction #4 - Update Data edit and  Saving- update_rates_edit.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Charan
def edit_update(request,id):
	try:
		dc = Daily_data.objects.get(id=id)
		if request.session.has_key('name'):
			if request.method == "POST":
				dc = Daily_data.objects.filter(id=id).update(
					milk_type=request.POST["milk_type"],
					snf=request.POST["snf"],
					fat=request.POST["fat"],
					# quantity=request.POST["quantity"]
					)
				return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request, 'update_rates_edit.html', locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:

		messages.error(request,err)
		return render(request,'update_rates_edit.html',locals())


# Module -Reports - Transcations #2 - Displaying the center wise report- center_wise.html
# Created by - 2020-12-14 @ Charan
# Modified by - 2020-12-14 @ Charan 
# Modified by - 2020-12-14 @ Charan
def center_wise(request):
	try:
		route = Route.objects.all()
		center = Center.objects.all().distinct()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.session.has_key('name'):
			if request.method == "POST":
				datefrom = request.POST["datefrom"]
				dateto = request.POST["dateto"]
				routecode = request.POST["routecode"]
				centercode = request.POST["centercode"]
				if routecode == 'all' and centercode == 'all':
					dc = Daily_data.objects.filter(date__range=[datefrom, dateto]).distinct()
				elif routecode == 'all' and centercode != 'all':
					dc = Daily_data.objects.filter(date__range=[datefrom, dateto], centercode=centercode).distinct()
				elif centercode == 'all' and routecode != 'all':
					dc = Daily_data.objects.filter(date__range=[datefrom, dateto], routecode=routecode).distinct()
				else:
					dc = Daily_data.objects.filter(date__range=[datefrom, dateto], centercode=centercode,routecode=routecode).distinct()
			return render(request,'center_wise.html',locals())
		else:
			return render(request,'index.html',locals())
	except Exception as err:

		messages.error(request,err)
		return render(request,'center_wise.html',locals())


# Module -Reports - Transcations #1 - Displaying the daily_data report- daily_data.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Charan
def daily_data(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			route = Route.objects.using(brch).all()
			center = Center.objects.using(brch).all()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day =1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			# return HttpResponse(end_of_m)
			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					routecode =  request.POST["routecode"]
					centercode = request.POST["centercode"]
					datefrom1 =datetime.datetime.strptime(datefrom, '%Y-%m-%d').strftime('%d-%m-%Y')
					print(datefrom)
					dateto1 = datetime.datetime.strptime(dateto, '%Y-%m-%d').strftime('%d-%m-%Y')	

					#using this query but displaying same route name all centers
					#cursor2 = connection.cursor()
					#centerdisplay = "select r.route_number,r.route_name,c.centre_code,c.name,D.centercode from %s.school_daily_Data D join %s.school_center c on D.centercode= c.centre_code and  date between '%s' and '%s' join %s.school_route r on c.route_number = r.route_number group by centercode"%(str(brch),str(brch),str(datefrom),str(dateto),str(brch))
					#cursor2.execute(centerdisplay)
					#getcenter = cursor2.fetchall()
					#print(centerdisplay)
					#for row in getcenter:
						#routenumber = row[0]
						#routename = row[1]
						#centernumber = row[2]
						#centername = row[3]
						#print("6373",routename)
					cursor = connection.cursor()
						
					directQ ="delete from %s.school_rpt_dailydata"%(str(brch))
					cursor.execute(directQ)
					cursor1 = connection.cursor() 
					#cursor2 = connection.cursor() 
					#cursor3 = connection.cursor()      
					
					QUERY12 ="insert into %s.school_rpt_dailydata(date,shift,milk_type,routecode,routename,centercode,centername,qty,ltrs,fat,snf,ltrrate,tsrate,comm,pel,net) select date,shift,d.milk_type,c.route_number,r.route_name,c.centre_code,c.name,qty,ltrs,d.fat,d.snf,d.ltrrate,d.tsrate,comm,pel,net  from %s.school_daily_data d left join %s.school_center c on c.centre_code = d.centercode and d.date between '%s' and '%s' left join  %s.school_route r on c.route_number = r.route_number order by Date,centercode,shift"%(str(brch),str(brch),str(brch),str(datefrom),str(dateto),str(brch))
					print(QUERY12)
					cursor1.execute(QUERY12)


					if routecode == 'all' and centercode == 'all':
						dc =rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_listkgs = []
						total_kgssum_detail = 0
						total_kgsall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_kgsall:
							total_listkgs.append(i.qty)
							total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs = []
						total_ltrssum_detail = 0
						total_ltrsall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_ltrsall:
							total_listltrs.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listltrs),4)
						total_listfat = []
						total_fatsum_detail = 0
						total_fatsum1_detail=0
						total_fatall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_fatallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_fatall:
							total_listfat.append(i.fat)
							total_fatsum1_detail = round(sum(total_listfat),3)
							total_fatsum_detail = total_fatsum1_detail/total_fatallcount
						total_listsnf = []
						total_snfsum_detail = 0
						total_snfsum1_detail = 0
						total_snfall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_snfallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_snfall:
							total_listsnf.append(i.snf)
							total_snfsum1_detail = round(sum(total_listsnf),2)
							total_snfsum_detail = total_snfsum1_detail/total_snfallcount
						total_listrate = []
						total_ratesum_detail = 0
						total_ratesum_detail1 = 0
						total_rateall =rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_rateallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_rateall:
							total_listrate.append(i.ltrrate)
							total_ratesum_detail1 = round(sum(total_listrate),2)
							total_ratesum_detail = total_ratesum_detail1/total_rateallcount
						total_listamount = []
						total_tsratesum_detail = 0.0
						total_tsratesum_detail1 = 0.0
						total_amountall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_tsrateallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_amountall:
							#print(2.3)
							total_listamount.append(i.tsrate)
							#print("@789",total_listamount)
							total_tsratesum_detail1 = round(sum(total_listamount),2)
							total_tsratesum_detail = total_tsratesum_detail1/total_tsrateallcount
							#print(5.5)
						total_listcomm = []
						total_commsum_detail = 0.0
						total_commsum_detail1 = 0.0
						total_commall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_commallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_commall:
							total_listcomm.append(i.comm)
							total_commsum_detail1 = round(sum(total_listcomm),2)
							total_commsum_detail = total_commsum_detail1/total_commallcount
						total_listpel = []
						total_pelsum_detail = 0.0
						total_pelall =  rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_pelall:
							total_listpel.append(i.pel)
							total_pelsum_detail = round(sum(total_listpel),2)
						total_listtotal = []
						total_totalsum_detail = 0.0
						total_totalall =  rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_totalall:
							total_listtotal.append(i.net)
							total_totalsum_detail = round(sum(total_listtotal),2)
					elif routecode == 'all' and centercode != 'all':
						dc =rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_listkgs = []
						total_kgssum_detail = 0
						total_kgsall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_kgsall:
							total_listkgs.append(i.qty)
							total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs = []
						total_ltrssum_detail = 0
						total_ltrsall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_ltrsall:
							total_listltrs.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listltrs),4)
						total_listfat = []
						total_fatsum_detail = 0
						total_fatsum1_detail=0
						total_fatall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_fatallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_fatall:
							total_listfat.append(i.fat)
							total_fatsum1_detail = round(sum(total_listfat),3)
							total_fatsum_detail = total_fatsum1_detail/total_fatallcount
						total_listsnf = []
						total_snfsum_detail = 0
						total_snfsum1_detail = 0
						total_snfall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_snfallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_snfall:
							total_listsnf.append(i.snf)
							total_snfsum1_detail = round(sum(total_listsnf),2)
							total_snfsum_detail = total_snfsum1_detail/total_snfallcount
						total_listrate = []
						total_ratesum_detail = 0
						total_ratesum_detail1 = 0
						total_rateall =rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_rateallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_rateall:
							total_listrate.append(i.ltrrate)
							total_ratesum_detail1 = round(sum(total_listrate),2)
							total_ratesum_detail = total_ratesum_detail1/total_rateallcount
						total_listamount = []
						total_tsratesum_detail = 0.0
						total_tsratesum_detail1 = 0.0
						total_amountall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_tsrateallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_amountall:
							#print(2.3)
							total_listamount.append(i.tsrate)
							#print("@789",total_listamount)
							total_tsratesum_detail = round(sum(total_listamount),2)
							total_tsratesum_detail = total_tsratesum_detail1/total_tsrateallcount
							#print(5.5)
						total_listcomm = []
						total_commsum_detail = 0.0
						total_commsum_detail1 = 0.0
						total_commall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_commallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_commall:
							total_listcomm.append(i.comm)
							total_commsum_detail1 = round(sum(total_listcomm),2)
							total_commsum_detail = total_commsum_detail1/total_commallcount
						total_listpel = []
						total_pelsum_detail = 0.0
						total_pelall =  rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_pelall:
							total_listpel.append(i.pel)
							total_pelsum_detail = round(sum(total_listpel),2)
						total_listtotal = []
						total_totalsum_detail = 0.0
						total_totalall =  rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_totalall:
							total_listtotal.append(i.net)
							total_totalsum_detail = round(sum(total_listtotal),2)
					elif centercode == 'all' and routecode != 'all':
						dc =rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_listkgs = []
						total_kgssum_detail = 0
						total_kgsall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_kgsall:
							total_listkgs.append(i.qty)
							total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs = []
						total_ltrssum_detail = 0
						total_ltrsall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_ltrsall:
							total_listltrs.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listltrs),4)
						total_listfat = []
						total_fatsum_detail = 0
						total_fatsum1_detail=0
						total_fatall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_fatallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_fatall:
							total_listfat.append(i.fat)
							total_fatsum1_detail = round(sum(total_listfat),3)
							total_fatsum_detail = total_fatsum1_detail/total_fatallcount
						total_listsnf = []
						total_snfsum_detail = 0
						total_snfsum1_detail = 0
						total_snfall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_snfallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_snfall:
							total_listsnf.append(i.snf)
							total_snfsum1_detail = round(sum(total_listsnf),2)
							total_snfsum_detail = total_snfsum1_detail/total_snfallcount
						total_listrate = []
						total_ratesum_detail = 0
						total_ratesum_detail1 = 0
						total_rateall =rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_rateallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_rateall:
							total_listrate.append(i.ltrrate)
							total_ratesum_detail1 = round(sum(total_listrate),2)
							total_ratesum_detail = total_ratesum_detail1/total_rateallcount
						total_listamount = []
						total_tsratesum_detail = 0.0
						total_tsratesum_detail1 = 0.0
						total_amountall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_tsrateallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_amountall:
							#print(2.3)
							total_listamount.append(i.tsrate)
							#print("@789",total_listamount)
							total_tsratesum_detail = round(sum(total_listamount),2)
							total_tsratesum_detail = total_tsratesum_detail1/total_tsrateallcount
							#print(5.5)
						total_listcomm = []
						total_commsum_detail = 0.0
						total_commsum_detail1 = 0.0
						total_commall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_commallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_commall:
							total_listcomm.append(i.comm)
							total_commsum_detail1 = round(sum(total_listcomm),2)
							total_commsum_detail = total_commsum_detail1/total_commallcount
						total_listpel = []
						total_pelsum_detail = 0.0
						total_pelall =  rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_pelall:
							total_listpel.append(i.pel)
							total_pelsum_detail = round(sum(total_listpel),2)
						total_listtotal = []
						total_totalsum_detail = 0.0
						total_totalall =  rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_totalall:
							total_listtotal.append(i.net)
							total_totalsum_detail = round(sum(total_listtotal),2)
					else:
						dc = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto],centercode=centercode, routecode = routecode).distinct()
						total_listkgs = []
						total_kgssum_detail = 0
						total_kgsall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto],centercode=centercode, routecode = routecode).distinct()
						for i in total_kgsall:
							total_listkgs.append(i.qty)
							total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs = []
						total_ltrssum_detail = 0
						total_ltrsall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto],centercode=centercode, routecode = routecode).distinct()
						for i in total_ltrsall:
							total_listltrs.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listltrs),4)
						total_listfat = []
						total_fatsum_detail = 0
						total_fatsum1_detail=0
						total_fatall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto],centercode=centercode, routecode = routecode).distinct()
						total_fatallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto],centercode=centercode, routecode = routecode).distinct().count()
						for i in total_fatall:
							total_listfat.append(i.fat)
							total_fatsum1_detail = round(sum(total_listfat),3)
							total_fatsum_detail = total_fatsum1_detail/total_fatallcount
						total_listsnf = []
						total_snfsum_detail = 0
						total_snfsum1_detail = 0
						total_snfall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto],centercode=centercode, routecode = routecode).distinct()
						total_snfallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto],centercode=centercode, routecode = routecode).distinct().count()
						for i in total_snfall:
							total_listsnf.append(i.snf)
							total_snfsum1_detail = round(sum(total_listsnf),2)
							total_snfsum_detail = total_snfsum1_detail/total_snfallcount
						total_listrate = []
						total_ratesum_detail = 0
						total_rateall =rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto],centercode=centercode, routecode = routecode).distinct()
						for i in total_rateall:
							total_listrate.append(i.ltrrate)
							total_ratesum_detail = round(sum(total_listrate),2)
						total_listamount = []
						total_tsratesum_detail = 0.0
						total_amountall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto],centercode=centercode, routecode = routecode).distinct()
						for i in total_amountall:
							total_listamount.append(i.tsrate)
							total_tsratesum_detail = round(sum(total_listamount),2)
						total_listcomm = []
						total_commsum_detail = 0.0
						total_commall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto],centercode=centercode, routecode = routecode).distinct()
						for i in total_commall:
							total_listcomm.append(i.comm)
							total_commsum_detail = round(sum(total_listcomm),2)
						total_listpel = []
						total_pelsum_detail = 0.0
						total_pelall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto],centercode=centercode, routecode = routecode).distinct()
						for i in total_pelall:
							total_listpel.append(i.pel)
							total_pelsum_detail = round(sum(total_listpel),2)
						total_listtotal = []
						total_totalsum_detail = 0.0
						total_totalall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto],centercode=centercode, routecode = routecode).distinct()
						for i in total_totalall:
							total_listtotal.append(i.net)
							total_totalsum_detail = round(sum(total_listtotal),2)
				return render(request,'daily_data.html',locals())
			else:
				return render(request,'index.html',locals())
		else:
			route = Route.objects.all()
			center = Center.objects.all()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day =1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			# return HttpResponse(end_of_m)
			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					routecode =  request.POST["routecode"]
					centercode = request.POST["centercode"]



					if routecode == 'all' and centercode == 'all':
						dc =rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_listkgs = []
						total_kgssum_detail = 0
						total_kgsall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_kgsall:
							total_listkgs.append(i.qty)
							total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs = []
						total_ltrssum_detail = 0
						total_ltrsall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_ltrsall:
							total_listltrs.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listltrs),4)
						total_listfat = []
						total_fatsum_detail = 0
						total_fatsum1_detail=0
						total_fatall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_fatallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_fatall:
							total_listfat.append(i.fat)
							total_fatsum1_detail = round(sum(total_listfat),3)
							total_fatsum_detail = total_fatsum1_detail/total_fatallcount
						total_listsnf = []
						total_snfsum_detail = 0
						total_snfsum1_detail = 0
						total_snfall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_snfallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_snfall:
							total_listsnf.append(i.snf)
							total_snfsum1_detail = round(sum(total_listsnf),2)
							total_snfsum_detail = total_snfsum1_detail/total_snfallcount
						total_listrate = []
						total_ratesum_detail = 0
						total_ratesum_detail1 = 0
						total_rateall =rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_rateallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_rateall:
							total_listrate.append(i.ltrrate)
							total_ratesum_detail1 = round(sum(total_listrate),2)
							total_ratesum_detail = total_ratesum_detail1/total_rateallcount
						total_listamount = []
						total_tsratesum_detail = 0.0
						total_tsratesum_detail1 = 0.0
						total_amountall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_tsrateallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_amountall:
							#print(2.3)
							total_listamount.append(i.tsrate)
							#print("@789",total_listamount)
							total_tsratesum_detail = round(sum(total_listamount),2)
							total_tsratesum_detail = total_tsratesum_detail1/total_tsrateallcount
							#print(5.5)
						total_listcomm = []
						total_commsum_detail = 0.0
						total_commsum_detail1 = 0.0
						total_commall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_commallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_commall:
							total_listcomm.append(i.comm)
							total_commsum_detail1 = round(sum(total_listcomm),2)
							total_commsum_detail = total_commsum_detail1/total_commallcount
						total_listpel = []
						total_pelsum_detail = 0.0
						total_pelall =  rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_pelall:
							total_listpel.append(i.pel)
							total_pelsum_detail = round(sum(total_listpel),2)
						total_listtotal = []
						total_totalsum_detail = 0.0
						total_totalall =  rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_totalall:
							total_listtotal.append(i.net)
							total_totalsum_detail = round(sum(total_listtotal),2)
					elif routecode == 'all' and centercode != 'all':
						dc =rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_listkgs = []
						total_kgssum_detail = 0
						total_kgsall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_kgsall:
							total_listkgs.append(i.qty)
							total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs = []
						total_ltrssum_detail = 0
						total_ltrsall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_ltrsall:
							total_listltrs.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listltrs),4)
						total_listfat = []
						total_fatsum_detail = 0
						total_fatsum1_detail=0
						total_fatall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_fatallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_fatall:
							total_listfat.append(i.fat)
							total_fatsum1_detail = round(sum(total_listfat),3)
							total_fatsum_detail = total_fatsum1_detail/total_fatallcount
						total_listsnf = []
						total_snfsum_detail = 0
						total_snfsum1_detail = 0
						total_snfall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_snfallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_snfall:
							total_listsnf.append(i.snf)
							total_snfsum1_detail = round(sum(total_listsnf),2)
							total_snfsum_detail = total_snfsum1_detail/total_snfallcount
						total_listrate = []
						total_ratesum_detail = 0
						total_ratesum_detail1 = 0
						total_rateall =rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_rateallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_rateall:
							total_listrate.append(i.ltrrate)
							total_ratesum_detail1 = round(sum(total_listrate),2)
							total_ratesum_detail = total_ratesum_detail1/total_rateallcount
						total_listamount = []
						total_tsratesum_detail = 0.0
						total_tsratesum_detail1 = 0.0
						total_amountall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_tsrateallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_amountall:
							#print(2.3)
							total_listamount.append(i.tsrate)
							#print("@789",total_listamount)
							total_tsratesum_detail = round(sum(total_listamount),2)
							total_tsratesum_detail = total_tsratesum_detail1/total_tsrateallcount
							#print(5.5)
						total_listcomm = []
						total_commsum_detail = 0.0
						total_commsum_detail1 = 0.0
						total_commall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_commallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_commall:
							total_listcomm.append(i.comm)
							total_commsum_detail1 = round(sum(total_listcomm),2)
							total_commsum_detail = total_commsum_detail1/total_commallcount
						total_listpel = []
						total_pelsum_detail = 0.0
						total_pelall =  rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_pelall:
							total_listpel.append(i.pel)
							total_pelsum_detail = round(sum(total_listpel),2)
						total_listtotal = []
						total_totalsum_detail = 0.0
						total_totalall =  rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_totalall:
							total_listtotal.append(i.net)
							total_totalsum_detail = round(sum(total_listtotal),2)
					elif centercode == 'all' and routecode != 'all':
						dc = rpt_dailydata.objects.filter(date__range=[datefrom, dateto],routecode = routecode).distinct()
						total_listkgs = []
						total_kgssum_detail = 0
						total_kgsall = rpt_dailydata.objects.filter(date__range=[datefrom, dateto],routecode = routecode).distinct()
						for i in total_kgsall:
							total_listkgs.append(i.qty)
							total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs = []
						total_ltrssum_detail = 0
						total_ltrsall = rpt_dailydata.objects.filter(date__range=[datefrom, dateto],routecode = routecode).distinct()
						for i in total_ltrsall:
							total_listltrs.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listltrs),4)
						total_listfat = []
						total_fatsum_detail = 0
						total_fatall = rpt_dailydata.objects.filter(date__range=[datefrom, dateto],routecode = routecode).distinct()
						for i in total_fatall:
							total_listfat.append(i.fat)
							total_fatsum_detail = round(sum(total_listfat),3)
						total_listsnf = []
						total_snfsum_detail = 0
						total_snfall = rpt_dailydata.objects.filter(date__range=[datefrom, dateto],routecode = routecode).distinct()
						for i in total_snfall:
							total_listsnf.append(i.snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
						total_listrate = []
						total_ratesum_detail = 0
						total_rateall =rpt_dailydata.objects.filter(date__range=[datefrom, dateto],routecode = routecode).distinct()
						for i in total_rateall:
							total_listrate.append(i.ltrrate)
							total_ratesum_detail = round(sum(total_listrate),2)
						total_listamount = []
						total_tsratesum_detail = 0.0
						total_amountall = rpt_dailydata.objects.filter(date__range=[datefrom, dateto],routecode = routecode).distinct()
						for i in total_amountall:
							total_listamount.append(i.tsrate)
							total_tsratesum_detail = round(sum(total_listamount),2)
						total_listcomm = []
						total_commsum_detail = 0.0
						total_commall = rpt_dailydata.objects.filter(date__range=[datefrom, dateto],routecode = routecode).distinct()
						for i in total_commall:
							total_listcomm.append(i.comm)
							total_commsum_detail = round(sum(total_listcomm),2)
						total_listpel = []
						total_pelsum_detail = 0.0
						total_pelall = rpt_dailydata.objects.filter(date__range=[datefrom, dateto],routecode = routecode).distinct()
						for i in total_pelall:
							total_listpel.append(i.pel)
							total_pelsum_detail = round(sum(total_listpel),2)
						total_listtotal = []
						total_totalsum_detail = 0.0
						total_totalall = rpt_dailydata.objects.filter(date__range=[datefrom, dateto],routecode = routecode).distinct()
						for i in total_totalall:
							total_listtotal.append(i.net)
							total_totalsum_detail = round(sum(total_listtotal),2)
					else:
						dc =rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_listkgs = []
						total_kgssum_detail = 0
						total_kgsall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_kgsall:
							total_listkgs.append(i.qty)
							total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs = []
						total_ltrssum_detail = 0
						total_ltrsall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_ltrsall:
							total_listltrs.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listltrs),4)
						total_listfat = []
						total_fatsum_detail = 0
						total_fatsum1_detail=0
						total_fatall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_fatallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_fatall:
							total_listfat.append(i.fat)
							total_fatsum1_detail = round(sum(total_listfat),3)
							total_fatsum_detail = total_fatsum1_detail/total_fatallcount
						total_listsnf = []
						total_snfsum_detail = 0
						total_snfsum1_detail = 0
						total_snfall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_snfallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_snfall:
							total_listsnf.append(i.snf)
							total_snfsum1_detail = round(sum(total_listsnf),2)
							total_snfsum_detail = total_snfsum1_detail/total_snfallcount
						total_listrate = []
						total_ratesum_detail = 0
						total_ratesum_detail1 = 0
						total_rateall =rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_rateallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_rateall:
							total_listrate.append(i.ltrrate)
							total_ratesum_detail1 = round(sum(total_listrate),2)
							total_ratesum_detail = total_ratesum_detail1/total_rateallcount
						total_listamount = []
						total_tsratesum_detail = 0.0
						total_tsratesum_detail1 = 0.0
						total_amountall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_tsrateallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_amountall:
							#print(2.3)
							total_listamount.append(i.tsrate)
							#print("@789",total_listamount)
							total_tsratesum_detail = round(sum(total_listamount),2)
							total_tsratesum_detail = total_tsratesum_detail1/total_tsrateallcount
							#print(5.5)
						total_listcomm = []
						total_commsum_detail = 0.0
						total_commsum_detail1 = 0.0
						total_commall = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						total_commallcount = rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct().count()
						for i in total_commall:
							total_listcomm.append(i.comm)
							total_commsum_detail1 = round(sum(total_listcomm),2)
							total_commsum_detail = total_commsum_detail1/total_commallcount
						total_listpel = []
						total_pelsum_detail = 0.0
						total_pelall =  rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_pelall:
							total_listpel.append(i.pel)
							total_pelsum_detail = round(sum(total_listpel),2)
						total_listtotal = []
						total_totalsum_detail = 0.0
						total_totalall =  rpt_dailydata.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
						for i in total_totalall:
							total_listtotal.append(i.net)
							total_totalsum_detail = round(sum(total_listtotal),2)
				return render(request,'daily_data.html',locals())
			else:
				return render(request,'index.html',locals())

	except Exception as err:

		messages.error(request,err)
		return render(request,'daily_data.html',locals())
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Charan
import datetime
from django.db import connection
import mysql.connector
from mysql.connector import Error
def milkbill1(request):
	try: 
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			route = Route.objects.using(brch).all()
			center = Center.objects.using(brch).all()
			daily_data = Daily_data.objects.using(brch).all().distinct()
			milkbill = Daily_data.objects.using(brch).all().values(('centercode')).distinct().order_by(('centercode'))
			branch = Branch.objects.using(brch).all()
			today = date.today()
		   
			#cursor = connection.cursor()
			t_m = datetime.datetime.now().month
			#t_y = datetime.datetime.now().year
			start_of_m = today.replace(day =1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			# return HttpResponse(end_of_m)

			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					routecode =  request.POST["routecode"]
					#centercode = request.POST["centercode"]
					request.session['firstdate'] = request.POST["datefrom"]
					request.session['lastdate'] = request.POST["dateto"]
					request.session['getroute'] = request.POST["routecode"]


					
						
				return render(request,'milkbill.html',locals())
			else:
				return render(request,'index.html',locals())

	except Exception as err:

		messages.error(request,err)
		return render(request,'milkbill.html',locals())

import datetime
from django.db import connection
import mysql.connector
from mysql.connector import Error
def milkbill(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			route = Route.objects.using(brch).all()
			center = Center.objects.using(brch).all()
			daily_data = Daily_data.objects.using(brch).all().distinct()
			milkbill = Daily_data.objects.using(brch).all().values(('centercode')).distinct().order_by(('centercode'))
			branch = Branch.objects.using(brch).all()
			today = date.today()
		   
			#cursor = connection.cursor()
			t_m = datetime.datetime.now().month
			#t_y = datetime.datetime.now().year
			start_of_m = today.replace(day =1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			# return HttpResponse(end_of_m)

			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					routecode =  request.POST["routecode"]
					#centercode = request.POST["centercode"]
					request.session['firstdate'] = request.POST["datefrom"]
					request.session['lastdate'] = request.POST["dateto"]
					request.session['getroute'] = request.POST["routecode"]

					

					centerlist = "select id id,centercode centercode from school_daily_data where date between '%s' and '%s' group by centercode"%(str(datefrom),str(dateto))
					centerlistbyr = "select id id,centercode centercode from school_daily_data where date between '%s' and '%s' and routecode = '%s' group by centercode"%(str(datefrom),str(dateto),str(routecode))				
					if routecode == 'all' :
						dk = RPT_Milkbillvoucher.objects.using(brch).raw(centerlist)
					else :
						dk = RPT_Milkbillvoucher.objects.using(brch).raw(centerlistbyr)
					print(dk)

					if routecode == 'all':
						cursor10 = connection.cursor()
						kkk = "select centercode centercode from %s.school_daily_data where date between '%s' and '%s' group by centercode limit 1 "%(str(brch),str(datefrom),str(dateto))
						print('@5875',kkk)
						cursor10.execute(kkk)
						kkkk = cursor10.fetchall()
						for row in kkkk:
							center = row[0]
							print(center)
					else:
						cursor10 = connection.cursor()
						kkk = "select centercode centercode from %s.school_daily_data where date between '%s' and '%s' and routecode = '%s' group by centercode limit 1 "%(str(brch),str(datefrom),str(dateto),str(routecode))
						print('@5876',kkk)
						cursor10.execute(kkk)
					
						kkkk = cursor10.fetchall()
						for row in kkkk:
							center = row[0]
							print(center)
					
					cursor19 = connection.cursor()

					branch14 = " select count(*),D.id id,D.date date,D.shift shift,D.milk_type milk_type,D.branch branch,D.centercode centercode,D.qty kgs,D.ltrs ltrs,D.amount amount,D.ltrrate ltrrate,D.fat fat,D.snf snf,D.comm comm,D.pel pel,D.net net from %s.school_daily_data D  where D.date between '%s' and '%s'  and D.centercode = '%s' order by date,shift "%(str(brch),str(datefrom),str(dateto),str(center))
							
					print('@4021',branch14)
					cursor19.execute(branch14)
					datacount = cursor19.fetchall()
					for row in datacount:
						valuescount=row[0]
					

					calralp = " select D.id id,D.date date,D.shift shift,D.milk_type milk_type,D.branch branch,D.centercode centercode,D.qty kgs,D.ltrs ltrs,D.amount amount,D.ltrrate ltrrate,D.fat fat,D.snf snf,D.comm comm,D.pel pel,D.net net from %s.school_daily_data D  where D.date between '%s' and '%s'  and D.centercode = '%s' order by date,shift "%(str(brch),str(datefrom),str(dateto),str(center))
					print(calralp)
					dc= RPT_Milkbillvoucher.objects.using(brch).raw(calralp)
					print('@3952',dc)
					total_listkgs = []
					total_kgssum_detail = 0
					total_kgsall = RPT_Milkbillvoucher.objects.using(brch).raw(calralp)
					for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_kgssum_detail = round(sum(total_listkgs),2)
					total_listltrs = []
					total_ltrssum_detail = 0
					total_ltrsall = RPT_Milkbillvoucher.objects.using(brch).raw(calralp)
					for i in total_ltrsall:
						total_listltrs.append(i.ltrs)
						total_ltrssum_detail = round(sum(total_listltrs),4)
					total_listfat = []
					total_fatsum_detail = 0
					total_fatsum_detail1 = 0
					total_fatall = RPT_Milkbillvoucher.objects.using(brch).raw(calralp)
					#total_fatall1 = RPT_Milkbillvoucher.objects.using(brch).raw(calralp).count()
					for i in total_fatall:
						total_listfat.append(i.fat)
						total_fatsum_detail1 = round(sum(total_listfat),3)
						total_fatsum_detail = total_fatsum_detail1/valuescount
					total_listsnf = []
					total_snfsum_detail = 0
					total_snfsum_detail1 = 0
					total_snfall = RPT_Milkbillvoucher.objects.using(brch).raw(calralp)
					#total_snfall1 = RPT_Milkbillvoucher.objects.using(brch).raw(calralp).count()
					for i in total_snfall:
						total_listsnf.append(i.snf)
						total_snfsum_detail1 = round(sum(total_listsnf),2)
						total_snfsum_detail = total_snfsum_detail1/valuescount
					total_listrate = []
					total_ratesum_detail = 0
					total_ratesum_detail1 = 0
					total_rateall =RPT_Milkbillvoucher.objects.using(brch).raw(calralp)
					#total_rateall1 =RPT_Milkbillvoucher.objects.using(brch).raw(calralp).count()
					for i in total_rateall:
						total_listrate.append(i.ltrrate)
						total_ratesum_detail1 = round(sum(total_listrate),2)
						total_ratesum_detail = total_ratesum_detail1/valuescount
					

					total_listamount = []
					total_amountsum_detail = 0.0
					total_amountall = RPT_Milkbillvoucher.objects.using(brch).raw(calralp)
					for i in total_amountall:
						total_listamount.append(i.amount)
						total_amountsum_detail = round(sum(total_listamount),2)
					total_listcomm = []
					total_commsum_detail = 0.0
					total_commall = RPT_Milkbillvoucher.objects.using(brch).raw(calralp)
					for i in total_commall:
						total_listcomm.append(i.comm)
						total_commsum_detail = round(sum(total_listcomm),2)
					total_listpel = []
					total_pelsum_detail = 0.0
					total_pelall = RPT_Milkbillvoucher.objects.using(brch).raw(calralp)
					for i in total_pelall:
						total_listpel.append(i.pel)
						total_pelsum_detail = round(sum(total_listpel),2)
					total_listtotal = []
					total_totalsum_detail = 0.0
					total_totalall = RPT_Milkbillvoucher.objects.using(brch).raw(calralp)
					for i in total_totalall:
						total_listtotal.append(i.net)
						total_totalsum_detail = round(sum(total_listtotal),2)

					center5= RPT_Milkbillvoucher.objects.all().values('centercode').distinct().order_by('centercode')[:1]
					cursor9 = connection.cursor()

					branch4 = "select address,code,pin,branch from %s.school_daily_data D,school_branch B  where D.branch=B.code "%(str(brch))
							
					print('@4021',branch4)
					cursor9.execute(branch4)
					branchdata = cursor9.fetchall()
					for row in branchdata:
						address=row[0]
						name = row[1]
						pin = row[2]

					cursor12 = connection.cursor()
					addition = "select A.id,A.date,sum(A.cartage),sum(A.cattlefeed),(A.centercode),sum(A.autofine),sum(A.stores),sum(A.aarrears),sum(A.medicine),sum(A.aothers),sum(A.stationary),sum(A.commission),sum(A.emtcharges),sum(A.seed),sum(A.insurance),sum(A.rarrears),sum(A.rothers),(A.remarks) from %s.school_Additions A  where  A.date between  '%s' and '%s'  and A.centercode = '%s'"%(str(brch),str(datefrom),str(dateto),str(center))
					print('@4033',addition)
					cursor12.execute(addition)
					cartage = 0.0
					cattlefeed = 0.0
					autofine =0.0
					stores = 0.0
					aarrears = 0.0
					medicine =0.0
					aothers = 0.0
					stationary = 0.0
					commission = 0.0
					emtcharges = 0.0
					seed = 0.0
					insurance =0.0
					rarrears = 0.0
					rothers = 0.0
					additiondata = cursor12.fetchall()
					for row in additiondata:
						date1=row[1]
						cartage = row[2]
						cattlefeed = row[3]
						centercode=row[4]
						autofine=row[5]
						stores = row[6]
						aarrears= row[7]
						medicine=row[8]
						aothers=row[9]
						stationary= row[10]
						commission=row[11]
						emtcharges=row[12]
						seed= row[13]
						insurance = row[14]
						rarrears= row[15]
						rothers = row[16]
						remarks = row[17]


					cursor5 = connection.cursor()
					centerdetails = "select centre_code,name,C.route_number,R.route_name,agent_name,mobile,bankno,C.branch,bankname,ifsc from %s.school_center C  join %s.school_daily_data D  on D.centercode=C.centre_code and D.centercode = '%s' join %s.school_route R on R.route_number = C.route_number"%(str(brch),str(brch),str(center),str(brch)) 
					print('@4074',centerdetails)
					cursor5.execute(centerdetails)
					centerdata = cursor5.fetchall()
					for row in centerdata:
						centre_code=row[0]
						centername = row[1]
						route_number = row[2]
						routename = row[3]
						agent_name = row[4]
						mobile = row[5]
						bankno = row[6]
						bank_branch = row[7]
						bankname = row[8]
						ifsc = row[9]

					#cursor6 = connection.cursor()
				
					cursor6 = connection.cursor()
					loandetails = "select L.idate,sum(L.installment_amt),sum(L.interest_amt) from %s.school_loanbillsdata L  where L.idate between '%s' and '%s' and L.centercode = '%s' group by L.centercode"%(str(brch),str(datefrom),str(dateto),str(center))
				
					print('@4093',loandetails)
					cursor6.execute(loandetails)
					loanupdate = cursor6.fetchall()
					instamt2=0.0
					instamt=0.0
					for row in loanupdate :
						installment_amt = row[1]
						interest_amt = row[2]
						instamt=installment_amt
						if instamt is not None:
							instamt2 = instamt
							print("@4111 instamt2",instamt2)
						else :
							instamt2=0.0
							print("@4114 instamt2",instamt2)
					

			


					total_additions = round((cartage + autofine +aarrears+ aothers +commission),3)
					print('@4119',total_additions)
					print('@4120-1',cattlefeed)
					print('@4120-4',stores)
					print('@4120-3',stationary)
					print('@4120-4',emtcharges)
					print('@4120-5',seed)
					print('@4120-6',rothers)
					print('@4120-7',instamt2)
					

					total_recoveries = round((cattlefeed + stores + stationary+medicine+emtcharges+insurance+seed+ rarrears+rothers +instamt2),3)
					print('@4122',total_additions)
					total_totalsum1 = round((total_totalsum_detail + total_additions),3)
					total_netvalue = round((total_totalsum1 - total_recoveries),2)
					print('@4115',total_netvalue)
					total_milkvalue = round((total_totalsum1/total_ltrssum_detail),2)
					print('@4117',total_milkvalue) 
					#total_rateltr = round(((total_ltrssum_detail)/total_amountcount_detail),2)

					print(2.1)
					print(dateto)

					cursor2 = connection.cursor()
					dateget = "select datediff('%s','%s') as days,'%s','%s' "%(str(dateto),str(datefrom),str(datefrom),str(dateto))
					print(dateget)
					cursor2.execute(dateget)
					dateset = cursor2.fetchall()
					for row in dateset :
						datefrom1 = row[0]
						datefirst = row[1]
						datelast = row[2]
						datefirst =datetime.datetime.strptime(datefirst, '%Y-%m-%d').strftime('%d-%m-%Y')
						print(datefirst)
						datelast = datetime.datetime.strptime(datelast, '%Y-%m-%d').strftime('%d-%m-%Y')	
						print(datelast)
					#	dateto1 = row[1]
					#	datediff = row[2]
						print(datefirst)
						print(datelast)
						print(datefrom1)
			#			print(dateto1)
			#			print(datediff)
					
					noofdays = datefrom1

					print(5)
					s= noofdays + 1
					print(5.1)
					#list_of_nums = map(int, re.findall('\d+', s))
					#k = int(filter(str.isdigit, s))
					print('@4125',s)
					total_rateltr = round(((total_ltrssum_detail)/s),2)
						
				return render(request,'milkbill1.html',locals())
			else:
				return render(request,'index.html',locals())
		
						
				

	except Exception as err:
		if search("float division by zero",str(err)):
			messages.error(request,'No  Data found')
		elif search("[Errno 5] Input/output error",str(err)):
			messages.error(request,'Please contact your system Administrator :  +91 7075696768')
		else:		
			messages.error(request,err)

		
		return render(request,'milkbill.html',locals())
def milkbillchange(request,slug3):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			route = Route.objects.using(brch).all()
			center = Center.objects.using(brch).all().distinct()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			# return HttpResponse(end_of_m)
			if request.session.has_key('name'):

				datefrom = request.session['firstdate']
				dateto = request.session['lastdate']
				routecode = request.session['getroute']
				
				centerlist = "select id id,centercode centercode from school_daily_data where date between '%s' and '%s' group by centercode"%(str(datefrom),str(dateto))
				centerlistbyr = "select id id,centercode centercode from school_daily_data where date between '%s' and '%s' and routecode = '%s' group by centercode"%(str(datefrom),str(dateto),str(routecode))
				if routecode  == 'all' :
					dk = RPT_Milkbillvoucher.objects.using(brch).raw(centerlist)
				else:
					dk = RPT_Milkbillvoucher.objects.using(brch).raw(centerlistbyr)
				#dc = RPT_Milkbillvoucher.objects.latest('centercode')

				if routecode == 'all':	
					cursor14 = connection.cursor()

					branch14 = "select count(*),D.id id,D.date date,D.shift shift,D.milk_type milk_type,D.branch branch,D.centercode centercode,D.qty kgs,D.ltrs ltrs,D.amount amount,D.ltrrate ltrrate,D.fat fat,D.snf snf,D.comm comm,D.pel pel,D.net net  from %s.school_daily_data D where D.date between '%s' and '%s' and  D.centercode = '%s' order by date,shift"%(str(brch),str(datefrom),str(dateto),str(slug3))  
							
					print(branch14)
					cursor14.execute(branch14)
					datavalues = cursor14.fetchall()
					for row in datavalues:
						valuecount=row[0]
						
				else:
					cursor14 = connection.cursor()

					branch14 = "select count(*),D.id id,D.date date,D.shift shift,D.milk_type milk_type,D.branch branch,D.centercode centercode,D.qty kgs,D.ltrs ltrs,D.amount amount,D.ltrrate ltrrate,D.fat fat,D.snf snf,D.comm comm,D.pel pel,D.net net  from %s.school_daily_data D where D.date between '%s' and '%s' and  D.centercode = '%s' and D.routecode = '%s' order by date,shift"%(str(brch),str(datefrom),str(dateto),str(slug3),str(routecode))  
							
					print(branch14)
					cursor14.execute(branch14)
					datavalues = cursor14.fetchall()
					for row in datavalues:
						valuecount=row[0]
						
				if routecode == 'all':
					centerrequest = "select D.id id,D.date date,D.shift shift,D.milk_type milk_type,D.branch branch,D.centercode centercode,D.qty kgs,D.ltrs ltrs,D.amount amount,D.ltrrate ltrrate,D.fat fat,D.snf snf,D.comm comm,D.pel pel,D.net net  from school_daily_data D where D.date between '%s' and '%s' and  D.centercode = '%s' order by date,shift"%(str(datefrom),str(dateto),str(slug3))
				else :
					centerrequest = "select D.id id,D.date date,D.shift shift,D.milk_type milk_type,D.branch branch,D.centercode centercode,D.qty kgs,D.ltrs ltrs,D.amount amount,D.ltrrate ltrrate,D.fat fat,D.snf snf,D.comm comm,D.pel pel,D.net net  from school_daily_data D where D.date between '%s' and '%s' and  D.centercode = '%s' and D.routecode = '%s' order by date,shift"%(str(datefrom),str(dateto),str(slug3),str(routecode))

				dc= RPT_Milkbillvoucher.objects.using(brch).raw(centerrequest)
				total_listkgs = []
				total_kgssum_detail = 0
				total_kgsall = RPT_Milkbillvoucher.objects.using(brch).raw(centerrequest)
				for i in total_kgsall:
					total_listkgs.append(i.kgs)
					total_kgssum_detail = round(sum(total_listkgs),2)
				total_listltrs = []
				total_ltrssum_detail = 0
				total_ltrsall = RPT_Milkbillvoucher.objects.using(brch).raw(centerrequest)
				for i in total_ltrsall:
					total_listltrs.append(i.ltrs)
					total_ltrssum_detail = round(sum(total_listltrs),4)
				total_listfat = []
				total_fatsum_detail = 0
				total_fatsum_detail1 = 0
				total_fatall = RPT_Milkbillvoucher.objects.using(brch).raw(centerrequest)
				#total_fatall1 = RPT_Milkbillvoucher.objects.using(brch).raw(centerrequest).count()
				for i in total_fatall:
					total_listfat.append(i.fat)
					total_fatsum_detail1 = round(sum(total_listfat),3)
					total_fatsum_detail = total_fatsum_detail1/valuecount
				total_listsnf = []
				total_snfsum_detail = 0
				total_snfsum_detail1 = 0
				total_snfall = RPT_Milkbillvoucher.objects.using(brch).raw(centerrequest)
				#total_snfall1 = RPT_Milkbillvoucher.objects.using(brch).raw(centerrequest).count()
				for i in total_snfall:
					total_listsnf.append(i.snf)
					total_snfsum_detail1 = round(sum(total_listsnf),2)
					total_snfsum_detail = total_snfsum_detail1/valuecount
				total_listrate = []
				total_ratesum_detail = 0
				total_ratesum_detail1 = 0
				total_rateall =RPT_Milkbillvoucher.objects.using(brch).raw(centerrequest)
				#total_rateall1 =RPT_Milkbillvoucher.objects.using(brch).raw(centerrequest).count()
				for i in total_rateall:
					total_listrate.append(i.ltrrate)
					total_ratesum_detail1 = round(sum(total_listrate),2)
					total_ratesum_detail = total_ratesum_detail1/valuecount
				#count = RPT_Milkbillvoucher.objects.filter(centercode = center).count()
				total_listamount = []
				total_amountsum_detail = 0.0
				total_amountall = RPT_Milkbillvoucher.objects.using(brch).raw(centerrequest)
				for i in total_amountall:
					total_listamount.append(i.amount)
					total_amountsum_detail = round(sum(total_listamount),2)
				total_listcomm = []
				total_commsum_detail = 0.0
				total_commall = RPT_Milkbillvoucher.objects.using(brch).raw(centerrequest)
				for i in total_commall:
					total_listcomm.append(i.comm)
					total_commsum_detail = round(sum(total_listcomm),2)
				total_listpel = []
				total_pelsum_detail = 0.0
				total_pelall = RPT_Milkbillvoucher.objects.using(brch).raw(centerrequest)
				for i in total_pelall:
					total_listpel.append(i.pel)
					total_pelsum_detail = round(sum(total_listpel),2)
				total_listtotal = []
				total_totalsum_detail = 0.0
				total_totalall = RPT_Milkbillvoucher.objects.using(brch).raw(centerrequest)
				for i in total_totalall:
					total_listtotal.append(i.net)
					total_totalsum_detail = round(sum(total_listtotal),2)

				
				
				cursor4 = connection.cursor()

				branch4 = "select B.address,B.code,B.pin,D.branch from school_branch B,%s.school_daily_data D where D.branch=B.code and centercode ='%s' "%(str(brch),str(slug3))  
						
				print(branch4)
				cursor4.execute(branch4)
				branchdata = cursor4.fetchall()
				for row in branchdata:
					address=row[0]
					name = row[1] 
					pin = row[2]

				cursor5 = connection.cursor()
				 
				centerdetails = "select centre_code,name,C.route_number,R.route_name,agent_name,mobile,bankno,C.branch,bankname,ifsc from %s.school_Center C join %s.school_daily_data D on D.centercode=C.centre_code  and D.centercode='%s' join %s.school_route R on R.route_number = C.route_number "%(str(brch),str(brch),str(slug3),str(brch)) 
				print(centerdetails)
				cursor5.execute(centerdetails)
				centerdata = cursor5.fetchall()
				for row in centerdata:
					centre_code=row[0]
					centername = row[1]
					route_number = row[2]
					routename = row[3]
					agent_name = row[4]
					mobile = row[5]
					bankno = row[6]
					bank_branch = row[7]
					bankname = row[8]
					ifsc = row[9]

				#cursor6 = connection.cursor()
				cursor12 = connection.cursor()

				addition = "select A.id,A.date,sum(A.cartage),sum(A.cattlefeed),(A.centercode),sum(autofine),sum(stores),sum(aarrears),sum(medicine),sum(aothers),sum(stationary),sum(A.commission),sum(emtcharges),sum(seed),sum(insurance),sum(rarrears),sum(rothers) from %s.school_Additions A  where A.centercode ='%s' and A.date between '%s' and '%s'  group by A.centercode "%(str(brch),str(slug3),str(datefrom),str(dateto))
						
				print(addition)
				cursor12.execute(addition)
				cartage = 0.0
				cattlefeed = 0.0
				autofine =0.0
				stores = 0.0
				aarrears = 0.0
				medicine = 0.0
				aothers = 0.0
				stationary = 0.0
				commission = 0.0
				emtcharges = 0.0
				seed = 0.0
				insurance =0.0
				rarrears = 0.0
				rothers = 0.0
				additiondata = cursor12.fetchall()
				for row in additiondata:
					date1=row[1]
					cartage = row[2]
					cattlefeed = row[3]
					centercode=row[4]
					autofine=row[5]
					stores = row[6]
					aarrears= row[7]
					medicine=row[8]
					aothers=row[9]
					stationary= row[10]
					commission=row[11]
					emtcharges=row[12]
					seed= row[13]
					insurance = row[14]
					rarrears= row[15]
					rothers = row[16]
					#remarks = row[17]


				

				cursor6 = connection.cursor()
				loandetails = "select L.idate,sum(L.installment_amt),sum(L.interest_amt) from %s.school_loanbillsdata L, where L.centercode='%s'  and L.idate between '%s' and '%s' group by L.centercode"%(str(brch),str(slug3),str(datefrom),str(dateto))  		
				print(loandetails)
				cursor6.execute(loandetails)
				loanupdate = cursor6.fetchall()
				instamt2=0.0
				print("@2856 instamt2",instamt2)
				for row in loanupdate :
					installment_amt = row[1]
					interest_amt = row[2]
					instamt=installment_amt
					print("@4329 instamt",instamt)
					if instamt is not None:
						instamt2 = instamt
						print("@4332 instamt2",instamt2)
					elif instamt is null or NULL :
						instamt2 = 0.0
						print("@4334 instamt2" ,instamt2)
					else :
						instamt2=0.0
						print("@4335 instamt2",instamt2)
					
				

				cursor2 = connection.cursor()
				dateget = "select datediff('%s','%s') as days,'%s','%s' "%(str(dateto),str(datefrom),str(datefrom),str(dateto))
				print(dateget)
				cursor2.execute(dateget)
				dateset = cursor2.fetchall()
				for row in dateset :
					datefrom1 = row[0]
					datefirst = row[1]
					datelast = row[2]
					datefirst =datetime.datetime.strptime(datefirst, '%Y-%m-%d').strftime('%d-%m-%Y')
					print(datefirst)
					datelast = datetime.datetime.strptime(datelast, '%Y-%m-%d').strftime('%d-%m-%Y')	
					print(datelast)
					print(datefrom1)
					print(datefirst)
					print(datelast)
				
				noofdays = datefrom1
				

				s= noofdays + 1
					#list_of_nums = map(int, re.findall('\d+', s))
					#k = int(filter(str.isdigit, s))
				print(s)
				total_rateltr = round(((total_ltrssum_detail)/s),2)
				
				
				#total_rateltr = round(((total_ltrssum_detail)/total_amountcount_detail),2)
				#total_rateltr = round(((total_ltrssum_detail)/noofdays),2)
				total_additions = round((cartage + autofine +aarrears+ aothers +commission),3)
				total_recoveries = round((cattlefeed + stores + stationary+medicine+emtcharges+insurance+seed+ rarrears+rothers +instamt2),3)
			
				total_totalsum1 = round((total_totalsum_detail + total_additions),3)
				total_netvalue = round((total_totalsum1 - total_recoveries),2)
				print(total_netvalue)
				total_milkvalue = round((total_totalsum1/total_ltrssum_detail),2)
				print(total_milkvalue) 
					
				return render(request,'milkbill2.html',locals())
			else:
				return render(request,'index.html',locals())
		
	except Exception as err:
		if search("float division by zero",str(err)):
			messages.error(request,'No  Data found')
		elif search("[Errno 5] Input/output error",str(err)):
			messages.error(request,'Please contact your system Administrator :  +91 9949124471')
		else:		
			messages.error(request,err)
	return render(request,'milkbill2.html',locals())
# Module -Reports - Transcations #4 - Displaying the daywise report- daywise.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ karthik
def daywise(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			route = Route.objects.using(brch).all()
			center = Center.objects.using(brch).all()
			milk =Milktype.objects.using(brch).all()
			#data = Daily_data.objects.all()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day =1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			# return HttpResponse(end_of_m)
			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					shift =  request.POST["dayshift"]
					milk_type = request.POST["milk_type"]

					#cursor1 = connection.cursor()
					#DataDel = "delete from School_RPT_Daywisesreport"
					#cursor1.execute(DataDel)
					#cursor = connection.cursor()
					#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
					#DataInsert = "insert into School_RPT_Daywisesreport (branch,date,shift,routecode,centercode,milk_type,fat,snf,sqty,sltrs,afat,asnf,kfat,ksnf,gamount) select branch,date,shift,routecode,centercode,milk_type,round(fat,2),round(snf,2), round(sum(qty),2),round(sum(ltrs),3), round(avg(fat),3),round(avg(snf),3),round((sum(qty)*avg(fat))/100),round((sum(qty)*avg(snf))/100), round(sum(amount),2)  from school_daily_data where date between '%s' and '%s' group by date,shift,milk_type"%(str(datefrom),str(dateto))
					#cursor1.execute(DataInsert)       
					#cursor.execute(DataInsert)

					first = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from %s.school_daily_data where date between '%s' and '%s' group by date,shift,milk_type"%(str(brch),str(datefrom),str(dateto))
					second = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from %s.school_daily_data  where date between '%s' and '%s' and milk_type='%s' group by date,shift,milk_type"%(str(brch),str(datefrom),str(dateto),str(milk_type))
					third = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from %s.school_daily_data  where date between '%s' and '%s' and shift = '%s' group by date,shift,milk_type"%(str(brch),str(datefrom),str(dateto),str(shift))
					fourth = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from %s.school_daily_data  where date between '%s' and '%s' and milk_type= '%s' and shift = '%s' group by date,shift,milk_type"%(str(brch),str(datefrom),str(dateto),str(milk_type),str(shift))
					#branchdata = cursor.fetchall() 
					if shift == 'all' and milk_type == 'all':
						dc = RPT_Daywisesreport.objects.using(brch).raw(first)
						total_listkgs = []
						total_kgsall = RPT_Daywisesreport.objects.raw(first)
						for i in total_kgsall:
							total_listkgs.append(i.sqty)
							total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs = []
						total_ltrsall = RPT_Daywisesreport.objects.raw(first)
						for i in total_ltrsall:
							total_listltrs.append(i.sltrs)
							total_ltrssum_detail = round(sum(total_listltrs),2)
						total_listfat = []
						total_fatall = RPT_Daywisesreport.objects.raw(first)
						for i in total_fatall:
							total_listfat.append(i.kfat)
							total_fatsum_detail = round(sum(total_listfat),2)
						total_listsnf = []
						total_snfall = RPT_Daywisesreport.objects.raw(first)
						for i in total_snfall:
							total_listsnf.append(i.ksnf)
							total_snfsum_detail = round(sum(total_listsnf),2)
						total_listafat = []
						total_afatall = RPT_Daywisesreport.objects.raw(first)
						for i in total_afatall:
							total_listafat.append(i.afat)
							total_afatsum_detail = round(sum(total_listafat),2)
						total_listasnf = []
						total_asnfall = RPT_Daywisesreport.objects.raw(first)
						for i in total_asnfall:
							total_listasnf.append(i.asnf)
							total_asnfsum_detail = round(sum(total_listasnf),2)
						total_listgamt = []
						total_gamtall = RPT_Daywisesreport.objects.raw(first)
						for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = round(sum(total_listgamt),3)
					elif shift == 'all' and milk_type != 'all':
						dc = RPT_Daywisesreport.objects.raw(second)
						total_listkgs = []
						total_kgsall = RPT_Daywisesreport.objects.raw(second)
						for i in total_kgsall:
							total_listkgs.append(i.sqty)
							total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs = []
						total_ltrsall = RPT_Daywisesreport.objects.raw(second)
						for i in total_ltrsall:
							total_listltrs.append(i.sltrs)
							total_ltrssum_detail = round(sum(total_listltrs),2)
						total_listfat = []
						total_fatall = RPT_Daywisesreport.objects.raw(second)
						for i in total_fatall:
							total_listfat.append(i.kfat)
							total_fatsum_detail = round(sum(total_listfat),2)
						total_listsnf = []
						total_snfall = RPT_Daywisesreport.objects.raw(second)
						for i in total_snfall:
							total_listsnf.append(i.ksnf)
							total_snfsum_detail = round(sum(total_listsnf),2)
						total_listafat = []
						total_afatall = RPT_Daywisesreport.objects.raw(second)
						for i in total_afatall:
							total_listafat.append(i.afat)
							total_afatsum_detail = round(sum(total_listafat),2)
						total_listasnf = []
						total_asnfall = RPT_Daywisesreport.objects.raw(second)
						for i in total_asnfall:
							total_listasnf.append(i.asnf)
							total_asnfsum_detail = round(sum(total_listasnf),2)
						total_listgamt = []
						total_gamtall = RPT_Daywisesreport.objects.raw(second)
						for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = round(sum(total_listgamt),2)
					elif milk_type == 'all' and shift != 'all':
						dc = RPT_Daywisesreport.objects.raw(third)
						total_listkgs = []
						total_kgsall = RPT_Daywisesreport.objects.raw(third)
						for i in total_kgsall:
							total_listkgs.append(i.sqty)
							total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs = []
						total_ltrsall = RPT_Daywisesreport.objects.raw(third)
						for i in total_ltrsall:
							total_listltrs.append(i.sltrs)
							total_ltrssum_detail = round(sum(total_listltrs),2)
						total_listfat = []
						total_fatall = RPT_Daywisesreport.objects.raw(third)
						for i in total_fatall:
							total_listfat.append(i.kfat)
							total_fatsum_detail = round(sum(total_listfat),2)
						total_listsnf = []
						total_snfall = RPT_Daywisesreport.objects.raw(third)
						for i in total_snfall:
							total_listsnf.append(i.ksnf)
							total_snfsum_detail = round(sum(total_listsnf),2)
						total_listafat = []
						total_afatall = RPT_Daywisesreport.objects.raw(third)
						for i in total_afatall:
							total_listafat.append(i.afat)
							total_afatsum_detail = round(sum(total_listafat),2)
						total_listasnf = []
						total_asnfall = RPT_Daywisesreport.objects.raw(third)
						for i in total_asnfall:
							total_listasnf.append(i.asnf)
							total_asnfsum_detail = round(sum(total_listasnf),2)
						total_listgamt = []
						total_gamtall = RPT_Daywisesreport.objects.raw(third)
						for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = round(sum(total_listgamt),2)
					else:
						dc = RPT_Daywisesreport.objects.raw(fourth)
						total_listkgs = []
						total_kgsall = RPT_Daywisesreport.objects.raw(fourth)
						for i in total_kgsall:
							total_listkgs.append(i.sqty)
							total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs = []
						total_ltrsall = RPT_Daywisesreport.objects.raw(fourth)
						for i in total_ltrsall:
							total_listltrs.append(i.sltrs)
							total_ltrssum_detail = round(sum(total_listltrs),2)
						total_listfat = []
						total_fatall = RPT_Daywisesreport.objects.raw(fourth)
						for i in total_fatall:
							total_listfat.append(i.kfat)
							total_fatsum_detail = round(sum(total_listfat),2)
						total_listsnf = []
						total_snfall = RPT_Daywisesreport.objects.raw(fourth)
						for i in total_snfall:
							total_listsnf.append(i.ksnf)
							total_snfsum_detail = round(sum(total_listsnf),2)
						total_listafat = []
						total_afatall = RPT_Daywisesreport.objects.raw(fourth)
						for i in total_afatall:
							total_listafat.append(i.afat)
							total_afatsum_detail = round(sum(total_listafat),2)
						total_listasnf = []
						total_asnfall = RPT_Daywisesreport.objects.raw(fourth)
						for i in total_asnfall:
							total_listasnf.append(i.asnf)
							total_asnfsum_detail = round(sum(total_listasnf),2)
						total_listgamt = []
						total_gamtall =RPT_Daywisesreport.objects.raw(fourth)
						for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = round(sum(total_listgamt),2)
				return render(request,'day_wise.html',locals())
			else:
				return render(request,'index.html',locals())
	
		else:
			route = Route.objects.all()
			center = Center.objects.all()
			milk =Milktype.objects.all()
			#data = Daily_data.objects.all()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day =1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			# return HttpResponse(end_of_m)
			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					shift =  request.POST["dayshift"]
					milk_type = request.POST["milk_type"]

					#cursor1 = connection.cursor()
					#DataDel = "delete from School_RPT_Daywisesreport"
					#cursor1.execute(DataDel)
					#cursor = connection.cursor()
					#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
					#DataInsert = "insert into School_RPT_Daywisesreport (branch,date,shift,routecode,centercode,milk_type,fat,snf,sqty,sltrs,afat,asnf,kfat,ksnf,gamount) select branch,date,shift,routecode,centercode,milk_type,round(fat,2),round(snf,2), round(sum(qty),2),round(sum(ltrs),3), round(avg(fat),3),round(avg(snf),3),round((sum(qty)*avg(fat))/100),round((sum(qty)*avg(snf))/100), round(sum(amount),2)  from school_daily_data where date between '%s' and '%s' group by date,shift,milk_type"%(str(datefrom),str(dateto))
					#cursor1.execute(DataInsert)       
					#cursor.execute(DataInsert)

					first = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from school_daily_data where date between '%s' and '%s' group by date,shift,milk_type"%(str(datefrom),str(dateto))
					second = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from school_daily_data  where date between '%s' and '%s' and milk_type='%s' group by date,shift,milk_type"%(str(datefrom),str(dateto),str(milk_type))
					third = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from school_daily_data  where date between '%s' and '%s' and shift = '%s' group by date,shift,milk_type"%(str(datefrom),str(dateto),str(shift))
					fourth = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from school_daily_data  where date between '%s' and '%s' and milk_type= '%s' and shift = '%s' group by date,shift,milk_type"%(str(datefrom),str(dateto),str(milk_type),str(shift))
					#branchdata = cursor.fetchall() 
					if shift == 'all' and milk_type == 'all':
						dc = RPT_Daywisesreport.objects.raw(first)
						total_listkgs = []
						total_kgsall = RPT_Daywisesreport.objects.raw(first)
						for i in total_kgsall:
							total_listkgs.append(i.sqty)
							total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs = []
						total_ltrsall = RPT_Daywisesreport.objects.raw(first)
						for i in total_ltrsall:
							total_listltrs.append(i.sltrs)
							total_ltrssum_detail = round(sum(total_listltrs),2)
						total_listfat = []
						total_fatall = RPT_Daywisesreport.objects.raw(first)
						for i in total_fatall:
							total_listfat.append(i.kfat)
							total_fatsum_detail = round(sum(total_listfat),2)
						total_listsnf = []
						total_snfall = RPT_Daywisesreport.objects.raw(first)
						for i in total_snfall:
							total_listsnf.append(i.ksnf)
							total_snfsum_detail = round(sum(total_listsnf),2)
						total_listafat = []
						total_afatall = RPT_Daywisesreport.objects.raw(first)
						for i in total_afatall:
							total_listafat.append(i.afat)
							total_afatsum_detail = round(sum(total_listafat),2)
						total_listasnf = []
						total_asnfall = RPT_Daywisesreport.objects.raw(first)
						for i in total_asnfall:
							total_listasnf.append(i.asnf)
							total_asnfsum_detail = round(sum(total_listasnf),2)
						total_listgamt = []
						total_gamtall = RPT_Daywisesreport.objects.raw(first)
						for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = round(sum(total_listgamt),3)
					elif shift == 'all' and milk_type != 'all':
						dc = RPT_Daywisesreport.objects.raw(second)
						total_listkgs = []
						total_kgsall = RPT_Daywisesreport.objects.raw(second)
						for i in total_kgsall:
							total_listkgs.append(i.sqty)
							total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs = []
						total_ltrsall = RPT_Daywisesreport.objects.raw(second)
						for i in total_ltrsall:
							total_listltrs.append(i.sltrs)
							total_ltrssum_detail = round(sum(total_listltrs),2)
						total_listfat = []
						total_fatall = RPT_Daywisesreport.objects.raw(second)
						for i in total_fatall:
							total_listfat.append(i.kfat)
							total_fatsum_detail = round(sum(total_listfat),2)
						total_listsnf = []
						total_snfall = RPT_Daywisesreport.objects.raw(second)
						for i in total_snfall:
							total_listsnf.append(i.ksnf)
							total_snfsum_detail = round(sum(total_listsnf),2)
						total_listafat = []
						total_afatall = RPT_Daywisesreport.objects.raw(second)
						for i in total_afatall:
							total_listafat.append(i.afat)
							total_afatsum_detail = round(sum(total_listafat),2)
						total_listasnf = []
						total_asnfall = RPT_Daywisesreport.objects.raw(second)
						for i in total_asnfall:
							total_listasnf.append(i.asnf)
							total_asnfsum_detail = round(sum(total_listasnf),2)
						total_listgamt = []
						total_gamtall = RPT_Daywisesreport.objects.raw(second)
						for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = round(sum(total_listgamt),2)
					elif milk_type == 'all' and shift != 'all':
						dc = RPT_Daywisesreport.objects.raw(third)
						total_listkgs = []
						total_kgsall = RPT_Daywisesreport.objects.raw(third)
						for i in total_kgsall:
							total_listkgs.append(i.sqty)
							total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs = []
						total_ltrsall = RPT_Daywisesreport.objects.raw(third)
						for i in total_ltrsall:
							total_listltrs.append(i.sltrs)
							total_ltrssum_detail = round(sum(total_listltrs),2)
						total_listfat = []
						total_fatall = RPT_Daywisesreport.objects.raw(third)
						for i in total_fatall:
							total_listfat.append(i.kfat)
							total_fatsum_detail = round(sum(total_listfat),2)
						total_listsnf = []
						total_snfall = RPT_Daywisesreport.objects.raw(third)
						for i in total_snfall:
							total_listsnf.append(i.ksnf)
							total_snfsum_detail = round(sum(total_listsnf),2)
						total_listafat = []
						total_afatall = RPT_Daywisesreport.objects.raw(third)
						for i in total_afatall:
							total_listafat.append(i.afat)
							total_afatsum_detail = round(sum(total_listafat),2)
						total_listasnf = []
						total_asnfall = RPT_Daywisesreport.objects.raw(third)
						for i in total_asnfall:
							total_listasnf.append(i.asnf)
							total_asnfsum_detail = round(sum(total_listasnf),2)
						total_listgamt = []
						total_gamtall = RPT_Daywisesreport.objects.raw(third)
						for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = round(sum(total_listgamt),2)
					else:
						dc = RPT_Daywisesreport.objects.raw(fourth)
						total_listkgs = []
						total_kgsall = RPT_Daywisesreport.objects.raw(fourth)
						for i in total_kgsall:
							total_listkgs.append(i.sqty)
							total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs = []
						total_ltrsall = RPT_Daywisesreport.objects.raw(fourth)
						for i in total_ltrsall:
							total_listltrs.append(i.sltrs)
							total_ltrssum_detail = round(sum(total_listltrs),2)
						total_listfat = []
						total_fatall = RPT_Daywisesreport.objects.raw(fourth)
						for i in total_fatall:
							total_listfat.append(i.kfat)
							total_fatsum_detail = round(sum(total_listfat),2)
						total_listsnf = []
						total_snfall = RPT_Daywisesreport.objects.raw(fourth)
						for i in total_snfall:
							total_listsnf.append(i.ksnf)
							total_snfsum_detail = round(sum(total_listsnf),2)
						total_listafat = []
						total_afatall = RPT_Daywisesreport.objects.raw(fourth)
						for i in total_afatall:
							total_listafat.append(i.afat)
							total_afatsum_detail = round(sum(total_listafat),2)
						total_listasnf = []
						total_asnfall = RPT_Daywisesreport.objects.raw(fourth)
						for i in total_asnfall:
							total_listasnf.append(i.asnf)
							total_asnfsum_detail = round(sum(total_listasnf),2)
						total_listgamt = []
						total_gamtall =RPT_Daywisesreport.objects.raw(fourth)
						for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = round(sum(total_listgamt),2)
				return render(request,'day_wise.html',locals())
			else:
				return render(request,'index.html',locals())
	except Exception as err:

		messages.error(request,err)
		return render(request,'day_wise.html',locals())# Module -Reports - masters #1 - Displaying the bank_report report- bank_report.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
def bank_report(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		route = Route.objects.using(brch).all()
		bank = Bank.objects.using(brch).all()
		center = Center.objects.using(brch).all().distinct()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.session.has_key('name'):
			if request.method == "POST":
				datefrom = request.POST["datefrom"]
				dateto = request.POST["dateto"]
				name = request.POST["bankname"]
				#routecode = request.POST["routecode"]
				#centercode = request.POST["centercode"]
				
				#cursor1 = connection.cursor()
				#DataDel = "delete from School_BAQreport"
				#cursor1.execute(DataDel)
				#cursor = connection.cursor()
				#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
				#DataInsert = "insert into School_BAQreport (branch,date,shift,routecode,centercode,milk_type,fat,snf,sqty,scan,sltrs,afat,asnf,kfat,ksnf,gamount) select branch,date,shift,routecode,centercode,milk_type,fat,snf, sum(qty),sum(can),round(sum(ltrs),3), round(avg(fat),3),round(avg(snf),3),round((sum(qty)*avg(fat))/100),round((sum(qty)*avg(snf))/100), sum(amount)  from school_daily_data where date between '%s' and '%s' group by date,shift,milk_type"%(str(datefrom),str(dateto))
				#cursor1.execute(DataInsert)       
				#cursor.execute(DataInsert)
				
				
				if name == 'all':
					bank = Bank.objects.using(brch).filter().distinct()
				else:
					bank = Bank.objects.using(brch).filter(name=name)
			return render(request, 'bank_report.html', locals())
		else:
			return render(request,'index.html',locals())
	else:
		route = Route.objects.all()
		bank = Bank.objects.all()
		center = Center.objects.all().distinct()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.session.has_key('name'):
			if request.method == "POST":
				datefrom = request.POST["datefrom"]
				dateto = request.POST["dateto"]
				name = request.POST["bankname"]
				#routecode = request.POST["routecode"]
				#centercode = request.POST["centercode"]
				
				#cursor1 = connection.cursor()
				#DataDel = "delete from School_BAQreport"
				#cursor1.execute(DataDel)
				#cursor = connection.cursor()
				#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
				#DataInsert = "insert into School_BAQreport (branch,date,shift,routecode,centercode,milk_type,fat,snf,sqty,scan,sltrs,afat,asnf,kfat,ksnf,gamount) select branch,date,shift,routecode,centercode,milk_type,fat,snf, sum(qty),sum(can),round(sum(ltrs),3), round(avg(fat),3),round(avg(snf),3),round((sum(qty)*avg(fat))/100),round((sum(qty)*avg(snf))/100), sum(amount)  from school_daily_data where date between '%s' and '%s' group by date,shift,milk_type"%(str(datefrom),str(dateto))
				#cursor1.execute(DataInsert)       
				#cursor.execute(DataInsert)
				
				
				if name == 'all':
					bank = Bank.objects.filter().distinct()
				else:
					bank = Bank.objects.filter(name=name)
			return render(request, 'bank_report.html', locals())
		else:
			return render(request,'index.html',locals())

	
# Module -Reports - Transcations #5 - Displaying the bank_wise report- bank_wise.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Karthik
#def bank_wise(request):
#	try:
#		brch = request.user.extendeduser.branch
#		if request.user.extendeduser.branch == brch:
#			route = Route.objects.using(brch).all()
#			center = Center.objects.using(brch).all()
#			today = date.today()
#			t_m = datetime.datetime.now().month
#			start_of_m = today.replace(day =1, month=t_m)
#			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
#			# return HttpResponse(end_of_m)
#			if request.session.has_key('name'):
#				if request.method == "POST":
#					datefrom = request.POST["datefrom"]
#					dateto = request.POST["dateto"]
#					routecode =  request.POST["routecode"]
#					centercode = request.POST["centercode"]
#					#print(centercode)
#					username8 = request.user.username
###					#cursor = connection.cursor()
					
					#directQ ="delete from school_rpt_bankwise"
					#cursor.execute(directQ)
					#cursor1 = connection.cursor()      
					
					#QUERY12 ="insert into school_rpt_bankwise(route_number,supervisor,centre_code,name,mobile,agent_name,bankno,ddate,bankname,branch,ifsc,amount) select route_number,supervisor,centre_code,name,mobile,agent_name,bankno,D.date,bankname,C.branch,ifsc,round(sum(D.net),3)  from school_center C, school_daily_data D where centre_code = D.centercode and D.date between '%s' and '%s' group by D.centercode"%(str(datefrom),str(dateto))
					
					#print(QUERY12)
					#cursor1.execute(QUERY12) 

					#TabBAR = "rpt_%s_bankwise"%(str(username8))

					#TabBAQ = "school_rpt_%s_bankwise"%(str(username8))
					#TabBAQ = "school_rpt_bankwise"

					#print(TabBAQ)
					#school_rpt_nani_bankwise

					#cursor4 = connection.cursor() 
					#Qry1 = "drop table  if exists %s "%(str(TabBAQ))
					#Qry1 = "drop table "
					#print(Qry1)
					#cursor4.execute(Qry1)


					#cursor5 = connection.cursor() 
					#Qry123 = "create table %s select * from school_rpt_bankwise  "%(str(TabBAQ))

					#print(Qry123)
					#cursor5.execute(Qry123)

					#installment_amt = 0
					#cursor2 = connection.cursor() 
					#Loanupdate = " update %s R, school_loanbillsdata L set R.amount = R.amount - L.installment_amt  where R.centre_code = L.centercode and L.idate between '%s' and '%s' "%(str(TabBAQ),str(datefrom),str(dateto))
					#print(Loanupdate)
					#cursor2.execute(Loanupdate)

					#cursor5 =connection.cursor()
					#if routecode == 'all' and centercode == 'all':
				#		loandate = "select route_number,centre_code,routecode,centercode,sdate,idate,installment_amt,interest_amt from school_loanbillsdata L,school_rpt_bankwise B where centercode =centre_code and routecode= route_number and idate between '%s' and '%s'"%(str(datefrom),str(dateto))
				#	elif routecode == 'all'  and centercode != 'all':

		#			elif routecode != 'all'  and centercode == 'all':
		#
		#			else :
					#filtering = "%s.objects.filter().distinct()"%(str(TabBAR))
					#firstdata  = "select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount  from school_center C, school_daily_data D where centre_code = D.centercode and D.date between '%s' and '%s' group by D.centercode"%(str(datefrom),str(dateto))
					#first  = "select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount  from school_center C, school_daily_data D where centre_code = D.centercode and D.date between '%s' and '%s' and C.centre_code = '%s' group by D.centercode"%(str(datefrom),str(dateto),str(centercode))
					#second  = "select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount  from school_center C, school_daily_data D where centre_code = D.centercode and D.date between '%s' and '%s' and C.route_number = '%s' group by D.centercode"%(str(datefrom),str(dateto),str(routecode))
					#third  = "select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount  from school_center C, school_daily_data D where centre_code = D.centercode and D.date between '%s' and '%s' and C.centre_code = '%s' and C.route_number = '%s' group by D.centercode "%(str(datefrom),str(dateto),str(centercode),str(routecode))
					#seconddata = "update rpt_bankwise B ,school_loanbillsdata L set B.amount = B.amount - L.installment_amt where B.centre_code = L.centercode and L.idate between '%s' and '%s'"%(str(datefrom),str(dateto))
					
					
#					calral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)+COALESCE(A.cartage,0)+COALESCE(A.autofine,0)+COALESCE(A.aarrears,0)+COALESCE(A.aothers,0)+COALESCE(A.commission,0)-COALESCE(A.cattlefeed,0)-COALESCE(A.stores,0)-COALESCE(A.medicine,0)-COALESCE(A.stationary,0)-COALESCE(A.emtcharges,0)-COALESCE(A.seed,0)-COALESCE(A.insurance,0)-COALESCE(A.rarrears,0)-COALESCE(A.rothers,0)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' left join school_additions A on C.centre_code = A.centercode and A.date between '%s' and '%s' group by D.centercode"%(str(datefrom),str(dateto),str(datefrom),str(dateto),str(datefrom),str(dateto))
#					print("kk",calral)
#					csral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)+COALESCE(A.cartage,0)+COALESCE(A.autofine,0)+COALESCE(A.aarrears,0)+COALESCE(A.aothers,0)+COALESCE(A.commission,0)-COALESCE(A.cattlefeed,0)-COALESCE(A.stores,0)-COALESCE(A.medicine,0)-COALESCE(A.stationary,0)-COALESCE(A.emtcharges,0)-COALESCE(A.seed,0)-COALESCE(A.insurance,0)-COALESCE(A.rarrears,0)-COALESCE(A.rothers,0)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.centre_code = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' left join school_additions A on C.centre_code = A.centercode and A.date between '%s' and '%s' group by D.centercode"%(str(datefrom),str(dateto),str(centercode),str(datefrom),str(dateto),str(datefrom),str(dateto))
#					calrs = "  select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)+COALESCE(A.cartage,0)+COALESCE(A.autofine,0)+COALESCE(A.aarrears,0)+COALESCE(A.aothers,0)+COALESCE(A.commission,0)-COALESCE(A.cattlefeed,0)-COALESCE(A.stores,0)-COALESCE(A.medicine,0)-COALESCE(A.stationary,0)-COALESCE(A.emtcharges,0)-COALESCE(A.seed,0)-COALESCE(A.insurance,0)-COALESCE(A.rarrears,0)-COALESCE(A.rothers,0)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' left join school_additions A on C.centre_code = A.centercode and A.date between '%s' and '%s' group by D.centercode"%(str(datefrom),str(dateto),str(routecode),str(datefrom),str(dateto),str(datefrom),str(dateto))
#					csrs = "  select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)+COALESCE(A.cartage,0)+COALESCE(A.autofine,0)+COALESCE(A.aarrears,0)+COALESCE(A.aothers,0)+COALESCE(A.commission,0)-COALESCE(A.cattlefeed,0)-COALESCE(A.stores,0)-COALESCE(A.medicine,0)-COALESCE(A.stationary,0)-COALESCE(A.emtcharges,0)-COALESCE(A.seed,0)-COALESCE(A.insurance,0)-COALESCE(A.rarrears,0)-COALESCE(A.rothers,0)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.centre_code = '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' left join school_additions A on C.centre_code = A.centercode and A.date between '%s' and '%s' group by D.centercode"%(str(datefrom),str(dateto),str(centercode),str(routecode),str(datefrom),str(dateto),str(datefrom),str(dateto))
#					
#					if routecode == 'all' and centercode == 'all':
#					#	center1 = filtering
#						center1 = rpt_bankwise.objects.using(brch).raw(calral)
#						total_listgamt = []
#						total_gamtall = rpt_bankwise.objects.using(brch).raw(calral)
#						
#						for i in total_gamtall:
#							total_listgamt.append(i.net)
#							total_gamtsum_detail = round(sum(total_listgamt),3)

						#k="select id id,amount amount from school_daily_data where centercode = 108 group by centercode "
						#n= "update school_rpt_bankwise set amount = 1.023"
						#b= rpt_bankwise.objects.raw(k)
						#b = rpt_bankwise.objects.raw(n)


						#firstdata = "select C.id id,route_number routecode from school_center C"


#						da=rpt_bankwise.objects.using(brch).raw(calral)
#					elif routecode == 'all' and centercode != 'all':
#						center1 = rpt_bankwise.objects.using(brch).raw(csral)
#						total_gamtall = rpt_bankwise.objects.using(brch).raw(csral)
#						for i in total_gamtall:
#							total_listgamt.append(i.net)
#							total_gamtsum_detail = round(sum(total_listgamt),3)       
#					elif centercode == 'all' and routecode != 'all':
#						center1 = rpt_bankwise.objects.using(brch).raw(calrs)
#						total_listgamt = []
#						total_gamtall = rpt_bankwise.objects.using(brch).raw(calrs)
#						for i in total_gamtall:
#							total_listgamt.append(i.net)
#							total_gamtsum_detail = round(sum(total_listgamt),3)
#					else:
#						center1 = rpt_bankwise.objects.using(brch).raw(csrs)
#						total_listgamt = []
#						total_gamtall = rpt_bankwise.objects.using(brch).raw(csrs)
#						for i in total_gamtall:
#							total_listgamt.append(i.net)
#							total_gamtsum_detail = round(sum(total_listgamt),3)
##					
#					#cursor8 = connection.cursor() 
					#k = "select C.route_number routecode,C.supervisor supervisor,centre_code,name,mobile,agent_name,bankno,D.date,bankname,C.branch,ifsc,round(sum(D.net),3)  from %s.school_center C, %s.school_daily_data D where centre_code = D.centercode and D.date between '%s' and '%s' group by D.centercode"%(str(brch),str(brch),str(datefrom),str(dateto))
					#print(k)
#					#cursor8.execute(k)
#				return render(request,'bank_wise.html',locals())
#			else:
#				return render(request,'index.html',locals())
#		else:

#			route = Route.objects.all()
#			center = Center.objects.all()
#			today = date.today()
#			t_m = datetime.datetime.now().month
#			start_of_m = today.replace(day =1, month=t_m)
#			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
#			# return HttpResponse(end_of_m)
#			if request.session.has_key('name'):
#				if request.method == "POST":
#					datefrom = request.POST["datefrom"]
#					dateto = request.POST["dateto"]
#					routecode =  request.POST["routecode"]
#					centercode = request.POST["centercode"]
#					#print(centercode)
#					username8 = request.user.username
#					print(username8)
#
					
					
					
#					calral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(datefrom),str(dateto),str(datefrom),str(dateto))
#					print(calral)
#					csral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.centre_code = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(datefrom),str(dateto),str(centercode),str(datefrom),str(dateto))
#					calrs = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(datefrom),str(dateto),str(routecode),str(datefrom),str(dateto))
#					csrs = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s'  and C.centre_code = '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(datefrom),str(dateto),str(centercode),str(routecode),str(datefrom),str(dateto))
#					
#					if routecode == 'all' and centercode == 'all':
#					#	center1 = filtering
#						center1 = rpt_bankwise.objects.raw(calral)
#						total_listgamt = []
#						total_gamtall = rpt_bankwise.objects.raw(calral)
#						
#						for i in total_gamtall:
#							total_listgamt.append(i.net)
#							total_gamtsum_detail = round(sum(total_listgamt),3)
#
						#k="select id id,amount amount from school_daily_data where centercode = 108 group by centercode "
						#n= "update school_rpt_bankwise set amount = 1.023"
						#b= rpt_bankwise.objects.raw(k)
						#b = rpt_bankwise.objects.raw(n)


						#firstdata = "select C.id id,route_number routecode from school_center C"


#						da=rpt_bankwise.objects.raw(calral)
#					elif routecode == 'all' and centercode != 'all':
#						center1 = rpt_bankwise.objects.raw(csral)
#						total_listgamt = []
#						total_gamtall = rpt_bankwise.objects.raw(csral)
#						for i in total_gamtall:
#							total_listgamt.append(i.net)
#							total_gamtsum_detail = round(sum(total_listgamt),3)       
#					elif centercode == 'all' and routecode != 'all':
#						center1 = rpt_bankwise.objects.raw(calrs)
#						total_listgamt = []
#						total_gamtall = rpt_bankwise.objects.raw(calrs)
#						for i in total_gamtall:
#							total_listgamt.append(i.amount)
#							total_gamtsum_detail = round(sum(total_listgamt),3)
#					else:
#						center1 = rpt_bankwise.objects.raw(csrs)
#						total_listgamt = []
#						total_gamtall = rpt_bankwise.objects.raw(csrs)
#						for i in total_gamtall:
#							total_listgamt.append(i.amount)
#							total_gamtsum_detail = round(sum(total_listgamt),3)
#
#					
#					cursor8 = connection.cursor() 
#					k = "select C.route_number routecode,C.supervisor supervisor,centre_code,name,mobile,agent_name,bankno,D.date,bankname,C.branch,ifsc,round(sum(D.net),3)  from school_center C, school_daily_data D where centre_code = D.centercode and D.date between '2021-01-01' and '2021-01-31' group by D.centercode"
#					print(k)
#					cursor8.execute(k)
#				return render(request,'bank_wise.html',locals())
#			else:
#				return render(request,'index.html',locals())
#	except Exception as err:
#			
#		if search("local variable",str(err)):
#			messages.error(request,'Some Data Missing')
#
#		elif search("[Errno 5] Input/output error",str(err)):
#			messages.error(request,'Please contact your system Administrator :  +91 7075696768')
#	
#		else:		
#			messages.success(request,'Invalid Data Entry')
#		return render(request,'bank_wise.html',locals())

def bank_wise(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			route = Route.objects.using(brch).all()
			center = Center.objects.using(brch).all()
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day =1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			# return HttpResponse(end_of_m)
			if request.session.has_key('name'):
				if request.method == "POST":
					datefrom = request.POST["datefrom"]
					dateto = request.POST["dateto"]
					routecode =  request.POST["routecode"]
					centercode = request.POST["centercode"]
					#print(centercode)
					datefrom1 =datetime.datetime.strptime(datefrom, '%Y-%m-%d').strftime('%d-%m-%Y')
					print(datefrom1)
					dateto1 = datetime.datetime.strptime(dateto, '%Y-%m-%d').strftime('%d-%m-%Y')	
					print(dateto1)
					
					cursor = connection.cursor()
						
					directQ ="delete from %s.school_rpt_bankwise"%(str(brch))
					cursor.execute(directQ)
					cursor1 = connection.cursor() 
					cursor2 = connection.cursor() 
					cursor3 = connection.cursor()      
					
					QUERY12 ="insert into %s.school_rpt_bankwise(route_number,supervisor,centre_code,name,mobile,agent_name,bankno,ddate,bankname,branch,ifsc,amount) select route_number,supervisor,centre_code,name,mobile,agent_name,bankno,D.date,bankname,C.branch,ifsc,round(sum(D.net),3)  from %s.school_center C, %s.school_daily_data D where centre_code = D.centercode and D.date between '%s' and '%s' group by D.centercode"%(str(brch),str(brch),str(brch),str(datefrom),str(dateto))
					#additionupdate = "update %s.school_rpt_bankwise B,%s.school_additions A set B.amount = B.amount+COALESCE(A.cartage,0)+COALESCE(A.autofine,0)+COALESCE(A.aarrears,0)+COALESCE(A.aothers,0)+COALESCE(A.commission,0)-COALESCE(A.cattlefeed,0)-COALESCE(A.stores,0)-COALESCE(A.medicine,0)-COALESCE(A.stationary,0)-COALESCE(A.emtcharges,0)-COALESCE(A.seed,0)-COALESCE(A.insurance,0)-COALESCE(A.rarrears,0)-COALESCE(A.rothers,0) where B.centre_code = A.centercode and A.date between '%s'and '%s' "%(str(brch),str(brch),str(datefrom),str(dateto))
					additionupdate =  "update %s.school_rpt_bankwise  as B , (select sum(A.cartage) cartage,sum(A.autofine) autofine,sum(A.aarrears) aarrears,sum(A.aothers) aothers,sum(A.commission) commission,sum(A.cattlefeed) cattlefeed,sum(A.stores) stores,sum(A.medicine) medicine,sum(A.stationary) stationary,sum(A.emtcharges) emtcharges,sum(A.seed) seed,sum(A.insurance ) insurance,sum(A.rarrears) rarrears,sum(A.rothers) rothers,A.date date,A.centercode centercode from %s.school_additions A group by A.centercode ) as C  set B.amount = B.amount + C.cartage + C.aothers - C.emtcharges + C.autofine + C.aarrears + C.commission - C.cattlefeed - C.stores - C.medicine - C.stationary - C.insurance - C.seed - C.rarrears- C.rothers   where C.centercode = B.centre_code and C.date between '%s'and '%s'"%(str(brch),str(brch),str(datefrom),str(dateto))
					#additionupdate1 = "update %s.school_rpt_bankwise B,%s.school_additions A set B.amount = (select B.amount+COALESCE(A.cartage,0)+COALESCE(A.autofine,0)+COALESCE(A.aarrears,0)+COALESCE(A.aothers,0)+COALESCE(A.commission,0)-COALESCE(A.cattlefeed,0)-COALESCE(A.stores,0)-COALESCE(A.medicine,0)-COALESCE(A.stationary,0)-COALESCE(A.emtcharges,0)-COALESCE(A.seed,0)-COALESCE(A.insurance,0)-COALESCE(A.rarrears,0)-COALESCE(A.rothers,0) from %s.school_rpt_bankwise B, %s.school_additions A where A.centercode = B.centre_code and  A.date between '%s'and '%s') where B.centre_code = A.centercode and A.date between '%s'and '%s' "%(str(brch),str(brch),str(brch),str(brch),str(datefrom),str(dateto),str(datefrom),str(dateto))
					#print(additionupdate1)
					#loanupdate = "update %s.school_rpt_bankwise B,%s.school_loanbillsdata L set B.amount = B.amount-COALESCE(L.installment_amt,0) where B.centre_code= L.centercode and L.idate between '%s' and '%s' "%(str(brch),str(brch),str(datefrom),str(dateto))
					loanupdate = "update %s.school_rpt_bankwise as B , (select sum(L.installment_amt) installment_amt , L.idate idate ,L.centercode centercode from %s.school_loanbillsdata L group by L.centercode ) as C set B.amount = B.amount - C.installment_amt where B.centre_code = C.centercode and C.idate between '%s' and '%s'"%(str(brch),str(brch),str(datefrom),str(dateto))
					print(QUERY12)
					print(additionupdate)
					print(loanupdate)
					cursor1.execute(QUERY12) 
					cursor2.execute(additionupdate)
					cursor3.execute(loanupdate)

						
					if routecode == 'all' and centercode == 'all':
					#	center1 = filtering
						center1 = rpt_bankwise.objects.using(brch).filter()
						total_listgamt = []
						total_gamtall = rpt_bankwise.objects.using(brch).filter()
						
						for i in total_gamtall:
							total_listgamt.append(i.amount)
							total_gamtsum_detail = round(sum(total_listgamt),3)

						#k="select id id,amount amount from school_daily_data where centercode = 108 group by centercode "
						#n= "update school_rpt_bankwise set amount = 1.023"
						#b= rpt_bankwise.objects.raw(k)
						#b = rpt_bankwise.objects.raw(n)


						#firstdata = "select C.id id,route_number routecode from school_center C"


						#da=rpt_bankwise.objects.using(brch).raw(calral)
					elif routecode == 'all' and centercode != 'all':
						center1 = rpt_bankwise.objects.using(brch).filter(centre_code=centercode)
						total_listgamt = []
						total_gamtall = rpt_bankwise.objects.using(brch).filter(centre_code=centercode)
						for i in total_gamtall:
							total_listgamt.append(i.amount)
							total_gamtsum_detail = round(sum(total_listgamt),3)       
					elif centercode == 'all' and routecode != 'all':
						center1 = rpt_bankwise.objects.using(brch).filter(route_number=routecode)
						total_listgamt = []
						total_gamtall = rpt_bankwise.objects.using(brch).filter(route_number=routecode)
						for i in total_gamtall:
							total_listgamt.append(i.amount)
							total_gamtsum_detail = round(sum(total_listgamt),3)
					else:
						center1 = rpt_bankwise.objects.using(brch).filter(centre_code=centercode,route_number= routecode)
						total_listgamt = []
						total_gamtall = rpt_bankwise.objects.using(brch).filter(centre_code=centercode,route_number= routecode)
						for i in total_gamtall:
							total_listgamt.append(i.amount)
							total_gamtsum_detail = round(sum(total_listgamt),3)

					
					#cursor8 = connection.cursor() 
					#k = "select C.route_number routecode,C.supervisor supervisor,centre_code,name,mobile,agent_name,bankno,D.date,bankname,C.branch,ifsc,round(sum(D.net),3)  from %s.school_center C, %s.school_daily_data D where centre_code = D.centercode and D.date between '%s' and '%s' group by D.centercode"%(str(brch),str(brch),str(datefrom),str(dateto))
					#print(k)
					#cursor8.execute(k)
				return render(request,'bank_wise.html',locals())
			else:
				return render(request,'index.html',locals())
		
	except Exception as err:
			
		if search("local variable",str(err)):
			messages.error(request,'Some Data Missing')

		elif search("[Errno 5] Input/output error",str(err)):
			messages.error(request,'Please contact your system Administrator :  +91 9949124471')
	
		else:		
			messages.success(request,'Invalid Data Entry')
		return render(request,'bank_wise.html',locals())			
	#	if search("local variable",str(err)):
	#		messages.error(request,'Some Data Missing')

	#	elif search("[Errno 5] Input/output error",str(err)):
	#		messages.error(request,'Please contact your system Administrator :  +91 7075696768')
	#
	#	else:		
	#		messages.success(request,'Invalid Data Entry')
	#	return render(request,'bank_wise.html',locals())
class GeneratePdf(View):
	def get(self, request,slug, *args, **kwargs):
		template = get_template('pdf_download.html')
		today = date.today()
		start_of_yr = today.replace(day =1, month=4)
		end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
		board = Dashboard.objects.filter(expenses_details=slug, date__gte=start_of_yr, date__lte=end_of_yr)
		b = Dashboard.objects.values('expenses_details').distinct()
		total_listrec = []
		total_listpay = []
		total_recall = Dashboard.objects.filter(expenses_details=slug, date__gte=start_of_yr, date__lte=end_of_yr)
		for i in total_recall:
			total_listrec.append(i.receviable)
			total_recsum = sum(total_listrec)
			total_r = sum(total_listrec)
		total_payall = Dashboard.objects.filter(expenses_details=slug, date__gte=start_of_yr, date__lte=end_of_yr)
		for j in total_payall:
			total_listpay.append(j.payment)
			total_paysum = sum(total_listpay)
			total_p = sum(total_listpay)
			# diff_total = total_recsum - total_paysum
		if total_recsum >  total_paysum:
			tr = total_recsum - total_paysum
			total_paysum = total_paysum + tr
			# return HttpResponse("tr {{tr}}")
			tp = 0.0
			total_sum = total_paysum

		elif total_paysum > total_recsum:
			tp = total_paysum - total_recsum
			total_recsum = total_recsum + tp
			tr = 0.0
			total_sum = total_recsum
		context = {
			 'board': board,
			 'total_sum': total_sum,
			 'total_recsum': total_recsum,
			 'total_paysum':total_paysum,
			 'total_r':total_r,
			 'total_p':total_p,
			 'tp': tp,
			 'tr': tr,
			 'start_of_yr': start_of_yr,
			 'end_of_yr':end_of_yr
		}
		html = template.render(context)
		pdf = render_to_pdf("pdf_download.html",context)
		if pdf:
			response = HttpResponse(pdf,content_type = "application/pdf")
			filename = board[0].expenses_details+".pdf"
			content = "inline; filename=%s" %(filename)
			download = request.GET.get("download")
			if download:
				content = "attachment; filename=%s" %(filename)
			response['Content-Disposition'] = content
			return response
		return HttpResponse("Not Found")

# Module -Reports - Transcations #1 - Displaying the dailydata pdf  report- pdf_downloaddaily.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Karthik
class GeneratePdfDaily(View):

	def get(self, request,slug, slug1, slug2,slug3, *args, **kwargs):

		template = get_template('pdf_downloaddaily.html')
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if slug2 == 'all' and slug3 == 'all':
				data = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				print("@hj")
				total_listkgs = []
				total_kgssum_detail = 0
				total_kgsall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				for i in total_kgsall:
					total_listkgs.append(i.qty)
					total_kgssum_detail = round(sum(total_listkgs),2)
					#print("@jg",total_kgssum_detail)
				total_listltrs = []
				total_ltrssum_detail = 0
				total_ltrsall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				for i in total_ltrsall:
					total_listltrs.append(i.ltrs)
					total_ltrssum_detail = round(sum(total_listltrs),4)
				total_listfat = []
				total_fatsum_detail = 0
				total_fatsum1_detail=0
				total_fatall =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_fatallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_fatall:
					total_listfat.append(i.fat)
					total_fatsum1_detail = round(sum(total_listfat),3)
					total_fatsum_detail = total_fatsum1_detail/total_fatallcount
				total_listsnf = []
				total_snfsum_detail = 0
				total_snfsum1_detail = 0
				total_snfall =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_snfallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_snfall:
					total_listsnf.append(i.snf)
					total_snfsum1_detail = round(sum(total_listsnf),2)
					total_snfsum_detail = total_snfsum1_detail/total_snfallcount
				total_listrate = []
				total_ratesum_detail = 0
				total_ratesum1_detail = 0
				total_rateall =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_rateallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_rateall:
					total_listrate.append(i.ltrrate)
					total_ratesum1_detail = round(sum(total_listrate),2)
					total_ratesum_detail = total_ratesum1_detail/total_rateallcount
				total_listamount = []
				total_tsratesum_detail = 0.0
				total_tsratesum1_detail = 0.0
				total_amountall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_tsrateallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_amountall:
					total_listamount.append(i.tsrate)
					total_tsratesum1_detail = round(sum(total_listamount),2)
					total_tsratesum_detail = total_tsratesum1_detail/total_tsrateallcount
				total_listcomm = []
				total_commsum_detail = 0.0
				total_commsum1_detail = 0.0
				total_commall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_commallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_commall:
					total_listcomm.append(i.comm)
					total_commsum1_detail = round(sum(total_listcomm),2)
					total_commsum_detail = total_commsum1_detail/total_commallcount
				total_listpel = []
				total_pelsum_detail = 0.0
				total_pelall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				for i in total_pelall:
					total_listpel.append(i.pel)
					total_pelsum_detail = round(sum(total_listpel),2)
				total_listtotal = []
				total_totalsum_detail = 0.0
				total_totalall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				for i in total_totalall:
					total_listtotal.append(i.net)
					total_totalsum_detail = round(sum(total_listtotal),2)
			elif slug2 == 'all' and slug3 != 'all':
				data = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1],centercode=slug3).distinct()
				print("@#")
				total_listkgs = []
				total_kgssum_detail = 0
				total_kgsall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				for i in total_kgsall:
					total_listkgs.append(i.qty)
					total_kgssum_detail = round(sum(total_listkgs),2)
					#print("@jg",total_kgssum_detail)
				total_listltrs = []
				total_ltrssum_detail = 0
				total_ltrsall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				for i in total_ltrsall:
					total_listltrs.append(i.ltrs)
					total_ltrssum_detail = round(sum(total_listltrs),4)
				total_listfat = []
				total_fatsum_detail = 0
				total_fatsum1_detail=0
				total_fatall =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_fatallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_fatall:
					total_listfat.append(i.fat)
					total_fatsum1_detail = round(sum(total_listfat),3)
					total_fatsum_detail = total_fatsum1_detail/total_fatallcount
				total_listsnf = []
				total_snfsum_detail = 0
				total_snfsum1_detail = 0
				total_snfall =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_snfallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_snfall:
					total_listsnf.append(i.snf)
					total_snfsum1_detail = round(sum(total_listsnf),2)
					total_snfsum_detail = total_snfsum1_detail/total_snfallcount
				total_listrate = []
				total_ratesum_detail = 0
				total_ratesum1_detail = 0
				total_rateall =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_rateallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_rateall:
					total_listrate.append(i.ltrrate)
					total_ratesum1_detail = round(sum(total_listrate),2)
					total_ratesum_detail = total_ratesum1_detail/total_rateallcount
				total_listamount = []
				total_tsratesum_detail = 0.0
				total_tsratesum1_detail = 0.0
				total_amountall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_tsrateallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_amountall:
					total_listamount.append(i.tsrate)
					total_tsratesum1_detail = round(sum(total_listamount),2)
					total_tsratesum_detail = total_tsratesum1_detail/total_tsrateallcount
				total_listcomm = []
				total_commsum_detail = 0.0
				total_commsum1_detail = 0.0
				total_commall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_commallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_commall:
					total_listcomm.append(i.comm)
					total_commsum1_detail = round(sum(total_listcomm),2)
					total_commsum_detail = total_commsum1_detail/total_commallcount
				total_listpel = []
				total_pelsum_detail = 0.0
				total_pelall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				for i in total_pelall:
					total_listpel.append(i.pel)
					total_pelsum_detail = round(sum(total_listpel),2)
				total_listtotal = []
				total_totalsum_detail = 0.0
				total_totalall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				for i in total_totalall:
					total_listtotal.append(i.net)
					total_totalsum_detail = round(sum(total_listtotal),2)
			elif slug3 == 'all' and slug2 != 'all':
				data = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1],centercode=slug3).distinct()
				total_listkgs = []
				total_kgssum_detail = 0
				total_kgsall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				for i in total_kgsall:
					total_listkgs.append(i.qty)
					total_kgssum_detail = round(sum(total_listkgs),2)
					#print("@jg",total_kgssum_detail)
				total_listltrs = []
				total_ltrssum_detail = 0
				total_ltrsall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				for i in total_ltrsall:
					total_listltrs.append(i.ltrs)
					total_ltrssum_detail = round(sum(total_listltrs),4)
				total_listfat = []
				total_fatsum_detail = 0
				total_fatsum1_detail=0
				total_fatall =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_fatallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_fatall:
					total_listfat.append(i.fat)
					total_fatsum1_detail = round(sum(total_listfat),3)
					total_fatsum_detail = total_fatsum1_detail/total_fatallcount
				total_listsnf = []
				total_snfsum_detail = 0
				total_snfsum1_detail = 0
				total_snfall =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_snfallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_snfall:
					total_listsnf.append(i.snf)
					total_snfsum1_detail = round(sum(total_listsnf),2)
					total_snfsum_detail = total_snfsum1_detail/total_snfallcount
				total_listrate = []
				total_ratesum_detail = 0
				total_ratesum1_detail = 0
				total_rateall =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_rateallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_rateall:
					total_listrate.append(i.ltrrate)
					total_ratesum1_detail = round(sum(total_listrate),2)
					total_ratesum_detail = total_ratesum1_detail/total_rateallcount
				total_listamount = []
				total_tsratesum_detail = 0.0
				total_tsratesum1_detail = 0.0
				total_amountall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_tsrateallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_amountall:
					total_listamount.append(i.tsrate)
					total_tsratesum1_detail = round(sum(total_listamount),2)
					total_tsratesum_detail = total_tsratesum1_detail/total_tsrateallcount
				total_listcomm = []
				total_commsum_detail = 0.0
				total_commsum1_detail = 0.0
				total_commall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_commallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_commall:
					total_listcomm.append(i.comm)
					total_commsum1_detail = round(sum(total_listcomm),2)
					total_commsum_detail = total_commsum1_detail/total_commallcount
				total_listpel = []
				total_pelsum_detail = 0.0
				total_pelall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				for i in total_pelall:
					total_listpel.append(i.pel)
					total_pelsum_detail = round(sum(total_listpel),2)
				total_listtotal = []
				total_totalsum_detail = 0.0
				total_totalall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				for i in total_totalall:
					total_listtotal.append(i.net)
					total_totalsum_detail = round(sum(total_listtotal),2)
				# return HttpResponse(dc)
			else:
				data = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1], routecode=slug2,centercode=slug3).distinct()
				total_listkgs = []
				total_kgssum_detail = 0
				total_kgsall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				for i in total_kgsall:
					total_listkgs.append(i.qty)
					total_kgssum_detail = round(sum(total_listkgs),2)
					#print("@jg",total_kgssum_detail)
				total_listltrs = []
				total_ltrssum_detail = 0
				total_ltrsall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				for i in total_ltrsall:
					total_listltrs.append(i.ltrs)
					total_ltrssum_detail = round(sum(total_listltrs),4)
				total_listfat = []
				total_fatsum_detail = 0
				total_fatsum1_detail=0
				total_fatall =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_fatallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_fatall:
					total_listfat.append(i.fat)
					total_fatsum1_detail = round(sum(total_listfat),3)
					total_fatsum_detail = total_fatsum1_detail/total_fatallcount
				total_listsnf = []
				total_snfsum_detail = 0
				total_snfsum1_detail = 0
				total_snfall =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_snfallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_snfall:
					total_listsnf.append(i.snf)
					total_snfsum1_detail = round(sum(total_listsnf),2)
					total_snfsum_detail = total_snfsum1_detail/total_snfallcount
				total_listrate = []
				total_ratesum_detail = 0
				total_ratesum1_detail = 0
				total_rateall =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_rateallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_rateall:
					total_listrate.append(i.ltrrate)
					total_ratesum1_detail = round(sum(total_listrate),2)
					total_ratesum_detail = total_ratesum1_detail/total_rateallcount
				total_listamount = []
				total_tsratesum_detail = 0.0
				total_tsratesum1_detail = 0.0
				total_amountall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_tsrateallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_amountall:
					total_listamount.append(i.tsrate)
					total_tsratesum1_detail = round(sum(total_listamount),2)
					total_tsratesum_detail = total_tsratesum1_detail/total_tsrateallcount
				total_listcomm = []
				total_commsum_detail = 0.0
				total_commsum1_detail = 0.0
				total_commall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				total_commallcount =rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct().count()
				for i in total_commall:
					total_listcomm.append(i.comm)
					total_commsum1_detail = round(sum(total_listcomm),2)
					total_commsum_detail = total_commsum1_detail/total_commallcount
				total_listpel = []
				total_pelsum_detail = 0.0
				total_pelall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				for i in total_pelall:
					total_listpel.append(i.pel)
					total_pelsum_detail = round(sum(total_listpel),2)
				total_listtotal = []
				total_totalsum_detail = 0.0
				total_totalall = rpt_dailydata.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
				for i in total_totalall:
					total_listtotal.append(i.net)
					total_totalsum_detail = round(sum(total_listtotal),2)
		else: 
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if slug2 == 'all' and slug3 == 'all':
				data = rpt_dailydata.objects.filter(date__range=[slug, slug1]).distinct()
				print("ER@#")
			elif slug2 == 'all' and slug3 != 'all':
				data = rpt_dailydata.objects.filter(date__range=[slug, slug1],centercode=slug3).distinct()
			elif slug3 == 'all' and slug2 != 'all':
				data = rpt_dailydata.objects.filter(date__range=[slug, slug1],routecode = slug2).distinct()

				# return HttpResponse(dc)
			else:
				data = rpt_dailydata.objects.filter(date__range=[slug, slug1], routecode=slug2,centercode=slug3).distinct()
		
		slug =datetime.datetime.strptime(slug, '%Y-%m-%d').strftime('%d-%m-%Y')
		print(slug)
		slug1 = datetime.datetime.strptime(slug1, '%Y-%m-%d').strftime('%d-%m-%Y')	
		print(slug1)
		context = {
			'datefrom': slug,
			'dateto': slug1,
			'routecode': slug2,
			'centercode' : slug3,
			'data':data,
			'total_kgssum_detail':total_kgssum_detail,
			'total_ltrssum_detail':total_ltrssum_detail,
			'total_fatsum_detail':total_fatsum_detail,
			'total_snfsum_detail':total_snfsum_detail,
			'total_ratesum_detail':total_ratesum_detail,
			'total_tsratesum1_detail':total_tsratesum1_detail,
			'total_tsratesum_detail':total_tsratesum_detail,
			'total_commsum_detail':total_commsum_detail,
			'total_pelsum_detail':total_pelsum_detail,
			'total_totalsum_detail':total_totalsum_detail,


		}
		html = template.render(context)
		pdf = render_to_pdf("pdf_downloaddaily.html",context)
		if pdf:
			response = HttpResponse(pdf,content_type = "application/pdf")
			filename = slug+""+slug1+""+slug2+"_"+slug3+".pdf"
			content = "inline; filename=%s" %(filename)
			download = request.GET.get("download")
			if download:
				content = "attachment; filename=%s" %(filename)
			response['Content-Disposition'] = content
			return response
		return HttpResponse("Not Found")
		
class GeneratePdfMilk(View):
	def get(self, request, *args, **kwargs):
		try:
			template = get_template('pdf_milkbill.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)

			#cursor22 =connection.cursor()
			#Dateview = "select datefrom ,dateto,routecode from school_RPT_Milkbilldate "
			#print(Dateview)
			#cursor22.execute(Dateview)
			#milkbilldate = cursor22.fetchall()
			#for row in milkbilldate:
		#		datefrom=row[0]
	#		dateto = row[1]
	#			routecode = row[2]
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:	
				datefrom = request.session['firstdate']
				dateto = request.session['lastdate']
				routecode = request.session['getroute']
				
				datefrom111 =datetime.datetime.strptime(datefrom, '%Y-%m-%d').strftime('%d-%m-%Y')
				print(datefrom111)
				print("@2.3555",datefrom111)
				dateto11 = datetime.datetime.strptime(dateto, '%Y-%m-%d').strftime('%d-%m-%Y')	
				print(dateto11)

				cursor2 = connection.cursor()
				dateget = "select datediff('%s','%s') as days "%(str(dateto),str(datefrom))
				print(dateget)
				cursor2.execute(dateget)
				dateset = cursor2.fetchall()
				for row in dateset :
					datefrom1 = row[0]
				#	dateto1 = row[1]
				#	datediff = row[2]

					print(datefrom1)
		#			print(dateto1)
		#			print(datediff)
				
				noofdays = datefrom1
				#cursor1464 = connection.cursor()
				#centerfirst = "select centercode  from %s.school_daily_data group by centercode limit 1"%(str(brch))
				#cursor1464.execute(centerfirst)
				#getfirstcenter = cursor1464.fetchall()
				#for row in getfirstcenter:
				#	getfirstcenter = row[0]



				#print(total_milkvalue)

				cursor124 = connection.cursor()
				centercounting = "select count(distinct centercode) centervalue from %s.school_daily_data"%(str(brch))
				cursor124.execute(centercounting)
				print(centercounting)
				centervalue234 = cursor124.fetchall()
				for row in centervalue234:
					centercountvalue = row[0]
					print(centercountvalue)
				list1 = list(range(0,centercountvalue))
				print("9677",list1)
				
				
				for n in range(len(list1)):
					
					
					#ccenn = RPT_Milkbillvoucher.objects.using(brch).raw(ck)
					
					cursor1075 = connection.cursor()
					
					#kkk = "select centercode centercode from %s.school_daily_data where date between '%s' and '%s' and routecode = '%s' group by centercode limit 1 "%(str(brch),str(datefrom),str(dateto),str(routecode))
					ck = "select centercode centercode from %s.school_daily_data group by centercode limit %s,1"%(str(brch),str(n))
					print('@9688',ck)
					cursor1075.execute(ck)
					ccckkk = cursor1075.fetchall()
					dkdd45 = 0
					for row in ccckkk:
						dkdd = row[0]
						print("@9912",dkdd)


					cursor1464 = connection.cursor()
					centerfirst = "select centercode  from %s.school_daily_data group by centercode limit 1"%(str(brch))
					cursor1464.execute(centerfirst)
					getfirstcenter = cursor1464.fetchall()
					for row in getfirstcenter:
						getfirstcenter = row[0]
					cursor14 = connection.cursor()

					branch14 = "select count(*),D.id id,D.date date,D.shift shift,D.milk_type milk_type,D.branch branch,D.centercode centercode,D.qty kgs,D.ltrs ltrs,D.amount amount,D.ltrrate ltrrate,D.fat fat,D.snf snf,D.comm comm,D.pel pel,D.net net from %s.school_daily_data D  where D.date between '%s' and '%s'  and D.centercode = '%s' order by date,shift "%(str(brch),str(datefrom),str(dateto),str(dkdd))  
							
					#print(branch14)
					cursor14.execute(branch14)
					datavalues = cursor14.fetchall()
					for row in datavalues:
						valuecount=row[0]
						

					centergetdata = "select D.id id,D.date date,D.shift shift,D.milk_type milk_type,D.branch branch,D.centercode centercode,D.qty kgs,D.ltrs ltrs,D.amount amount,D.ltrrate ltrrate,D.fat fat,D.snf snf,D.comm comm,D.pel pel,D.net net from school_daily_data D  where D.date between '%s' and '%s'  and D.centercode = '%s' order by date,shift "%(str(datefrom),str(dateto),str(dkdd))
					
					data= RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
					total_listkgs = []
					total_kgssum_detail = 0
					total_kgsall = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
					for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_kgssum_detail = round(sum(total_listkgs),2)
						#print(2.3)
						#print(total_kgssum_detail)

					total_listltrs = []
					total_ltrssum_detail = 0
					total_ltrsall = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
					for i in total_ltrsall:
						total_listltrs.append(i.ltrs)
						total_ltrssum_detail = round(sum(total_listltrs),4)
					total_listfat = []
					total_fatsum_detail = 0
					total_fatsum_detail1 = 0
					total_fatall = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
					#total_fatall1 = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata).count()
					for i in total_fatall:
						total_listfat.append(i.fat)
						total_fatsum_detail1= round(sum(total_listfat),3)
						total_fatsum_detail = total_fatsum_detail1/valuecount
					total_listsnf = []
					total_snfsum_detail = 0
					total_snfsum_detail1 = 0
					total_snfall = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
					#total_snfall1 = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata).count()
					for i in total_snfall:
						total_listsnf.append(i.snf)
						total_snfsum_detail1 = round(sum(total_listsnf),2)
						total_snfsum_detail = total_snfsum_detail1/valuecount
					total_listrate = []
					total_ratesum_detail = 0
					total_ratesum_detail1 =0
					total_rateall = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
					#total_rateall1 =RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata).count()
					for i in total_rateall:
						total_listrate.append(i.ltrrate)
						total_ratesum_detail1 = round(sum(total_listrate),2)
						total_ratesum_detail= total_ratesum_detail/valuecount
					total_listamount = []
					total_amountsum_detail = 0.0
					total_amountall = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
					for i in total_amountall:
						total_listamount.append(i.amount)
						total_amountsum_detail = round(sum(total_listamount),2)
					total_listcomm = []
					total_commsum_detail = 0.0
					total_commall = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
					for i in total_commall:
						total_listcomm.append(i.comm)
						total_commsum_detail = round(sum(total_listcomm),2)
					total_listpel = []
					total_pelsum_detail = 0.0
					total_pelall = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
					for i in total_pelall:
						total_listpel.append(i.pel)
						total_pelsum_detail = round(sum(total_listpel),2)
					total_listtotal = []
					total_totalsum_detail = 0.0
					total_totalall = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
					for i in total_totalall:
						total_listtotal.append(i.net)
						total_totalsum_detail = round(sum(total_listtotal),2)

					#total_countamount = []
					#total_amountcount_detail = 0.0
					#total_amountcount = RPT_Milkbillvoucher.objects.filter(centercode = slug3).values('date','date').distinct().count()
					#total_amountcount_detail = total_amountcount
					
					cursor4 = connection.cursor()

					branch4 = "select B.address,B.code,B.pin,D.branch from school_branch B,%s.school_daily_data D where D.branch=B.code and centercode ='%s' "%(str(brch),str(dkdd))  
							
					#print(branch4)
					cursor4.execute(branch4)
					branchdata = cursor4.fetchall()
					for row in branchdata:
						address=row[0]
						name = row[1]
						pin = row[2]

					cursor5 = connection.cursor()
					 
					centerdetails = "select centre_code,name,C.route_number,R.route_name,agent_name,mobile,bankno,C.branch,bankname,ifsc from %s.school_Center C join %s.school_daily_data D on D.centercode=C.centre_code  and D.centercode='%s' join %s.school_route R on R.route_number = C.route_number "%(str(brch),str(brch),str(dkdd),str(brch))  
							
					#print(centerdetails)
					cursor5.execute(centerdetails)
					centerdata = cursor5.fetchall()
					for row in centerdata:
						centre_code=row[0]
						centername = row[1]
						route_number = row[2]
						routename = row[3]
						agent_name = row[4]
						mobile = row[5]
						bankno = row[6]
						bank_branch = row[7]
						bankname = row[8]
						ifsc = row[9]

					#cursor6 = connection.cursor()

					


					cursor6 = connection.cursor()
					loandetails = "select L.idate,sum(L.installment_amt),sum(L.interest_amt) from %s.school_loanbillsdata L where L.centercode='%s'  and L.idate between '%s' and '%s' group by L.centercode"%(str(brch),str(dkdd),str(datefrom),str(dateto))  
							
					#print(loandetails)
					cursor6.execute(loandetails)
					loanupdate = cursor6.fetchall()
					instamt2=0.0
					instamt = 0.0
					for row in loanupdate :
						installment_amt = row[1]
						interest_amt = row[2]
						instamt=installment_amt
						if instamt is not None:
							instamt2 = instamt
							print("@3701 instamt2",instamt2)
						else :
							instamt2=0.0
							print("@3704 instamt2",instamt2)

					#total_netvalue = round((total_totalsum_detail - instamt2),2)
					
					#total_rateltr = round(((total_ltrssum_detail)/total_amountcount_detail),2)

					

					s= noofdays + 1
						#list_of_nums = map(int, re.findall('\d+', s))
						#k = int(filter(str.isdigit, s))
					#print(s)
					total_rateltr = round(((total_ltrssum_detail)/s),2)
					

					cursor12 = connection.cursor()

					addition = "select A.id,A.date,sum(A.cartage),sum(A.cattlefeed),(A.centercode),sum(autofine),sum(stores),sum(aarrears),sum(medicine),sum(aothers),sum(stationary),sum(A.commission),sum(emtcharges),sum(seed),sum(insurance),sum(rarrears),sum(rothers) from %s.school_Additions A  where  and A.centercode ='%s' and A.date between '%s' and '%s'  group by A.centercode "%(str(brch),str(dkdd),str(datefrom),str(dateto))
							
					#print(addition)
					cursor12.execute(addition)
					cartage = 0.0
					cattlefeed = 0.0
					autofine =0.0
					stores = 0.0
					aarrears = 0.0
					medicine = 0.0
					aothers = 0.0
					stationary = 0.0
					commission = 0.0
					emtcharges = 0.0
					seed = 0.0
					insurance =0.0
					rarrears = 0.0
					rothers = 0.0
					additiondata = cursor12.fetchall()
					for row in additiondata:
						date1=row[1]
						cartage = row[2]
						cattlefeed = row[3]
						centercode=row[4]
						autofine=row[5]
						stores = row[6]
						aarrears= row[7]
						medicine=row[8]
						aothers=row[9]
						stationary= row[10]
						commission=row[11]
						emtcharges=row[12]
						seed= row[13]
						insurance = row[14]
						rarrears= row[15]
						rothers = row[16]
						#remarks = row[17]

					total_additions = round((cartage + autofine +aarrears+ aothers +commission),3)
					
					total_recoveries = round((cattlefeed + stores + stationary+medicine+emtcharges+insurance+seed+ rarrears+rothers +instamt2),3)
					total_totalsum1 = round((total_totalsum_detail + total_additions),3)
					
					total_netvalue = round((total_totalsum1 - total_recoveries),2)
					#print(total_netvalue)
					#print(2.56)
					#print(total_totalsum1)
					#print(total_ltrssum_detail)
					total_milkvalue = round((total_totalsum1/total_ltrssum_detail),2)

					cursor14 = connection.cursor()

					branch14 = "select count(*) cnt,D.id id,D.date date,D.shift shift,D.milk_type milk_type,D.branch branch,D.centercode centercode,D.qty kgs,D.ltrs ltrs,D.amount amount,D.ltrrate ltrrate,D.fat fat,D.snf snf,D.comm comm,D.pel pel,D.net net from %s.school_daily_data D  where D.date between '%s' and '%s'  and D.centercode = '%s' order by date,shift "%(str(brch),str(datefrom),str(dateto),str(dkdd))  
							
					#print('@9888',branch14)
					cursor14.execute(branch14)
					datavalues = cursor14.fetchall()
					for row in datavalues:
						valuecount1=row[0]
						centerid4qry=row[1]
						
					#print('@9895',valuecount1)
					#print('@9896',centerid4qry)
					centergetdata1 = "centergetdata1%s"%str(dkdd)

					centergetdata1 = "select D.id id,D.date date,D.shift shift,D.milk_type milk_type,D.branch branch,D.centercode centercode,D.qty kgs,D.ltrs ltrs,D.amount amount,D.ltrrate ltrrate,D.fat fat,D.snf snf,D.comm comm,D.pel pel,D.net net from %s.school_daily_data D  where D.date between '%s' and '%s'  and D.centercode = '%s' order by date,shift "%(str(brch),str(datefrom),str(dateto),str(dkdd))
					
					print('@9900 centergetdata1',centergetdata1)
					directdata= RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata1)
					total_listkgs1 = []
					total_kgssum_detail01 = 0
					total_kgsall1 = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata1)
					for i in total_kgsall1:
						total_listkgs1.append(i.kgs)
						total_kgssum_detail01 = round(sum(total_listkgs1),2)
						#print(2.3)
						#print(total_kgssum_detail01)

					total_listltrs1 = []
					total_ltrssum_detail01 = 0
					total_ltrsall1 = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata1)
					for i in total_ltrsall1:
						total_listltrs1.append(i.ltrs)
						total_ltrssum_detail01 = round(sum(total_listltrs1),4)
					total_listfat1 = []
					total_fatsum_detail01 = 0		
					total_fatsum_detail001 = 0
					total_fatall1 = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata1)
					#total_fatall1 = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata).count()
					for i in total_fatall1:
						total_listfat1.append(i.fat)
						total_fatsum_detail011= round(sum(total_listfat1),3)
						total_fatsum_detail001 = total_fatsum_detail011/valuecount1
						#print("@9926",total_fatsum_detail001)
					total_listsnf1 = []
					total_snfsum_detail01 = 0
					total_snfsum_detail001 = 0
					total_snfall1 = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata1)
					#total_snfall1 = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata).count()
					for i in total_snfall1:
						total_listsnf1.append(i.snf)
						total_snfsum_detail011 = round(sum(total_listsnf1),2)
						total_snfsum_detail001 = total_snfsum_detail011/valuecount1
						#print("@9936",total_snfsum_detail001)
					total_listrate1 = []
					total_ratesum_detail01 = 0
					total_ratesum_detail001 =0
					total_rateall1 =RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata1)
					#total_rateall1 =RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata).count()
					for i in total_rateall1:
						total_listrate1.append(i.ltrrate)
						total_ratesum_detail01 = round(sum(total_listrate1),2)
						total_ratesum_detail001= total_ratesum_detail01/valuecount1
					total_listamount1 = []
					total_amountsum_detail01 = 0.0
					total_amountall1 = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata1)
					for i in total_amountall1:
						total_listamount1.append(i.amount)
						total_amountsum_detail01 = round(sum(total_listamount1),2)
					total_listcomm1 = []
					total_commsum_detail01 = 0.0
					total_commall1 = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata1)
					for i in total_commall1:
						total_listcomm1.append(i.comm)
						total_commsum_detail01 = round(sum(total_listcomm1),2)
					total_listpel1 = []
					total_pelsum_detail01 = 0.0
					total_pelall1 = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata1)
					for i in total_pelall1:
						total_listpel1.append(i.pel)
						total_pelsum_detail01 = round(sum(total_listpel1),2)
					total_listtotal1 = []
					total_totalsum_detail01 = 0.0
					total_totalall1 = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata1)
					for i in total_totalall1:
						total_listtotal1.append(i.net)
						total_totalsum_detail01 = round(sum(total_listtotal1),2)

					#total_countamount = []
					#total_amountcount_detail = 0.0
					#total_amountcount = RPT_Milkbillvoucher.objects.filter(centercode = slug3).values('date','date').distinct().count()
					#total_amountcount_detail = total_amountcount
					
					cursor4 = connection.cursor()

					branch4 = "select B.address,B.code,B.pin,D.branch from school_branch B,%s.school_daily_data D where D.branch=B.code and centercode ='%s' "%(str(brch),str(dkdd))  
							
					print(branch4)
					cursor4.execute(branch4)
					branchdata = cursor4.fetchall()
					for row in branchdata:
						address1=row[0]
						name1 = row[1]
						pin1 = row[2]

					cursor5 = connection.cursor()
					 
					centerdetails1 = "select centre_code,name,C.route_number,R.route_name,agent_name,mobile,bankno,C.branch,bankname,ifsc from %s.school_Center C join %s.school_daily_data D on D.centercode=C.centre_code  and D.centercode= '%s' join %s.school_route R on R.route_number = C.route_number "%(str(brch),str(brch),str(dkdd),str(brch))  
							
					print(centerdetails1)
					cursor5.execute(centerdetails1)
					centerdata1 = cursor5.fetchall()
					for row in centerdata1:
						centre_code1=row[0]
						centername1 = row[1]
						route_number1 = row[2]
						routename1 = row[3]
						agent_name1 = row[4]
						mobile1 = row[5]
						bankno1 = row[6]
						bank_branch1 = row[7]
						bankname1 = row[8]
						ifsc1 = row[9]

					#cursor6 = connection.cursor()

					


					cursor6 = connection.cursor()
					loandetails1 = "select L.idate,sum(L.installment_amt),sum(L.interest_amt) from %s.school_loanbillsdata L where L.centercode= '%s'   and L.idate between '%s' and '%s' group by L.centercode"%(str(brch),str(dkdd),str(datefrom),str(dateto))  
							
					#print(loandetails1)
					cursor6.execute(loandetails1)
					loanupdate1 = cursor6.fetchall()
					instamt2=0.0
					instamt1 = 0.0
					for row in loanupdate :
						installment_amt = row[1]
						interest_amt = row[2]
						instamt1=installment_amt
						if instamt1 is not None:
							instamt2 = instamt
						#	print("@3701 instamt2",instamt2)
						else :
							instamt2=0.0
						#	print("@3704 instamt2",instamt2)

					#total_netvalue = round((total_totalsum_detail - instamt2),2)
					
					#total_rateltr = round(((total_ltrssum_detail)/total_amountcount_detail),2)

					

					s= noofdays + 1
						#list_of_nums = map(int, re.findall('\d+', s))
						#k = int(filter(str.isdigit, s))
					#print(s)
					total_rateltr1 = round(((total_ltrssum_detail01)/s),2)
					

					cursor12 = connection.cursor()

					addition1 = "select A.id,A.date,sum(A.cartage),sum(A.cattlefeed),(A.centercode),sum(autofine),sum(stores),sum(aarrears),sum(medicine),sum(aothers),sum(stationary),sum(A.commission),sum(emtcharges),sum(seed),sum(insurance),sum(rarrears),sum(rothers) from %s.school_Additions A  where  A.centercode ='%s' and A.date between '%s' and '%s'  group by A.centercode "%(str(brch),str(dkdd),str(datefrom),str(dateto))
							
					#print(addition1)
					cursor12.execute(addition1)
					cartage1 = 0.0
					cattlefeed1 = 0.0
					autofine1 =0.0
					stores1 = 0.0
					aarrears1 = 0.0
					medicine1 = 0.0
					aothers1 = 0.0
					stationary1 = 0.0
					commission1 = 0.0
					emtcharges1 = 0.0
					seed1 = 0.0
					insurance1 =0.0
					rarrears1 = 0.0
					rothers1 = 0.0
					additiondata1 = cursor12.fetchall()
					for row in additiondata1:
						date1=row[1]
						cartage1 = row[2]
						cattlefeed1 = row[3]
						centercode1=row[4]
						autofine1=row[5]
						stores1 = row[6]
						aarrears1= row[7]
						medicine1=row[8]
						aothers1=row[9]
						stationary1= row[10]
						commission1=row[11]
						emtcharges1=row[12]
						seed1= row[13]
						insurance1 = row[14]
						rarrears1= row[15]
						rothers1 = row[16]
						#remarks = row[17]

					total_additions1 = round((cartage1 + autofine1 +aarrears1+ aothers1 +commission1),3)
					
					total_recoveries1 = round((cattlefeed1 + stores1 + stationary1+medicine1+emtcharges1+insurance1+seed1+ rarrears1+rothers1 +instamt2),3)
					total_totalsum001 = round((total_totalsum_detail01 + total_additions1),3)
					
					total_netvalue1 = round((total_totalsum001 - total_recoveries1),2)
					#print(total_netvalue1)
					#print(2.56)
					#print(total_totalsum1)
					#print(total_ltrssum_detail01)
					total_milkvalue1 = round((total_totalsum001/total_ltrssum_detail01),2)
					#print(total_milkvalue1) 


					
					n = n+1
				# Ended for index zero values
				# new cursor for Next Center thru Hardcoded center value. 
				

			
			
			context = {
				
				#'center' : slug3,
				'data':data,
				#'loanbill':loanbill,
				'datefrom':datefrom,
				'datefrom111':datefrom111,
				'dateto11':dateto11,
				'dateto': dateto,
				'directdata':directdata,
				'total_totalsum001':total_totalsum001,
				'total_kgssum_detail':total_kgssum_detail,
				'total_ltrssum_detail':total_ltrssum_detail,
				'total_fatsum_detail001':total_fatsum_detail001,
				'total_fatsum_detail':total_fatsum_detail,
				'total_snfsum_detail001':total_snfsum_detail001,
				'total_snfsum_detail':total_snfsum_detail,
				'total_ratesum_detail':total_ratesum_detail,
				'total_amountsum_detail':total_amountsum_detail,
				'total_pelsum_detail':total_pelsum_detail,
				'total_totalsum_detail':total_totalsum_detail,
				'address':address,
				'total_totalsum1':total_totalsum1,
				'total_additions':total_additions,
				'total_recoveries':total_recoveries,
				'cartage':cartage,
				'total_ratesum_detail001':total_ratesum_detail001,

				'autofine':autofine,
				'aothers': aothers,
				'cattlefeed':cattlefeed,
				'stores':stores,
				'medicine':medicine,
				'insurance':insurance,
				'aarrears':aarrears,
				'commission':commission,
				'rothers':rothers,
				#'medicine':medicine,
				'stationary':stationary,
				'seed':seed,
				'emtcharges':emtcharges,
				'rothers':rothers,
				'name': name,
				'pin': pin,
				'centre_code':centre_code,
				'centername':centername,
				'route_number':route_number,
				'routename' : routename,
				'agent_name':agent_name,
				'mobile':mobile,
				'bankno': bankno,
				'bank_branch':bank_branch,
				'bankname':bankname,
				'ifsc':ifsc,
				#'idate_range': date_range,
				'instamt': instamt,
				#'loan_amt':loan_amt,
				'total_netvalue':total_netvalue,
				'total_milkvalue': total_milkvalue,
				'total_rateltr':total_rateltr,
				'total_commsum_detail':total_commsum_detail,
				'total_kgssum_detail01':total_kgssum_detail01,
				'total_ltrssum_detail01':total_ltrssum_detail01,
				'total_fatsum_detail01':total_fatsum_detail01,
				'total_snfsum_detail01':total_snfsum_detail01,
				'total_ratesum_detail01':total_ratesum_detail01,
				'total_amountsum_detail01':total_amountsum_detail01,
				'total_pelsum_detail01':total_pelsum_detail01,
				'total_totalsum_detail01':total_totalsum_detail01,
				'address1':address1,
				'total_totalsum1':total_totalsum1,
				'total_additions1':total_additions1,
				'total_recoveries1':total_recoveries1,
				'cartage1':cartage1,
				'autofine1':autofine1,
				'aothers1': aothers1,
				'cattlefeed1':cattlefeed1,
				'stores1':stores1,
				'medicine1':medicine1,
				'insurance1':insurance1,
				'aarrears1':aarrears1,
				'commission1':commission1,
				'rothers1':rothers1,
				#'medicine':medicine,
				'stationary1':stationary1,
				'seed1':seed1,
				'emtcharges1':emtcharges1,
				'rothers1':rothers1,
				'name1': name1,
				'pin1': pin1,
				'centre_code1':centre_code1,
				'centername1':centername1,
				'route_number1':route_number1,
				'routename1' : routename1,
				'agent_name1':agent_name1,
				'mobile1':mobile1,
				'bankno1': bankno1,
				'bank_branch1':bank_branch1,
				'bankname1':bankname1,
				'ifsc1':ifsc1,
				#'idate_range': date_range,
				'instamt1': instamt1,
				#'loan_amt':loan_amt,
				'total_netvalue1':total_netvalue1,
				'total_milkvalue1': total_milkvalue1,
				'total_rateltr1':total_rateltr1,
				'total_commsum_detail01':total_commsum_detail01,



			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_milkbill.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = "milkbill.pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		except Exception as err:
			
			if search("local variable",str(err)):
				messages.error(request,'Some Data Missing')

			elif search("[Errno 5] Input/output error",str(err)):
				messages.error(request,'Please contact your system Administrator :  +91 9949124471')
		
			else:		
				messages.error(request,err)
			return render(request,'milkbill.html',locals())
# Module -Reports - Transcations #3 - Displaying the milkbill pdf  report- pdf_milkbill.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Karthik
class GeneratePdfMilkbillcenter(View):
	def get(self, request,slug3,  *args, **kwargs):
		try:
			template = get_template('pdf_milkbillbycenter.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)

			#cursor22 =connection.cursor()
			#Dateview = "select datefrom ,dateto,routecode from school_RPT_Milkbilldate "
			#print(Dateview)
			#cursor22.execute(Dateview)
			#milkbilldate = cursor22.fetchall()
			#for row in milkbilldate:
		#		datefrom=row[0]
	#		dateto = row[1]
	#			routecode = row[2]
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:	
				datefrom = request.session['firstdate']
				dateto = request.session['lastdate']
				routecode = request.session['getroute']
				
				datefrom111 =datetime.datetime.strptime(datefrom, '%Y-%m-%d').strftime('%d-%m-%Y')
				print(datefrom111)
				print("@2.3555",datefrom111)
				dateto11 = datetime.datetime.strptime(dateto, '%Y-%m-%d').strftime('%d-%m-%Y')	
				print(dateto11)

				cursor2 = connection.cursor()
				dateget = "select datediff('%s','%s') as days "%(str(dateto),str(datefrom))
				print(dateget)
				cursor2.execute(dateget)
				dateset = cursor2.fetchall()
				for row in dateset :
					datefrom1 = row[0]
				#	dateto1 = row[1]
				#	datediff = row[2]

					print(datefrom1)
		#			print(dateto1)
		#			print(datediff)
				
				noofdays = datefrom1

				cursor14 = connection.cursor()

				branch14 = "select count(*),D.id id,D.date date,D.shift shift,D.milk_type milk_type,D.branch branch,D.centercode centercode,D.qty kgs,D.ltrs ltrs,D.amount amount,D.ltrrate ltrrate,D.fat fat,D.snf snf,D.comm comm,D.pel pel,D.net net from %s.school_daily_data D  where D.date between '%s' and '%s'  and D.centercode = '%s' order by date,shift "%(str(brch),str(datefrom),str(dateto),str(slug3))  
						
				print(branch14)
				cursor14.execute(branch14)
				datavalues = cursor14.fetchall()
				for row in datavalues:
					valuecount=row[0]
					

				centergetdata = "select D.id id,D.date date,D.shift shift,D.milk_type milk_type,D.branch branch,D.centercode centercode,D.qty kgs,D.ltrs ltrs,D.amount amount,D.ltrrate ltrrate,D.fat fat,D.snf snf,D.comm comm,D.pel pel,D.net net from school_daily_data D  where D.date between '%s' and '%s'  and D.centercode = '%s' order by date,shift "%(str(datefrom),str(dateto),str(slug3))
				
				data= RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
				total_listkgs = []
				total_kgssum_detail = 0
				total_kgsall = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
				for i in total_kgsall:
					total_listkgs.append(i.kgs)
					total_kgssum_detail = round(sum(total_listkgs),2)
					print(2.3)
					print(total_kgssum_detail)

				total_listltrs = []
				total_ltrssum_detail = 0
				total_ltrsall = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
				for i in total_ltrsall:
					total_listltrs.append(i.ltrs)
					total_ltrssum_detail = round(sum(total_listltrs),4)
				total_listfat = []
				total_fatsum_detail = 0
				total_fatsum_detail1 = 0
				total_fatall = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
				#total_fatall1 = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata).count()
				for i in total_fatall:
					total_listfat.append(i.fat)
					total_fatsum_detail1= round(sum(total_listfat),3)
					total_fatsum_detail = total_fatsum_detail1/valuecount
				total_listsnf = []
				total_snfsum_detail = 0
				total_snfsum_detail1 = 0
				total_snfall = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
				#total_snfall1 = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata).count()
				for i in total_snfall:
					total_listsnf.append(i.snf)
					total_snfsum_detail1 = round(sum(total_listsnf),2)
					total_snfsum_detail = total_snfsum_detail1/valuecount
				total_listrate = []
				total_ratesum_detail = 0
				total_ratesum_detail1 =0
				total_rateall =RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
				#total_rateall1 =RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata).count()
				for i in total_rateall:
					total_listrate.append(i.ltrrate)
					total_ratesum_detail1 = round(sum(total_listrate),2)
					total_ratesum_detail= total_ratesum_detail1/valuecount
				total_listamount = []
				total_amountsum_detail = 0.0
				total_amountall = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
				for i in total_amountall:
					total_listamount.append(i.amount)
					total_amountsum_detail = round(sum(total_listamount),2)
				total_listcomm = []
				total_commsum_detail = 0.0
				total_commall = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
				for i in total_commall:
					total_listcomm.append(i.comm)
					total_commsum_detail = round(sum(total_listcomm),2)
				total_listpel = []
				total_pelsum_detail = 0.0
				total_pelall = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
				for i in total_pelall:
					total_listpel.append(i.pel)
					total_pelsum_detail = round(sum(total_listpel),2)
				total_listtotal = []
				total_totalsum_detail = 0.0
				total_totalall = RPT_Milkbillvoucher.objects.using(brch).raw(centergetdata)
				for i in total_totalall:
					total_listtotal.append(i.net)
					total_totalsum_detail = round(sum(total_listtotal),2)

				#total_countamount = []
				#total_amountcount_detail = 0.0
				#total_amountcount = RPT_Milkbillvoucher.objects.filter(centercode = slug3).values('date','date').distinct().count()
				#total_amountcount_detail = total_amountcount
				
				cursor4 = connection.cursor()

				branch4 = "select B.address,B.code,B.pin,D.branch from school_branch B,%s.school_daily_data D where D.branch=B.code and centercode ='%s' "%(str(brch),str(slug3))  
						
				print(branch4)
				cursor4.execute(branch4)
				branchdata = cursor4.fetchall()
				for row in branchdata:
					address=row[0]
					name = row[1]
					pin = row[2]

				cursor5 = connection.cursor()
				 
				centerdetails = "select centre_code,name,C.route_number,R.route_name,agent_name,mobile,bankno,C.branch,bankname,ifsc from %s.school_Center C join %s.school_daily_data D on D.centercode=C.centre_code  and D.centercode='%s' join %s.school_route R on R.route_number = C.route_number "%(str(brch),str(brch),str(slug3),str(brch))  
						
				print(centerdetails)
				cursor5.execute(centerdetails)
				centerdata = cursor5.fetchall()
				for row in centerdata:
					centre_code=row[0]
					centername = row[1]
					route_number = row[2]
					routename = row[3]
					agent_name = row[4]
					mobile = row[5]
					bankno = row[6]
					bank_branch = row[7]
					bankname = row[8]
					ifsc = row[9]

				#cursor6 = connection.cursor()

				


				cursor6 = connection.cursor()
				loandetails = "select L.idate,sum(L.installment_amt),sum(L.interest_amt) from %s.school_loanbillsdata L where L.centercode='%s'   and L.idate between '%s' and '%s' group by L.centercode"%(str(brch),str(slug3),str(datefrom),str(dateto))  
						
				print(loandetails)
				cursor6.execute(loandetails)
				loanupdate = cursor6.fetchall()
				instamt2=0.0
				instamt = 0.0
				for row in loanupdate :
					installment_amt = row[1]
					interest_amt = row[2]
					instamt=installment_amt
					if instamt is not None:
						instamt2 = instamt
						print("@3701 instamt2",instamt2)
					else :
						instamt2=0.0
						print("@3704 instamt2",instamt2)

				#total_netvalue = round((total_totalsum_detail - instamt2),2)
				
				#total_rateltr = round(((total_ltrssum_detail)/total_amountcount_detail),2)

				

				s= noofdays + 1
					#list_of_nums = map(int, re.findall('\d+', s))
					#k = int(filter(str.isdigit, s))
				print(s)
				total_rateltr = round(((total_ltrssum_detail)/s),2)
				

				cursor12 = connection.cursor()

				addition = "select A.id,A.date,sum(A.cartage),sum(A.cattlefeed),(A.centercode),sum(autofine),sum(stores),sum(aarrears),sum(medicine),sum(aothers),sum(stationary),sum(A.commission),sum(emtcharges),sum(seed),sum(insurance),sum(rarrears),sum(rothers) from %s.school_Additions A   where  A.centercode ='%s' and A.date between '%s' and '%s'  group by A.centercode "%(str(brch),str(slug3),str(datefrom),str(dateto))
						
				print(addition)
				cursor12.execute(addition)
				cartage = 0.0
				cattlefeed = 0.0
				autofine =0.0
				stores = 0.0
				aarrears = 0.0
				medicine = 0.0
				aothers = 0.0
				stationary = 0.0
				commission = 0.0
				emtcharges = 0.0
				seed = 0.0
				insurance =0.0
				rarrears = 0.0
				rothers = 0.0
				additiondata = cursor12.fetchall()
				for row in additiondata:
					date1=row[1]
					cartage = row[2]
					cattlefeed = row[3]
					centercode=row[4]
					autofine=row[5]
					stores = row[6]
					aarrears= row[7]
					medicine=row[8]
					aothers=row[9]
					stationary= row[10]
					commission=row[11]
					emtcharges=row[12]
					seed= row[13]
					insurance = row[14]
					rarrears= row[15]
					rothers = row[16]
					#remarks = row[17]

				total_additions = round((cartage + autofine +aarrears+ aothers +commission),3)
				
				total_recoveries = round((cattlefeed + stores + stationary+medicine+emtcharges+insurance+seed+ rarrears+rothers +instamt2),3)
				total_totalsum1 = round((total_totalsum_detail + total_additions),3)
				
				total_netvalue = round((total_totalsum1 - total_recoveries),2)
				print(total_netvalue)
				print(2.56)
				print(total_totalsum1)
				print(total_ltrssum_detail)
				total_milkvalue = round((total_totalsum1/total_ltrssum_detail),2)
				print(total_milkvalue) 

			else:
				datefrom = request.session['firstdate']
				dateto = request.session['lastdate']
				routecode = request.session['getroute']

				cursor2 = connection.cursor()
				dateget = "select datediff('%s','%s') as days "%(str(dateto),str(datefrom))
				print(dateget)
				cursor2.execute(dateget)
				dateset = cursor2.fetchall()
				for row in dateset :
					datefrom1 = row[0]
				#	dateto1 = row[1]
				#	datediff = row[2]

					print(datefrom1)
		#			print(dateto1)
		#			print(datediff)
				
				noofdays = datefrom1

				centergetdata = "select D.id id,D.date date,D.shift shift,D.milk_type milk_type,D.branch branch,D.centercode centercode,D.qty kgs,D.ltrs ltrs,D.amount amount,D.ltrrate ltrrate,D.fat fat,D.snf snf,D.comm comm,D.pel pel,D.net net from %s.school_daily_data D  where D.date between '%s' and '%s'  and D.centercode = '%s' "%(str(brch),str(datefrom),str(dateto),str(slug3))
				
				data= RPT_Milkbillvoucher.objects.raw(centergetdata)
				total_listkgs = []
				total_kgssum_detail = 0
				total_kgsall = RPT_Milkbillvoucher.objects.raw(centergetdata)
				for i in total_kgsall:
					total_listkgs.append(i.kgs)
					total_kgssum_detail = round(sum(total_listkgs),2)
				total_listltrs = []
				total_ltrssum_detail = 0
				total_ltrsall = RPT_Milkbillvoucher.objects.raw(centergetdata)
				for i in total_ltrsall:
					total_listltrs.append(i.ltrs)
					total_ltrssum_detail = round(sum(total_listltrs),4)
				total_listfat = []
				total_fatsum_detail = 0
				total_fatall = RPT_Milkbillvoucher.objects.raw(centergetdata)
				for i in total_fatall:
					total_listfat.append(i.fat)
					total_fatsum_detail = round(sum(total_listfat),3)
				total_listsnf = []
				total_snfsum_detail = 0
				total_snfall = RPT_Milkbillvoucher.objects.raw(centergetdata)
				for i in total_snfall:
					total_listsnf.append(i.snf)
					total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_ratesum_detail = 0
				total_rateall =RPT_Milkbillvoucher.objects.raw(centergetdata)
				for i in total_rateall:
					total_listrate.append(i.ltrrate)
					total_ratesum_detail = round(sum(total_listrate),2)
				total_listamount = []
				total_amountsum_detail = 0.0
				total_amountall = RPT_Milkbillvoucher.objects.raw(centergetdata)
				for i in total_amountall:
					total_listamount.append(i.amount)
					total_amountsum_detail = round(sum(total_listamount),2)
				total_listcomm = []
				total_commsum_detail = 0.0
				total_commall = RPT_Milkbillvoucher.objects.raw(centergetdata)
				for i in total_commall:
					total_listcomm.append(i.comm)
					total_commsum_detail = round(sum(total_listcomm),2)
				total_listpel = []
				total_pelsum_detail = 0.0
				total_pelall = RPT_Milkbillvoucher.objects.raw(centergetdata)
				for i in total_pelall:
					total_listpel.append(i.pel)
					total_pelsum_detail = round(sum(total_listpel),2)
				total_listtotal = []
				total_totalsum_detail = 0.0
				total_totalall = RPT_Milkbillvoucher.objects.raw(centergetdata)
				for i in total_totalall:
					total_listtotal.append(i.net)
					total_totalsum_detail = round(sum(total_listtotal),2)

				total_countamount = []
				total_amountcount_detail = 0.0
				total_amountcount = RPT_Milkbillvoucher.objects.filter(centercode = slug3).values('date','date').distinct().count()
				total_amountcount_detail = total_amountcount
				
				cursor4 = connection.cursor()

				branch4 = "select B.address,B.name,B.pin,D.branch from school_branch B,school_daily_data D where D.branch=B.name and centercode ='%s' "%(str(slug3))  
						
				print(branch4)
				cursor4.execute(branch4)
				branchdata = cursor4.fetchall()
				for row in branchdata:
					address=row[0]
					name = row[1]
					pin = row[2]

				cursor5 = connection.cursor()
				 
				centerdetails = "select centre_code,name,C.route_number,R.route_name,agent_name,mobile,bankno,C.branch,bankname,ifsc from school_Center C join school_daily_data D on D.centercode=C.centre_code  and D.centercode='%s' join school_route R on R.route_number = C.route_number "%(str(slug3))  
						
				print(centerdetails)
				cursor5.execute(centerdetails)
				centerdata = cursor5.fetchall()
				for row in centerdata:
					centre_code=row[0]
					centername = row[1]
					route_number = row[2]
					routename = row[3]
					agent_name = row[4]
					mobile = row[5]
					bankno = row[6]
					bank_branch = row[7]
					bankname = row[8]
					ifsc = row[9]

				#cursor6 = connection.cursor()

				


				cursor6 = connection.cursor()
				loandetails = "select L.idate,L.installment_amt,L.interest_amt from school_loanbillsdata L,school_daily_data D where D.centercode='%s'  and D.centercode = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug3),str(datefrom),str(dateto))  
						
				print(loandetails)
				cursor6.execute(loandetails)
				loanupdate = cursor6.fetchall()
				instamt2=0.0
				instamt = 0.0
				for row in loanupdate :
					installment_amt = row[1]
					interest_amt = row[2]
					instamt=installment_amt
					if instamt is not None:
						instamt2 = instamt
						print("@3701 instamt2",instamt2)
					else :
						instamt2=0.0
						print("@3704 instamt2",instamt2)

				#total_netvalue = round((total_totalsum_detail - instamt2),2)
				
				#total_rateltr = round(((total_ltrssum_detail)/total_amountcount_detail),2)

				

				s= noofdays + 1
					#list_of_nums = map(int, re.findall('\d+', s))
					#k = int(filter(str.isdigit, s))
				print(s)
				total_rateltr = round(((total_ltrssum_detail)/s),2)
				

				cursor12 = connection.cursor()

				addition = "select A.id,A.date,A.cartage,A.cattlefeed,A.centercode,autofine,stores,aarrears,medicine,aothers,stationary,A.commission,emtcharges,seed,insurance,rarrears,rothers from school_Additions A,school_daily_data D   where D.centercode=A.centercode and D.centercode ='%s' and A.date between '%s' and '%s'  group by D.centercode "%(str(slug3),str(datefrom),str(dateto))
						
				print(addition)
				cursor12.execute(addition)
				cartage = 0.0
				cattlefeed = 0.0
				autofine =0.0
				stores = 0.0
				aarrears = 0.0
				medicine = 0.0
				aothers = 0.0
				stationary = 0.0
				commission = 0.0
				emtcharges = 0.0
				seed = 0.0
				insurance =0.0
				rarrears = 0.0
				rothers = 0.0
				additiondata = cursor12.fetchall()
				for row in additiondata:
					date1=row[1]
					cartage = row[2]
					cattlefeed = row[3]
					centercode=row[4]
					autofine=row[5]
					stores = row[6]
					aarrears= row[7]
					medicine=row[8]
					aothers=row[9]
					stationary= row[10]
					commission=row[11]
					emtcharges=row[12]
					seed= row[13]
					insurance = row[14]
					rarrears= row[15]
					rothers = row[16]
					#remarks = row[17]

				total_additions = round((cartage + autofine + aothers),3)
				total_recoveries = round((cattlefeed + stores + stationary+emtcharges+seed+ rothers +instamt),3)
				total_totalsum1 = round((total_totalsum_detail + total_additions),3)
				total_netvalue = round((total_totalsum1 - total_recoveries),2)
				print(total_netvalue)
				total_milkvalue = round((total_totalsum1/total_ltrssum_detail),2)
				print(total_milkvalue) 
			
			context = {
				
				#'center' : slug3,
				'data':data,
				#'loanbill':loanbill,
				'datefrom':datefrom,
				'datefrom111':datefrom111,
				'dateto11':dateto11,
				'dateto': dateto,
				'total_kgssum_detail':total_kgssum_detail,
				'total_ltrssum_detail':total_ltrssum_detail,
				'total_fatsum_detail':total_fatsum_detail,
				'total_snfsum_detail':total_snfsum_detail,
				'total_ratesum_detail':total_ratesum_detail,
				'total_amountsum_detail':total_amountsum_detail,
				'total_pelsum_detail':total_pelsum_detail,
				'total_totalsum_detail':total_totalsum_detail,
				'address':address,
				'total_totalsum1':total_totalsum1,
				'total_additions':total_additions,
				'total_recoveries':total_recoveries,
				'cartage':cartage,
				'autofine':autofine,
				'aothers': aothers,
				'cattlefeed':cattlefeed,
				'stores':stores,
				'medicine':medicine,
				'insurance':insurance,
				'aarrears':aarrears,
				'commission':commission,
				'rothers':rothers,
				#'medicine':medicine,
				'stationary':stationary,
				'seed':seed,
				'emtcharges':emtcharges,
				'rothers':rothers,
				'name': name,
				'pin': pin,
				'centre_code':centre_code,
				'centername':centername,
				'route_number':route_number,
				'routename' : routename,
				'agent_name':agent_name,
				'mobile':mobile,
				'bankno': bankno,
				'bank_branch':bank_branch,
				'bankname':bankname,
				'ifsc':ifsc,
				#'idate_range': date_range,
				'instamt': instamt,
				#'loan_amt':loan_amt,
				'total_netvalue':total_netvalue,
				'total_milkvalue': total_milkvalue,
				'total_rateltr':total_rateltr,
				'total_commsum_detail':total_commsum_detail,



			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_milkbillbycenter.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug3+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		except Exception as err:
			
			if search("local variable",str(err)):
				messages.error(request,'Some Data Missing')

			elif search("[Errno 5] Input/output error",str(err)):
				messages.error(request,'Please contact your system Administrator :  +91 7075696768')
		
			else:		
				messages.error(request,err)
			return render(request,'milkbill.html',locals())

def routewisebillabstract(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		route = Route.objects.using(brch).all()
		center = Center.objects.using(brch).all()
		branch = Branch.objects.using(brch).all()
		today = date.today()
		#cloan = Cloan.objects.all()
		#cursor = connection.cursor()
		t_m = datetime.datetime.now().month
		#t_y = datetime.datetime.now().year
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	#dc = RPT_consolidated.objects.filter(date__range=[datefrom, dateto]).distinct()
	# return HttpResponse(end_of_m)
		if request.session.has_key('name'):
			if request.method == "POST":
				datefrom = request.POST["datefrom"]
				dateto = request.POST["dateto"]
				routecode =  request.POST["routecode"]
				centercode = request.POST["centercode"]
	#
	#			cursor1 = connection.cursor()
	#			DataDel = "delete from  school_RPT_Routewisebillabstract"
	#		cursor1.execute(DataDel)
		#		cursor = connection.cursor()
		#			#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
			#	DataInsert = "insert into school_RPT_Routewisebillabstract (routecode,centercode,qty,Ltrs,fatkgs,afat,snfkgs,asnf,amount,snf1,comm,exsamt,cartage,aothers,gamount,total,stores,aarrears,rothers,net) select D.routecode,D.centercode,sum(D.qty),round(sum(D.ltrs),2),round(avg(D.fat),2),round(sum(D.fat),2),round(sum(D.snf),2),round(avg(D.snf),2),round(sum(amount),2),D.tsrate,D.comm,round(sum(amount),2),A.cartage,A.aothers,amount,L.total,A.stores,A.aarrears,A.rothers,D.net from school_daily_data D,school_additions A,school_cloan L where D.centercode = L.center group by D.routecode"
			#		#cursor1.execute(DataInsert)
				#print(DataInsert)      
				#cursor.execute(DataInsert)
				first = "select D.id id,D.routecode routecode,D.centercode centercode,sum(D.qty) qty,round(sum(D.ltrs),2) Ltrs,round(avg(D.fat),2) fatkgs,round(sum(D.fat),2) afat,round(sum(D.snf),2) snfkgs,round(avg(D.snf),2) asnf,round(sum(amount),2) amount,D.tsrate Snf1,D.comm comm,round(sum(amount),2) exsamt,A.cartage cartage,A.aothers aothers,round(amount,2) gamount,round(L.total,2) total,A.stores stores,A.aarrears aarrears,A.rothers rothers,D.net net from %s.school_daily_data D, %s.school_additions A, %s.school_cloan L where D.centercode = L.center and D.centercode = A.centercode and A.date between '%s' and '%s' and L.date between '%s' and '%s'  and D.date between '%s' and '%s' group by D.routecode"%(str(brch),str(brch),str(brch),str(datefrom),str(dateto),str(datefrom),str(dateto),str(datefrom),str(dateto))
				print(first)
				print(2.3)
				second = "select D.id id,D.routecode routecode,D.centercode centercode,sum(D.qty) qty,round(sum(D.ltrs),2) Ltrs,round(avg(D.fat),2) fatkgs,round(sum(D.fat),2) afat,round(sum(D.snf),2) snfkgs,round(avg(D.snf),2) asnf,round(sum(amount),2) amount,D.tsrate Snf1,D.comm comm,round(sum(amount),2) exsamt,A.cartage cartage,A.aothers aothers,round(amount,2) gamount,round(L.total,2) total,A.stores stores,A.aarrears aarrears,A.rothers rothers,D.net net from %s.school_daily_data D, %s.school_additions A, %s.school_cloan L where D.centercode = L.center and D.centercode = A.centercode and A.date between '%s' and '%s' and L.date between '%s' and '%s'  and D.date between '%s' and '%s' and D.centercode = '%s' group by D.routecode"%(str(brch),str(brch),str(brch),str(datefrom),str(dateto),str(datefrom),str(dateto),str(datefrom),str(dateto),str(centercode))
				print(2.1)
				third = "select D.id id,D.routecode routecode,D.centercode centercode,sum(D.qty) qty,round(sum(D.ltrs),2) Ltrs,round(avg(D.fat),2) fatkgs,round(sum(D.fat),2) afat,round(sum(D.snf),2) snfkgs,round(avg(D.snf),2) asnf,round(sum(amount),2) amount,D.tsrate Snf1,D.comm comm,round(sum(amount),2) exsamt,A.cartage cartage,A.aothers aothers,round(amount,2) gamount,round(L.total,2) total,A.stores stores,A.aarrears aarrears,A.rothers rothers,D.net net from %s.school_daily_data D, %s.school_additions A, %s.school_cloan L where D.centercode = L.center and D.centercode = A.centercode and A.date between '%s' and '%s' and L.date between '%s' and '%s'  and D.date between '%s' and '%s' and D.routecode = '%s' group by D.routecode"%(str(brch),str(brch),str(brch),str(datefrom),str(dateto),str(datefrom),str(dateto),str(datefrom),str(dateto),str(routecode))
				print(2.2)
				fourth = "select D.id id,D.routecode routecode,D.centercode centercode,sum(D.qty) qty,round(sum(D.ltrs),2) Ltrs,round(avg(D.fat),2) fatkgs,round(sum(D.fat),2) afat,round(sum(D.snf),2) snfkgs,round(avg(D.snf),2) asnf,round(sum(amount),2) amount,D.tsrate Snf1,D.comm comm,round(sum(amount),2) exsamt,A.cartage cartage,A.aothers aothers,round(amount,2) gamount,round(L.total,2) total,A.stores stores,A.aarrears aarrears,A.rothers rothers,D.net net from %s.school_daily_data D, %s.school_additions A, %s.school_cloan L where D.centercode = L.center and D.centercode = A.centercode and A.date between '%s' and '%s' and L.date between '%s' and '%s'  and D.date between '%s' and '%s' and D.centercode='%s' and D.routecode = '%s' group by D.routecode"%(str(brch),str(brch),str(brch),str(datefrom),str(dateto),str(datefrom),str(dateto),str(datefrom),str(dateto),str(centercode),str(routecode))
				print(2.4)
				if routecode == 'all' and centercode == 'all':
					ra = RPT_Routewisebillabstract.objects.using(brch).raw(first)
					total_kgsall = []
					total_listkgs = []
					total_listqty = []
					total_listltrs =[]
					total_listfat =[]
					total_listsnf =[]
					total_listfatkgs =[]
					total_listsnfkgs =[]
					total_listamount =[]
					total_rateqtysum_detail = 0.00
					total_rateltrsum_detail=0.00
					total_ratefatkgs_detail=0.00
					total_rateafatkgs_detail=0.00
					total_ratesnfkgs_detail=0.00
					total_rateasnfkgs_detail=0.00
					total_rateamount_detail=0.00
					total_ratesnf_detail=0.00
					total_ratecomm_detail=0.00
					total_rateexsamt_detail=0.00
					total_ratecartage_detail=0.00
					total_rateaothers_detail =0.00
					total_rategamt_detail=0.00
					total_ratestores_detail=0.00
					total_raterothers_detail=0.00
					total_ratenet_detail =0.00
					total_total_detail =0.00

					
					total_kgsall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_kgsall:
						total_listkgs.append(i.qty)
						total_rateqtysum_detail = round(sum(total_listkgs),2)
					total_listqty = []
					total_qtyall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_qtyall:
						total_listqty.append(i.Ltrs)
						total_rateltrsum_detail = round(sum(total_listqty),2)
					total_listltrs = []
					total_ltrall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_ltrall:
						total_listltrs.append(i.fatkgs)
						total_ratefatkgs_detail = round(sum(total_listltrs),2)
					total_listfatkgs = []
					total_fatkgsall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_fatkgsall:
						total_listfatkgs.append(i.afat)
						total_rateafatkgs_detail = round(sum(total_listfatkgs),2)
					total_listafatkgs = []
					total_afatkgsall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_afatkgsall:
						total_listafatkgs.append(i.snfkgs)
						total_ratesnfkgs_detail = round(sum(total_listafatkgs),2)
					total_listsnfkgs = []
					total_snfkgsall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_snfkgsall:
						total_listsnfkgs.append(i.asnf)
						total_rateasnfkgs_detail = round(sum(total_listsnfkgs),2)
					total_listasnfkgs = []
					total_asnfkgsall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_asnfkgsall:
						total_listasnfkgs.append(i.amount)
						total_rateamount_detail = round(sum(total_listasnfkgs),2)
					total_listamount = []
					total_amountall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_amountall:
						total_listamount.append(i.Snf1)
						total_ratesnf_detail = round(sum(total_listamount),2)
					total_listsnf = []
					total_snfall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_snfall:
						total_listsnf.append(i.comm)
						total_ratecomm_detail = round(sum(total_listsnf),2)
					total_listcomm = []
					total_commall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_commall:
						total_listcomm.append(i.aarrears)
						total_rateexsamt_detail = round(sum(total_listcomm),2)
					total_listexsamt = []
					total_exsamtall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_exsamtall:
						total_listexsamt.append(i.cartage)
						total_ratecartage_detail = round(sum(total_listexsamt),2)
					total_listcartage = []
					total_cartageall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_cartageall:
						total_listcartage.append(i.aothers)
						total_rateaothers_detail = round(sum(total_listcartage),2)
					total_listaothers = []
					total_othersall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_othersall:
						total_listaothers.append(i.gamount)
						total_rategamt_detail = round(sum(total_listaothers),2)
					total_listgamt = []
					total_gamtall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_gamtall:
						total_listgamt.append(i.stores)
						#total_listloan_no.append(i.stores)
						total_ratestores_detail = round(sum(total_listgamt),2)
					total_liststores = []
					total_storesall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_storesall:
						total_liststores.append(i.rothers)
						total_raterothers_detail = round(sum(total_liststores),2)
					total_listrothers = []
					total_rothersall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_rothersall:
						total_listrothers.append(i.net)
						total_ratenet_detail = round(sum(total_listrothers),2)
					total_listtotal =[]
					total_totalall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_totalall:
						total_listtotal.append(i.total)
						total_total_detail = round(sum(total_listtotal),2)
			
				elif routecode == 'all' and centercode != 'all':
					ra = RPT_Routewisebillabstract.objects.using(brch).raw(second)
					total_kgsall = []
					total_listkgs = []
					total_listqty = []
					total_listltrs =[]
					total_listfat =[]
					total_listsnf =[]
					total_listfatkgs =[]
					total_listsnfkgs =[]
					total_listamount =[]
					total_rateqtysum_detail = 0.00
					total_rateltrsum_detail=0.00
					total_ratefatkgs_detail=0.00
					total_rateafatkgs_detail=0.00
					total_ratesnfkgs_detail=0.00
					total_rateasnfkgs_detail=0.00
					total_rateamount_detail=0.00
					total_ratesnf_detail=0.00
					total_ratecomm_detail=0.00
					total_rateexsamt_detail=0.00
					total_ratecartage_detail=0.00
					total_rateaothers_detail =0.00
					total_rategamt_detail=0.00
					total_ratestores_detail=0.00
					total_raterothers_detail=0.00
					total_ratenet_detail =0.00
					total_total_detail =0.00
					
					total_kgsall = RPT_Routewisebillabstract.objects.using(brch).raw(second)
					for i in total_kgsall:
						total_listkgs.append(i.qty)
						total_rateqtysum_detail = round(sum(total_listkgs),2)
					total_listqty = []
					total_qtyall = RPT_Routewisebillabstract.objects.using(brch).raw(second)
					for i in total_qtyall:
						total_listqty.append(i.Ltrs)
						total_rateltrsum_detail = round(sum(total_listqty),2)
					total_listltrs = []
					total_ltrall = RPT_Routewisebillabstract.objects.using(brch).raw(second)
					for i in total_ltrall:
						total_listltrs.append(i.fatkgs)
						total_ratefatkgs_detail = round(sum(total_listltrs),2)
					total_listfatkgs = []
					total_fatkgsall = RPT_Routewisebillabstract.objects.using(brch).raw(second)
					for i in total_fatkgsall:
						total_listfatkgs.append(i.afat)
						total_rateafatkgs_detail = round(sum(total_listfatkgs),2)
					total_listafatkgs = []
					total_afatkgsall = RPT_Routewisebillabstract.objects.using(brch).raw(second)
					for i in total_afatkgsall:
						total_listafatkgs.append(i.snfkgs)
						total_ratesnfkgs_detail = round(sum(total_listafatkgs),2)
					total_listsnfkgs = []
					total_snfkgsall = RPT_Routewisebillabstract.objects.using(brch).raw(second)
					for i in total_snfkgsall:
						total_listsnfkgs.append(i.asnf)
						total_rateasnfkgs_detail = round(sum(total_listsnfkgs),2)
					total_listasnfkgs = []
					total_asnfkgsall = RPT_Routewisebillabstract.objects.using(brch).raw(second)
					for i in total_asnfkgsall:
						total_listasnfkgs.append(i.amount)
						total_rateamount_detail = round(sum(total_listasnfkgs),2)
					total_listamount = []
					total_amountall = RPT_Routewisebillabstract.objects.using(brch).raw(second)
					for i in total_amountall:
						total_listamount.append(i.Snf1)
						total_ratesnf_detail = round(sum(total_listamount),2)
					total_listsnf = []
					total_snfall = RPT_Routewisebillabstract.objects.using(brch).raw(second)
					for i in total_snfall:
						total_listsnf.append(i.comm)
						total_ratecomm_detail = round(sum(total_listsnf),2)
					total_listcomm = []
					total_commall = RPT_Routewisebillabstract.objects.using(brch).raw(second)
					for i in total_commall:
						total_listcomm.append(i.aarrears)
						total_rateexsamt_detail = round(sum(total_listcomm),2)
					total_listexsamt = []
					total_exsamtall = RPT_Routewisebillabstract.objects.using(brch).raw(second)
					for i in total_exsamtall:
						total_listexsamt.append(i.cartage)
						total_ratecartage_detail = round(sum(total_listexsamt),2)
					total_listcartage = []
					total_cartageall = RPT_Routewisebillabstract.objects.using(brch).raw(second)
					for i in total_cartageall:
						total_listcartage.append(i.aothers)
						total_rateaothers_detail = round(sum(total_listcartage),2)
					total_listaothers = []
					total_othersall = RPT_Routewisebillabstract.objects.using(brch).raw(second)
					for i in total_othersall:
						total_listaothers.append(i.gamount)
						total_rategamt_detail = round(sum(total_listaothers),2)
					total_listgamt = []
					total_gamtall = RPT_Routewisebillabstract.objects.using(brch).raw(second)
					for i in total_gamtall:
						total_listgamt.append(i.stores)
						#total_listloan_no.append(i.stores)
						total_ratestores_detail = round(sum(total_listgamt),2)
					total_liststores = []
					total_storesall = RPT_Routewisebillabstract.objects.using(brch).raw(second)
					for i in total_storesall:
						total_liststores.append(i.rothers)
						total_raterothers_detail = round(sum(total_liststores),2)
					total_listrothers = []
					total_rothersall = RPT_Routewisebillabstract.objects.using(brch).raw(second)
					for i in total_rothersall:
						total_listrothers.append(i.net)
						total_ratenet_detail = round(sum(total_listrothers),2)
					total_listtotal =[]
					total_totalall = RPT_Routewisebillabstract.objects.using(brch).raw(second)
					for i in total_totalall:
						total_listtotal.append(i.total)
						total_total_detail = round(sum(total_listtotal),2)
			
				elif centercode == 'all' and routecode != 'all':
					ra = RPT_Routewisebillabstract.objects.using(brch).raw(third)
					total_kgsall = []
					total_listkgs = []
					total_listqty = []
					total_listltrs =[]
					total_listfat =[]
					total_listsnf =[]
					total_listfatkgs =[]
					total_listsnfkgs =[]
					total_listamount =[]
					total_rateqtysum_detail = 0.00
					total_rateltrsum_detail=0.00
					total_ratefatkgs_detail=0.00
					total_rateafatkgs_detail=0.00
					total_ratesnfkgs_detail=0.00
					total_rateasnfkgs_detail=0.00
					total_rateamount_detail=0.00
					total_ratesnf_detail=0.00
					total_ratecomm_detail=0.00
					total_rateexsamt_detail=0.00
					total_ratecartage_detail=0.00
					total_rateaothers_detail =0.00
					total_rategamt_detail=0.00
					total_ratestores_detail=0.00
					total_raterothers_detail=0.00
					total_ratenet_detail =0.00
					total_total_detail =0.00
					total_kgsall = RPT_Routewisebillabstract.objects.using(brch).raw(third)

					for i in total_kgsall:
						total_listkgs.append(i.qty)
						total_rateqtysum_detail = round(sum(total_listkgs),2)
					total_listqty = []
					total_qtyall = RPT_Routewisebillabstract.objects.using(brch).raw(third)
					for i in total_qtyall:
						total_listqty.append(i.Ltrs)
						total_rateltrsum_detail = round(sum(total_listqty),2)
					total_listltrs = []
					total_ltrall = RPT_Routewisebillabstract.objects.using(brch).raw(third)
					for i in total_ltrall:
						total_listltrs.append(i.fatkgs)
						total_ratefatkgs_detail = round(sum(total_listltrs),2)
					total_listfatkgs = []
					total_fatkgsall = RPT_Routewisebillabstract.objects.using(brch).raw(third)
					for i in total_fatkgsall:
						total_listfatkgs.append(i.afat)
						total_rateafatkgs_detail = round(sum(total_listfatkgs),2)
					total_listafatkgs = []
					total_afatkgsall = RPT_Routewisebillabstract.objects.using(brch).raw(third)
					for i in total_afatkgsall:
						total_listafatkgs.append(i.snfkgs)
						total_ratesnfkgs_detail = round(sum(total_listafatkgs),2)
					total_listsnfkgs = []
					total_snfkgsall = RPT_Routewisebillabstract.objects.using(brch).raw(third)
					for i in total_snfkgsall:
						total_listsnfkgs.append(i.asnf)
						total_rateasnfkgs_detail = round(sum(total_listsnfkgs),2)
					total_listasnfkgs = []
					total_asnfkgsall = RPT_Routewisebillabstract.objects.using(brch).raw(third)
					for i in total_asnfkgsall:
						total_listasnfkgs.append(i.amount)
						total_rateamount_detail = round(sum(total_listasnfkgs),2)
					total_listamount = []
					total_amountall = RPT_Routewisebillabstract.objects.using(brch).raw(third)
					for i in total_amountall:
						total_listamount.append(i.Snf1)
						total_ratesnf_detail = round(sum(total_listamount),2)
					total_listsnf = []
					total_snfall = RPT_Routewisebillabstract.objects.using(brch).raw(third)
					for i in total_snfall:
						total_listsnf.append(i.comm)
						total_ratecomm_detail = round(sum(total_listsnf),2)
					total_listcomm = []
					total_commall = RPT_Routewisebillabstract.objects.using(brch).raw(third)
					for i in total_commall:
						total_listcomm.append(i.aarrears)
						total_rateexsamt_detail = round(sum(total_listcomm),2)
					total_listexsamt = []
					total_exsamtall = RPT_Routewisebillabstract.objects.using(brch).raw(third)
					for i in total_exsamtall:
						total_listexsamt.append(i.cartage)
						total_ratecartage_detail = round(sum(total_listexsamt),2)
					total_listcartage = []
					total_cartageall = RPT_Routewisebillabstract.objects.using(brch).raw(third)
					for i in total_cartageall:
						total_listcartage.append(i.aothers)
						total_rateaothers_detail = round(sum(total_listcartage),2)
					total_listaothers = []
					total_othersall = RPT_Routewisebillabstract.objects.using(brch).raw(third)
					for i in total_othersall:
						total_listaothers.append(i.gamount)
						total_rategamt_detail = round(sum(total_listaothers),2)
					total_listgamt = []
					total_gamtall = RPT_Routewisebillabstract.objects.using(brch).raw(third)
					for i in total_gamtall:
						total_listgamt.append(i.stores)
						#total_listloan_no.append(i.stores)
						total_ratestores_detail = round(sum(total_listgamt),2)
					total_liststores = []
					total_storesall = RPT_Routewisebillabstract.objects.using(brch).raw(third)
					for i in total_storesall:
						total_liststores.append(i.rothers)
						total_raterothers_detail = round(sum(total_liststores),2)
					total_listrothers = []
					total_rothersall = RPT_Routewisebillabstract.objects.using(brch).raw(third)
					for i in total_rothersall:
						total_listrothers.append(i.net)
						total_ratenet_detail = round(sum(total_listrothers),2)	
					total_listtotal =[]
					total_totalall = RPT_Routewisebillabstract.objects.using(brch).raw(third)
					for i in total_totalall:
						total_listtotal.append(i.total)
						total_total_detail = round(sum(total_listtotal),2)
						
				else:
					ra = RPT_Routewisebillabstract.objects.using(brch).raw(fourth)
					total_kgsall = []
					total_listkgs = []
					total_listqty = []
					total_listltrs =[]
					total_listfat =[]
					total_listsnf =[]
					total_listfatkgs =[]
					total_listsnfkgs =[]
					total_listamount =[]
					total_rateqtysum_detail = 0.00
					total_rateltrsum_detail=0.00
					total_ratefatkgs_detail=0.00
					total_rateafatkgs_detail=0.00
					total_ratesnfkgs_detail=0.00
					total_rateasnfkgs_detail=0.00
					total_rateamount_detail=0.00
					total_ratesnf_detail=0.00
					total_ratecomm_detail=0.00
					total_rateexsamt_detail=0.00
					total_ratecartage_detail=0.00
					total_rateaothers_detail =0.00
					total_rategamt_detail=0.00
					total_ratestores_detail=0.00
					total_raterothers_detail=0.00
					total_ratenet_detail =0.00
					total_total_detail =0.00
					total_kgsall = RPT_Routewisebillabstract.objects.using(brch).raw(fourth)

					for i in total_kgsall:
						total_listkgs.append(i.qty)
						total_rateqtysum_detail = round(sum(total_listkgs),2)
					total_listqty = []
					total_qtyall = RPT_Routewisebillabstract.objects.using(brch).raw(fourth)
					for i in total_qtyall:
						total_listqty.append(i.Ltrs)
						total_rateltrsum_detail = round(sum(total_listqty),2)
					total_listltrs = []
					total_ltrall = RPT_Routewisebillabstract.objects.using(brch).raw(fourth)
					for i in total_ltrall:
						total_listltrs.append(i.fatkgs)
						total_ratefatkgs_detail = round(sum(total_listltrs),2)
					total_listfatkgs = []
					total_fatkgsall = RPT_Routewisebillabstract.objects.using(brch).raw(fourth)
					for i in total_fatkgsall:
						total_listfatkgs.append(i.afat)
						total_rateafatkgs_detail = round(sum(total_listfatkgs),2)
					total_listafatkgs = []
					total_afatkgsall = RPT_Routewisebillabstract.objects.using(brch).raw(fourth)
					for i in total_afatkgsall:
						total_listafatkgs.append(i.snfkgs)
						total_ratesnfkgs_detail = round(sum(total_listafatkgs),2)
					total_listsnfkgs = []
					total_snfkgsall = RPT_Routewisebillabstract.objects.using(brch).raw(fourth)
					for i in total_snfkgsall:
						total_listsnfkgs.append(i.asnf)
						total_rateasnfkgs_detail = round(sum(total_listsnfkgs),2)
					total_listasnfkgs = []
					total_asnfkgsall = RPT_Routewisebillabstract.objects.using(brch).raw(fourth)
					for i in total_asnfkgsall:
						total_listasnfkgs.append(i.amount)
						total_rateamount_detail = round(sum(total_listasnfkgs),2)
					total_listamount = []
					total_amountall = RPT_Routewisebillabstract.objects.using(brch).raw(fourth)
					for i in total_amountall:
						total_listamount.append(i.Snf1)
						total_ratesnf_detail = round(sum(total_listamount),2)
					total_listsnf = []
					total_snfall = RPT_Routewisebillabstract.objects.using(brch).raw(fourth)
					for i in total_snfall:
						total_listsnf.append(i.comm)
						total_ratecomm_detail = round(sum(total_listsnf),2)
					total_listcomm = []
					total_commall = RPT_Routewisebillabstract.objects.using(brch).raw(fourth)
					for i in total_commall:
						total_listcomm.append(i.aarrears)
						total_rateexsamt_detail = round(sum(total_listcomm),2)
					total_listexsamt = []
					total_exsamtall = RPT_Routewisebillabstract.objects.using(brch).raw(fourth)
					for i in total_exsamtall:
						total_listexsamt.append(i.cartage)
						total_ratecartage_detail = round(sum(total_listexsamt),2)
					total_listcartage = []
					total_cartageall = RPT_Routewisebillabstract.objects.using(brch).raw(fourth)
					for i in total_cartageall:
						total_listcartage.append(i.aothers)
						total_rateaothers_detail = round(sum(total_listcartage),2)
					total_listaothers = []
					total_othersall = RPT_Routewisebillabstract.objects.using(brch).raw(fourth)
					for i in total_othersall:
						total_listaothers.append(i.gamount)
						total_rategamt_detail = round(sum(total_listaothers),2)
					total_listgamt = []
					total_gamtall = RPT_Routewisebillabstract.objects.using(brch).raw(fourth)
					for i in total_gamtall:
						total_listgamt.append(i.stores)
						#total_listloan_no.append(i.stores)
						total_ratestores_detail = round(sum(total_listgamt),2)
					total_liststores = []
					total_storesall = RPT_Routewisebillabstract.objects.using(brch).raw(fourth)
					for i in total_storesall:
						total_liststores.append(i.rothers)
						total_raterothers_detail = round(sum(total_liststores),2)
					total_listrothers = []
					total_rothersall = RPT_Routewisebillabstract.objects.using(brch).raw(fourth)
					for i in total_rothersall:
						total_listrothers.append(i.net)
						total_ratenet_detail = round(sum(total_listrothers),2)				
					total_listtotal =[]
					total_totalall = RPT_Routewisebillabstract.objects.using(brch).raw(fourth)
					for i in total_totalall:
						total_listtotal.append(i.total)
						total_total_detail = round(sum(total_listtotal),2)
			

				return render(request,'routewisebillabstract.html',locals())
		else:
			return render(request,'index.html',locals())
		return render(request,'routewisebillabstract.html',locals())

	else:
		route = Route.objects.all()
		center = Center.objects.all()
		branch = Branch.objects.all()
		today = date.today()
		#cloan = Cloan.objects.all()
		#cursor = connection.cursor()
		t_m = datetime.datetime.now().month
		#t_y = datetime.datetime.now().year
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	#dc = RPT_consolidated.objects.filter(date__range=[datefrom, dateto]).distinct()
	# return HttpResponse(end_of_m)
		if request.session.has_key('name'):
			if request.method == "POST":
				datefrom = request.POST["datefrom"]
				dateto = request.POST["dateto"]
				routecode =  request.POST["routecode"]
				centercode = request.POST["centercode"]
	#
	#			cursor1 = connection.cursor()
	#			DataDel = "delete from  school_RPT_Routewisebillabstract"
	#		cursor1.execute(DataDel)
		#		cursor = connection.cursor()
		#			#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
			#	DataInsert = "insert into school_RPT_Routewisebillabstract (routecode,centercode,qty,Ltrs,fatkgs,afat,snfkgs,asnf,amount,snf1,comm,exsamt,cartage,aothers,gamount,total,stores,aarrears,rothers,net) select D.routecode,D.centercode,sum(D.qty),round(sum(D.ltrs),2),round(avg(D.fat),2),round(sum(D.fat),2),round(sum(D.snf),2),round(avg(D.snf),2),round(sum(amount),2),D.tsrate,D.comm,round(sum(amount),2),A.cartage,A.aothers,amount,L.total,A.stores,A.aarrears,A.rothers,D.net from school_daily_data D,school_additions A,school_cloan L where D.centercode = L.center group by D.routecode"
			#		#cursor1.execute(DataInsert)
				#print(DataInsert)      
				#cursor.execute(DataInsert)
				first = "select D.id id,D.routecode routecode,D.centercode centercode,sum(D.qty) qty,round(sum(D.ltrs),2) Ltrs,round(avg(D.fat),2) fatkgs,round(sum(D.fat),2) afat,round(sum(D.snf),2) snfkgs,round(avg(D.snf),2) asnf,round(sum(amount),2) amount,D.tsrate Snf1,D.comm comm,round(sum(amount),2) exsamt,A.cartage cartage,A.aothers aothers,round(amount,2) gamount,round(L.total,2) total,A.stores stores,A.aarrears aarrears,A.rothers rothers,D.net net from school_daily_data D,school_additions A,school_cloan L where D.centercode = L.center and D.centercode = A.centercode and A.date between '%s' and '%s' and L.date between '%s' and '%s'  and D.date between '%s' and '%s' group by D.routecode"%(str(datefrom),str(dateto),str(datefrom),str(dateto),str(datefrom),str(dateto))
				second = "select D.id id,D.routecode routecode,D.centercode centercode,sum(D.qty) qty,round(sum(D.ltrs),2) Ltrs,round(avg(D.fat),2) fatkgs,round(sum(D.fat),2) afat,round(sum(D.snf),2) snfkgs,round(avg(D.snf),2) asnf,round(sum(amount),2) amount,D.tsrate Snf1,D.comm comm,round(sum(amount),2) exsamt,A.cartage cartage,A.aothers aothers,round(amount,2) gamount,round(L.total,2) total,A.stores stores,A.aarrears aarrears,A.rothers rothers,D.net net from school_daily_data D,school_additions A,school_cloan L where D.centercode = L.center and D.centercode = A.centercode and A.date between '%s' and '%s' and L.date between '%s' and '%s'  and D.date between '%s' and '%s' and D.centercode = '%s' group by D.routecode"%(str(datefrom),str(dateto),str(datefrom),str(dateto),str(datefrom),str(dateto),str(centercode))
				third = "select D.id id,D.routecode routecode,D.centercode centercode,sum(D.qty) qty,round(sum(D.ltrs),2) Ltrs,round(avg(D.fat),2) fatkgs,round(sum(D.fat),2) afat,round(sum(D.snf),2) snfkgs,round(avg(D.snf),2) asnf,round(sum(amount),2) amount,D.tsrate Snf1,D.comm comm,round(sum(amount),2) exsamt,A.cartage cartage,A.aothers aothers,round(amount,2) gamount,round(L.total,2) total,A.stores stores,A.aarrears aarrears,A.rothers rothers,D.net net from school_daily_data D,school_additions A,school_cloan L where D.centercode = L.center and D.centercode = A.centercode and A.date between '%s' and '%s' and L.date between '%s' and '%s'  and D.date between '%s' and '%s' and D.routecode = '%s' group by D.routecode"%(str(datefrom),str(dateto),str(datefrom),str(dateto),str(datefrom),str(dateto),str(routecode))
				fourth = "select D.id id,D.routecode routecode,D.centercode centercode,sum(D.qty) qty,round(sum(D.ltrs),2) Ltrs,round(avg(D.fat),2) fatkgs,round(sum(D.fat),2) afat,round(sum(D.snf),2) snfkgs,round(avg(D.snf),2) asnf,round(sum(amount),2) amount,D.tsrate Snf1,D.comm comm,round(sum(amount),2) exsamt,A.cartage cartage,A.aothers aothers,round(amount,2) gamount,round(L.total,2) total,A.stores stores,A.aarrears aarrears,A.rothers rothers,D.net net from school_daily_data D,school_additions A,school_cloan L where D.centercode = L.center and D.centercode = A.centercode and A.date between '%s' and '%s' and L.date between '%s' and '%s'  and D.date between '%s' and '%s' and D.centercode='%s' and D.routecode = '%s' group by D.routecode"%(str(datefrom),str(dateto),str(datefrom),str(dateto),str(datefrom),str(dateto),str(centercode),str(routecode))

				if routecode == 'all' and centercode == 'all':
					ra = RPT_Routewisebillabstract.objects.raw(first)
					total_kgsall = []
					total_listkgs = []
					total_listqty = []
					total_listltrs =[]
					total_listfat =[]
					total_listsnf =[]
					total_listfatkgs =[]
					total_listsnfkgs =[]
					total_listamount =[]
					total_kgsall = RPT_Routewisebillabstract.objects.raw(first)

					for i in total_kgsall:
						total_listkgs.append(i.qty)
						total_rateqtysum_detail = round(sum(total_listkgs),2)
					total_listqty = []
					total_qtyall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_qtyall:
						total_listqty.append(i.Ltrs)
						total_rateltrsum_detail = round(sum(total_listqty),2)
					total_listltrs = []
					total_ltrall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_ltrall:
						total_listltrs.append(i.fatkgs)
						total_ratefatkgs_detail = round(sum(total_listltrs),2)
					total_listfatkgs = []
					total_fatkgsall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_fatkgsall:
						total_listfatkgs.append(i.afat)
						total_rateafatkgs_detail = round(sum(total_listfatkgs),2)
					total_listafatkgs = []
					total_afatkgsall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_afatkgsall:
						total_listafatkgs.append(i.snfkgs)
						total_ratesnfkgs_detail = round(sum(total_listafatkgs),2)
					total_listsnfkgs = []
					total_snfkgsall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_snfkgsall:
						total_listsnfkgs.append(i.asnf)
						total_rateasnfkgs_detail = round(sum(total_listsnfkgs),2)
					total_listasnfkgs = []
					total_asnfkgsall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_asnfkgsall:
						total_listasnfkgs.append(i.amount)
						total_rateamount_detail = round(sum(total_listasnfkgs),2)
					total_listamount = []
					total_amountall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_amountall:
						total_listamount.append(i.Snf1)
						total_ratesnf_detail = round(sum(total_listamount),2)
					total_listsnf = []
					total_snfall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_snfall:
						total_listsnf.append(i.comm)
						total_ratecomm_detail = round(sum(total_listsnf),2)
					total_listcomm = []
					total_commall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_commall:
						total_listcomm.append(i.aarrears)
						total_rateexsamt_detail = round(sum(total_listcomm),2)
					total_listexsamt = []
					total_exsamtall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_exsamtall:
						total_listexsamt.append(i.cartage)
						total_ratecartage_detail = round(sum(total_listexsamt),2)
					total_listcartage = []
					total_cartageall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_cartageall:
						total_listcartage.append(i.aothers)
						total_rateaothers_detail = round(sum(total_listcartage),2)
					total_listaothers = []
					total_othersall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_othersall:
						total_listaothers.append(i.gamount)
						total_rategamt_detail = round(sum(total_listaothers),2)
					total_listgamt = []
					total_gamtall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_gamtall:
						total_listgamt.append(i.stores)
						#total_listloan_no.append(i.stores)
						total_ratestores_detail = round(sum(total_listgamt),2)
					total_liststores = []
					total_storesall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_storesall:
						total_liststores.append(i.rothers)
						total_raterothers_detail = round(sum(total_liststores),2)
					total_listrothers = []
					total_rothersall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_rothersall:
						total_listrothers.append(i.net)
						total_ratenet_detail = round(sum(total_listrothers),2)
					total_listtotal =[]
					total_totalall = RPT_Routewisebillabstract.objects.raw(first)
					for i in total_totalall:
						total_listtotal.append(i.total)
						total_total_detail = round(sum(total_listtotal),2)
			
				elif routecode == 'all' and centercode != 'all':
					ra = RPT_Routewisebillabstract.objects.raw(second)
					total_kgsall = []
					total_listkgs = []
					total_listqty = []
					total_listltrs =[]
					total_listfat =[]
					total_listsnf =[]
					total_listfatkgs =[]
					total_listsnfkgs =[]
					total_listamount =[]
					total_kgsall = RPT_Routewisebillabstract.objects.raw(second)

					for i in total_kgsall:
						total_listkgs.append(i.qty)
						total_rateqtysum_detail = round(sum(total_listkgs),2)
					total_listqty = []
					total_qtyall = RPT_Routewisebillabstract.objects.raw(second)
					for i in total_qtyall:
						total_listqty.append(i.Ltrs)
						total_rateltrsum_detail = round(sum(total_listqty),2)
					total_listltrs = []
					total_ltrall = RPT_Routewisebillabstract.objects.raw(second)
					for i in total_ltrall:
						total_listltrs.append(i.fatkgs)
						total_ratefatkgs_detail = round(sum(total_listltrs),2)
					total_listfatkgs = []
					total_fatkgsall = RPT_Routewisebillabstract.objects.raw(second)
					for i in total_fatkgsall:
						total_listfatkgs.append(i.afat)
						total_rateafatkgs_detail = round(sum(total_listfatkgs),2)
					total_listafatkgs = []
					total_afatkgsall = RPT_Routewisebillabstract.objects.raw(second)
					for i in total_afatkgsall:
						total_listafatkgs.append(i.snfkgs)
						total_ratesnfkgs_detail = round(sum(total_listafatkgs),2)
					total_listsnfkgs = []
					total_snfkgsall = RPT_Routewisebillabstract.objects.raw(second)
					for i in total_snfkgsall:
						total_listsnfkgs.append(i.asnf)
						total_rateasnfkgs_detail = round(sum(total_listsnfkgs),2)
					total_listasnfkgs = []
					total_asnfkgsall = RPT_Routewisebillabstract.objects.raw(second)
					for i in total_asnfkgsall:
						total_listasnfkgs.append(i.amount)
						total_rateamount_detail = round(sum(total_listasnfkgs),2)
					total_listamount = []
					total_amountall = RPT_Routewisebillabstract.objects.raw(second)
					for i in total_amountall:
						total_listamount.append(i.Snf1)
						total_ratesnf_detail = round(sum(total_listamount),2)
					total_listsnf = []
					total_snfall = RPT_Routewisebillabstract.objects.raw(second)
					for i in total_snfall:
						total_listsnf.append(i.comm)
						total_ratecomm_detail = round(sum(total_listsnf),2)
					total_listcomm = []
					total_commall = RPT_Routewisebillabstract.objects.raw(second)
					for i in total_commall:
						total_listcomm.append(i.aarrears)
						total_rateexsamt_detail = round(sum(total_listcomm),2)
					total_listexsamt = []
					total_exsamtall = RPT_Routewisebillabstract.objects.raw(second)
					for i in total_exsamtall:
						total_listexsamt.append(i.cartage)
						total_ratecartage_detail = round(sum(total_listexsamt),2)
					total_listcartage = []
					total_cartageall = RPT_Routewisebillabstract.objects.raw(second)
					for i in total_cartageall:
						total_listcartage.append(i.aothers)
						total_rateaothers_detail = round(sum(total_listcartage),2)
					total_listaothers = []
					total_othersall = RPT_Routewisebillabstract.objects.raw(second)
					for i in total_othersall:
						total_listaothers.append(i.gamount)
						total_rategamt_detail = round(sum(total_listaothers),2)
					total_listgamt = []
					total_gamtall = RPT_Routewisebillabstract.objects.raw(second)
					for i in total_gamtall:
						total_listgamt.append(i.stores)
						#total_listloan_no.append(i.stores)
						total_ratestores_detail = round(sum(total_listgamt),2)
					total_liststores = []
					total_storesall = RPT_Routewisebillabstract.objects.raw(second)
					for i in total_storesall:
						total_liststores.append(i.rothers)
						total_raterothers_detail = round(sum(total_liststores),2)
					total_listrothers = []
					total_rothersall = RPT_Routewisebillabstract.objects.raw(second)
					for i in total_rothersall:
						total_listrothers.append(i.net)
						total_ratenet_detail = round(sum(total_listrothers),2)
					total_listtotal =[]
					total_totalall = RPT_Routewisebillabstract.objects.raw(second)
					for i in total_totalall:
						total_listtotal.append(i.total)
						total_total_detail = round(sum(total_listtotal),2)
			
				elif centercode == 'all' and routecode != 'all':
					ra = RPT_Routewisebillabstract.objects.raw(third)
					total_kgsall = []
					total_listkgs = []
					total_listqty = []
					total_listltrs =[]
					total_listfat =[]
					total_listsnf =[]
					total_listfatkgs =[]
					total_listsnfkgs =[]
					total_listamount =[]
					total_kgsall = RPT_Routewisebillabstract.objects.raw(third)

					for i in total_kgsall:
						total_listkgs.append(i.qty)
						total_rateqtysum_detail = round(sum(total_listkgs),2)
					total_listqty = []
					total_qtyall = RPT_Routewisebillabstract.objects.raw(third)
					for i in total_qtyall:
						total_listqty.append(i.Ltrs)
						total_rateltrsum_detail = round(sum(total_listqty),2)
					total_listltrs = []
					total_ltrall = RPT_Routewisebillabstract.objects.raw(third)
					for i in total_ltrall:
						total_listltrs.append(i.fatkgs)
						total_ratefatkgs_detail = round(sum(total_listltrs),2)
					total_listfatkgs = []
					total_fatkgsall = RPT_Routewisebillabstract.objects.raw(third)
					for i in total_fatkgsall:
						total_listfatkgs.append(i.afat)
						total_rateafatkgs_detail = round(sum(total_listfatkgs),2)
					total_listafatkgs = []
					total_afatkgsall = RPT_Routewisebillabstract.objects.raw(third)
					for i in total_afatkgsall:
						total_listafatkgs.append(i.snfkgs)
						total_ratesnfkgs_detail = round(sum(total_listafatkgs),2)
					total_listsnfkgs = []
					total_snfkgsall = RPT_Routewisebillabstract.objects.raw(third)
					for i in total_snfkgsall:
						total_listsnfkgs.append(i.asnf)
						total_rateasnfkgs_detail = round(sum(total_listsnfkgs),2)
					total_listasnfkgs = []
					total_asnfkgsall = RPT_Routewisebillabstract.objects.raw(third)
					for i in total_asnfkgsall:
						total_listasnfkgs.append(i.amount)
						total_rateamount_detail = round(sum(total_listasnfkgs),2)
					total_listamount = []
					total_amountall = RPT_Routewisebillabstract.objects.raw(third)
					for i in total_amountall:
						total_listamount.append(i.Snf1)
						total_ratesnf_detail = round(sum(total_listamount),2)
					total_listsnf = []
					total_snfall = RPT_Routewisebillabstract.objects.raw(third)
					for i in total_snfall:
						total_listsnf.append(i.comm)
						total_ratecomm_detail = round(sum(total_listsnf),2)
					total_listcomm = []
					total_commall = RPT_Routewisebillabstract.objects.raw(third)
					for i in total_commall:
						total_listcomm.append(i.aarrears)
						total_rateexsamt_detail = round(sum(total_listcomm),2)
					total_listexsamt = []
					total_exsamtall = RPT_Routewisebillabstract.objects.raw(third)
					for i in total_exsamtall:
						total_listexsamt.append(i.cartage)
						total_ratecartage_detail = round(sum(total_listexsamt),2)
					total_listcartage = []
					total_cartageall = RPT_Routewisebillabstract.objects.raw(third)
					for i in total_cartageall:
						total_listcartage.append(i.aothers)
						total_rateaothers_detail = round(sum(total_listcartage),2)
					total_listaothers = []
					total_othersall = RPT_Routewisebillabstract.objects.raw(third)
					for i in total_othersall:
						total_listaothers.append(i.gamount)
						total_rategamt_detail = round(sum(total_listaothers),2)
					total_listgamt = []
					total_gamtall = RPT_Routewisebillabstract.objects.raw(third)
					for i in total_gamtall:
						total_listgamt.append(i.stores)
						#total_listloan_no.append(i.stores)
						total_ratestores_detail = round(sum(total_listgamt),2)
					total_liststores = []
					total_storesall = RPT_Routewisebillabstract.objects.raw(third)
					for i in total_storesall:
						total_liststores.append(i.rothers)
						total_raterothers_detail = round(sum(total_liststores),2)
					total_listrothers = []
					total_rothersall = RPT_Routewisebillabstract.objects.raw(third)
					for i in total_rothersall:
						total_listrothers.append(i.net)
						total_ratenet_detail = round(sum(total_listrothers),2)	
					total_listtotal =[]
					total_totalall = RPT_Routewisebillabstract.objects.raw(third)
					for i in total_totalall:
						total_listtotal.append(i.total)
						total_total_detail = round(sum(total_listtotal),2)
						
				else:
					ra = RPT_Routewisebillabstract.objects.raw(fourth)
					total_kgsall = []
					total_listkgs = []
					total_listqty = []
					total_listltrs =[]
					total_listfat =[]
					total_listsnf =[]
					total_listfatkgs =[]
					total_listsnfkgs =[]
					total_listamount =[]
					total_kgsall = RPT_Routewisebillabstract.objects.raw(fourth)

					for i in total_kgsall:
						total_listkgs.append(i.qty)
						total_rateqtysum_detail = round(sum(total_listkgs),2)
					total_listqty = []
					total_qtyall = RPT_Routewisebillabstract.objects.raw(fourth)
					for i in total_qtyall:
						total_listqty.append(i.Ltrs)
						total_rateltrsum_detail = round(sum(total_listqty),2)
					total_listltrs = []
					total_ltrall = RPT_Routewisebillabstract.objects.raw(fourth)
					for i in total_ltrall:
						total_listltrs.append(i.fatkgs)
						total_ratefatkgs_detail = round(sum(total_listltrs),2)
					total_listfatkgs = []
					total_fatkgsall = RPT_Routewisebillabstract.objects.raw(fourth)
					for i in total_fatkgsall:
						total_listfatkgs.append(i.afat)
						total_rateafatkgs_detail = round(sum(total_listfatkgs),2)
					total_listafatkgs = []
					total_afatkgsall = RPT_Routewisebillabstract.objects.raw(fourth)
					for i in total_afatkgsall:
						total_listafatkgs.append(i.snfkgs)
						total_ratesnfkgs_detail = round(sum(total_listafatkgs),2)
					total_listsnfkgs = []
					total_snfkgsall = RPT_Routewisebillabstract.objects.raw(fourth)
					for i in total_snfkgsall:
						total_listsnfkgs.append(i.asnf)
						total_rateasnfkgs_detail = round(sum(total_listsnfkgs),2)
					total_listasnfkgs = []
					total_asnfkgsall = RPT_Routewisebillabstract.objects.raw(fourth)
					for i in total_asnfkgsall:
						total_listasnfkgs.append(i.amount)
						total_rateamount_detail = round(sum(total_listasnfkgs),2)
					total_listamount = []
					total_amountall = RPT_Routewisebillabstract.objects.raw(fourth)
					for i in total_amountall:
						total_listamount.append(i.Snf1)
						total_ratesnf_detail = round(sum(total_listamount),2)
					total_listsnf = []
					total_snfall = RPT_Routewisebillabstract.objects.raw(fourth)
					for i in total_snfall:
						total_listsnf.append(i.comm)
						total_ratecomm_detail = round(sum(total_listsnf),2)
					total_listcomm = []
					total_commall = RPT_Routewisebillabstract.objects.raw(fourth)
					for i in total_commall:
						total_listcomm.append(i.aarrears)
						total_rateexsamt_detail = round(sum(total_listcomm),2)
					total_listexsamt = []
					total_exsamtall = RPT_Routewisebillabstract.objects.raw(fourth)
					for i in total_exsamtall:
						total_listexsamt.append(i.cartage)
						total_ratecartage_detail = round(sum(total_listexsamt),2)
					total_listcartage = []
					total_cartageall = RPT_Routewisebillabstract.objects.raw(fourth)
					for i in total_cartageall:
						total_listcartage.append(i.aothers)
						total_rateaothers_detail = round(sum(total_listcartage),2)
					total_listaothers = []
					total_othersall = RPT_Routewisebillabstract.objects.raw(fourth)
					for i in total_othersall:
						total_listaothers.append(i.gamount)
						total_rategamt_detail = round(sum(total_listaothers),2)
					total_listgamt = []
					total_gamtall = RPT_Routewisebillabstract.objects.raw(fourth)
					for i in total_gamtall:
						total_listgamt.append(i.stores)
						#total_listloan_no.append(i.stores)
						total_ratestores_detail = round(sum(total_listgamt),2)
					total_liststores = []
					total_storesall = RPT_Routewisebillabstract.objects.raw(fourth)
					for i in total_storesall:
						total_liststores.append(i.rothers)
						total_raterothers_detail = round(sum(total_liststores),2)
					total_listrothers = []
					total_rothersall = RPT_Routewisebillabstract.objects.raw(fourth)
					for i in total_rothersall:
						total_listrothers.append(i.net)
						total_ratenet_detail = round(sum(total_listrothers),2)				
					total_listtotal =[]
					total_totalall = RPT_Routewisebillabstract.objects.raw(fourth)
					for i in total_totalall:
						total_listtotal.append(i.total)
						total_total_detail = round(sum(total_listtotal),2)
			

				return render(request,'routewisebillabstract.html',locals())
		else:
			return render(request,'index.html',locals())
		
					#messages.error(request,err)


		return render(request,'routewisebillabstract.html',locals())		
class GeneratePdfRoutewisebillabstract(View):
	def get(self, request,slug, slug1, slug2,slug3, *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_routewisebillabstract.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
		
			first = "select D.id id,D.routecode routecode,D.centercode centercode,sum(D.qty) qty,round(sum(D.ltrs),2) Ltrs,round(avg(D.fat),2) fatkgs,round(sum(D.fat),2) afat,round(sum(D.snf),2) snfkgs,round(avg(D.snf),2) asnf,round(sum(amount),2) amount,D.tsrate Snf1,D.comm comm,round(sum(amount),2) exsamt,A.cartage cartage,A.aothers aothers,round(amount,2) gamount,round(L.total,2) total,A.stores stores,A.aarrears aarrears,A.rothers rothers,D.net net from %s.school_daily_data D, %s.school_additions A, %s.school_cloan L where D.centercode = L.center and D.centercode = A.centercode and A.date between '%s' and '%s' and L.date between '%s' and '%s'  and D.date between '%s' and '%s' group by D.routecode"%(str(brch),str(brch),str(brch),str(slug),str(slug1),str(slug),str(slug1),str(slug),str(slug1))
			print(first)
			print(2.3)
			second = "select D.id id,D.routecode routecode,D.centercode centercode,sum(D.qty) qty,round(sum(D.ltrs),2) Ltrs,round(avg(D.fat),2) fatkgs,round(sum(D.fat),2) afat,round(sum(D.snf),2) snfkgs,round(avg(D.snf),2) asnf,round(sum(amount),2) amount,D.tsrate Snf1,D.comm comm,round(sum(amount),2) exsamt,A.cartage cartage,A.aothers aothers,round(amount,2) gamount,round(L.total,2) total,A.stores stores,A.aarrears aarrears,A.rothers rothers,D.net net from %s.school_daily_data D, %s.school_additions A, %s.school_cloan L where D.centercode = L.center and D.centercode = A.centercode and A.date between '%s' and '%s' and L.date between '%s' and '%s'  and D.date between '%s' and '%s' and D.centercode = '%s' group by D.routecode"%(str(brch),str(brch),str(brch),str(slug),str(slug1),str(slug),str(slug1),str(slug),str(slug1),str(slug3))
			print(2.1)
			third = "select D.id id,D.routecode routecode,D.centercode centercode,sum(D.qty) qty,round(sum(D.ltrs),2) Ltrs,round(avg(D.fat),2) fatkgs,round(sum(D.fat),2) afat,round(sum(D.snf),2) snfkgs,round(avg(D.snf),2) asnf,round(sum(amount),2) amount,D.tsrate Snf1,D.comm comm,round(sum(amount),2) exsamt,A.cartage cartage,A.aothers aothers,round(amount,2) gamount,round(L.total,2) total,A.stores stores,A.aarrears aarrears,A.rothers rothers,D.net net from %s.school_daily_data D, %s.school_additions A, %s.school_cloan L where D.centercode = L.center and D.centercode = A.centercode and A.date between '%s' and '%s' and L.date between '%s' and '%s'  and D.date between '%s' and '%s' and D.routecode = '%s' group by D.routecode"%(str(brch),str(brch),str(brch),str(slug),str(slug1),str(slug),str(slug1),str(slug),str(slug1),str(slug2))
			print(2.2)
			fourth = "select D.id id,D.routecode routecode,D.centercode centercode,sum(D.qty) qty,round(sum(D.ltrs),2) Ltrs,round(avg(D.fat),2) fatkgs,round(sum(D.fat),2) afat,round(sum(D.snf),2) snfkgs,round(avg(D.snf),2) asnf,round(sum(amount),2) amount,D.tsrate Snf1,D.comm comm,round(sum(amount),2) exsamt,A.cartage cartage,A.aothers aothers,round(amount,2) gamount,round(L.total,2) total,A.stores stores,A.aarrears aarrears,A.rothers rothers,D.net net from %s.school_daily_data D, %s.school_additions A, %s.school_cloan L where D.centercode = L.center and D.centercode = A.centercode and A.date between '%s' and '%s' and L.date between '%s' and '%s'  and D.date between '%s' and '%s' and D.centercode='%s' and D.routecode = '%s' group by D.routecode"%(str(brch),str(brch),str(brch),str(slug),str(slug1),str(slug),str(slug1),str(slug),str(slug1),str(slug3),str(slug2))
			print(2.4)

			if slug2 == 'all' and slug3 == 'all':
				datarw = RPT_Routewisebillabstract.objects.raw(first)
				total_kgsall = []
				total_listkgs = []
				total_listqty = []
				total_listltrs =[]
				total_listfat =[]
				total_listsnf =[]
				total_listfatkgs =[]
				total_listsnfkgs =[]
				total_listamount =[]
				total_rateqtysum_detail = 0.00
				total_rateltrsum_detail=0.00
				total_ratefatkgs_detail=0.00
				total_rateafatkgs_detail=0.00
				total_ratesnfkgs_detail=0.00
				total_rateasnfkgs_detail=0.00
				total_rateamount_detail=0.00
				total_ratesnf_detail=0.00
				total_ratecomm_detail=0.00
				total_rateexsamt_detail=0.00
				total_ratecartage_detail=0.00
				total_rateaothers_detail =0.00
				total_rategamt_detail=0.00
				total_ratestores_detail=0.00
				total_raterothers_detail=0.00
				total_ratenet_detail =0.00
				total_total_detail =0.00
				total_kgsall = RPT_Routewisebillabstract.objects.raw(first)

				for i in total_kgsall:
					total_listkgs.append(i.qty)
					total_rateqtysum_detail = round(sum(total_listkgs),2)
				total_listqty = []
				total_qtyall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_qtyall:
					total_listqty.append(i.Ltrs)
					total_rateltrsum_detail = round(sum(total_listqty),2)
				total_listltrs = []
				total_ltrall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_ltrall:
					total_listltrs.append(i.fatkgs)
					total_ratefatkgs_detail = round(sum(total_listltrs),2)
				total_listfatkgs = []
				total_fatkgsall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_fatkgsall:
					total_listfatkgs.append(i.afat)
					total_rateafatkgs_detail = round(sum(total_listfatkgs),2)
				total_listafatkgs = []
				total_afatkgsall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_afatkgsall:
					total_listafatkgs.append(i.snfkgs)
					total_ratesnfkgs_detail = round(sum(total_listafatkgs),2)
				total_listsnfkgs = []
				total_snfkgsall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_snfkgsall:
					total_listsnfkgs.append(i.asnf)
					total_rateasnfkgs_detail = round(sum(total_listsnfkgs),2)
				total_listasnfkgs = []
				total_asnfkgsall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_asnfkgsall:
					total_listasnfkgs.append(i.amount)
					total_rateamount_detail = round(sum(total_listasnfkgs),2)
				total_listamount = []
				total_amountall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_amountall:
					total_listamount.append(i.Snf1)
					total_ratesnf_detail = round(sum(total_listamount),2)
				total_listsnf = []
				total_snfall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_snfall:
					total_listsnf.append(i.comm)
					total_ratecomm_detail = round(sum(total_listsnf),2)
				total_listcomm = []
				total_commall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_commall:
					total_listcomm.append(i.aarrears)
					total_rateexsamt_detail = round(sum(total_listcomm),2)
				total_listexsamt = []
				total_exsamtall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_exsamtall:
					total_listexsamt.append(i.cartage)
					total_ratecartage_detail = round(sum(total_listexsamt),2)
				total_listcartage = []
				total_cartageall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_cartageall:
					total_listcartage.append(i.aothers)
					total_rateaothers_detail = round(sum(total_listcartage),2)
				total_listaothers = []
				total_othersall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_othersall:
					total_listaothers.append(i.gamount)
					total_rategamt_detail = round(sum(total_listaothers),2)
				total_listgamt = []
				total_gamtall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_gamtall:
					total_listgamt.append(i.stores)
					#total_listloan_no.append(i.stores)
					total_ratestores_detail = round(sum(total_listgamt),2)
				total_liststores = []
				total_storesall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_storesall:
					total_liststores.append(i.rothers)
					total_raterothers_detail = round(sum(total_liststores),2)
				total_listrothers = []
				total_rothersall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_rothersall:
					total_listrothers.append(i.net)
					total_ratenet_detail = round(sum(total_listrothers),2)
				total_listtotal =[]
				total_totalall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_totalall:
					total_listtotal.append(i.total)
					total_total_detail = round(sum(total_listtotal),2)
			
			elif slug2 == 'all' and slug3 != 'all':
				datarw = RPT_Routewisebillabstract.objects.raw(second)
				total_kgsall = []
				total_listkgs = []
				total_listqty = []
				total_listltrs =[]
				total_listfat =[]
				total_listsnf =[]
				total_listfatkgs =[]
				total_listsnfkgs =[]
				total_listamount =[]
				total_rateqtysum_detail = 0.00
				total_rateltrsum_detail=0.00
				total_ratefatkgs_detail=0.00
				total_rateafatkgs_detail=0.00
				total_ratesnfkgs_detail=0.00
				total_rateasnfkgs_detail=0.00
				total_rateamount_detail=0.00
				total_ratesnf_detail=0.00
				total_ratecomm_detail=0.00
				total_rateexsamt_detail=0.00
				total_ratecartage_detail=0.00
				total_rateaothers_detail =0.00
				total_rategamt_detail=0.00
				total_ratestores_detail=0.00
				total_raterothers_detail=0.00
				total_ratenet_detail =0.00
				total_total_detail =0.00
				total_kgsall = RPT_Routewisebillabstract.objects.raw(second)

				for i in total_kgsall:
					total_listkgs.append(i.qty)
					total_rateqtysum_detail = round(sum(total_listkgs),2)
				total_listqty = []
				total_qtyall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_qtyall:
					total_listqty.append(i.Ltrs)
					total_rateltrsum_detail = round(sum(total_listqty),2)
				total_listltrs = []
				total_ltrall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_ltrall:
					total_listltrs.append(i.fatkgs)
					total_ratefatkgs_detail = round(sum(total_listltrs),2)
				total_listfatkgs = []
				total_fatkgsall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_fatkgsall:
					total_listfatkgs.append(i.afat)
					total_rateafatkgs_detail = round(sum(total_listfatkgs),2)
				total_listafatkgs = []
				total_afatkgsall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_afatkgsall:
					total_listafatkgs.append(i.snfkgs)
					total_ratesnfkgs_detail = round(sum(total_listafatkgs),2)
				total_listsnfkgs = []
				total_snfkgsall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_snfkgsall:
					total_listsnfkgs.append(i.asnf)
					total_rateasnfkgs_detail = round(sum(total_listsnfkgs),2)
				total_listasnfkgs = []
				total_asnfkgsall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_asnfkgsall:
					total_listasnfkgs.append(i.amount)
					total_rateamount_detail = round(sum(total_listasnfkgs),2)
				total_listamount = []
				total_amountall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_amountall:
					total_listamount.append(i.Snf1)
					total_ratesnf_detail = round(sum(total_listamount),2)
				total_listsnf = []
				total_snfall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_snfall:
					total_listsnf.append(i.comm)
					total_ratecomm_detail = round(sum(total_listsnf),2)
				total_listcomm = []
				total_commall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_commall:
					total_listcomm.append(i.aarrears)
					total_rateexsamt_detail = round(sum(total_listcomm),2)
				total_listexsamt = []
				total_exsamtall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_exsamtall:
					total_listexsamt.append(i.cartage)
					total_ratecartage_detail = round(sum(total_listexsamt),2)
				total_listcartage = []
				total_cartageall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_cartageall:
					total_listcartage.append(i.aothers)
					total_rateaothers_detail = round(sum(total_listcartage),2)
				total_listaothers = []
				total_othersall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_othersall:
					total_listaothers.append(i.gamount)
					total_rategamt_detail = round(sum(total_listaothers),2)
				total_listgamt = []
				total_gamtall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_gamtall:
					total_listgamt.append(i.stores)
					#total_listloan_no.append(i.stores)
					total_ratestores_detail = round(sum(total_listgamt),2)
				total_liststores = []
				total_storesall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_storesall:
					total_liststores.append(i.rothers)
					total_raterothers_detail = round(sum(total_liststores),2)
				total_listrothers = []
				total_rothersall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_rothersall:
					total_listrothers.append(i.net)
					total_ratenet_detail = round(sum(total_listrothers),2)
				total_listtotal =[]
				total_totalall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_totalall:
					total_listtotal.append(i.total)
					total_total_detail = round(sum(total_listtotal),2)
		
			elif slug3 == 'all' and slug2 != 'all':
				datarw = RPT_Routewisebillabstract.objects.raw(third)
				total_kgsall = []
				total_listkgs = []
				total_listqty = []
				total_listltrs =[]
				total_listfat =[]
				total_listsnf =[]
				total_listfatkgs =[]
				total_listsnfkgs =[]
				total_listamount =[]
				total_rateqtysum_detail = 0.00
				total_rateltrsum_detail=0.00
				total_ratefatkgs_detail=0.00
				total_rateafatkgs_detail=0.00
				total_ratesnfkgs_detail=0.00
				total_rateasnfkgs_detail=0.00
				total_rateamount_detail=0.00
				total_ratesnf_detail=0.00
				total_ratecomm_detail=0.00
				total_rateexsamt_detail=0.00
				total_ratecartage_detail=0.00
				total_rateaothers_detail =0.00
				total_rategamt_detail=0.00
				total_ratestores_detail=0.00
				total_raterothers_detail=0.00
				total_ratenet_detail =0.00
				total_total_detail =0.00
				total_kgsall = RPT_Routewisebillabstract.objects.raw(third)

				for i in total_kgsall:
					total_listkgs.append(i.qty)
					total_rateqtysum_detail = round(sum(total_listkgs),2)
				total_listqty = []
				total_qtyall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_qtyall:
					total_listqty.append(i.Ltrs)
					total_rateltrsum_detail = round(sum(total_listqty),2)
				total_listltrs = []
				total_ltrall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_ltrall:
					total_listltrs.append(i.fatkgs)
					total_ratefatkgs_detail = round(sum(total_listltrs),2)
				total_listfatkgs = []
				total_fatkgsall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_fatkgsall:
					total_listfatkgs.append(i.afat)
					total_rateafatkgs_detail = round(sum(total_listfatkgs),2)
				total_listafatkgs = []
				total_afatkgsall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_afatkgsall:
					total_listafatkgs.append(i.snfkgs)
					total_ratesnfkgs_detail = round(sum(total_listafatkgs),2)
				total_listsnfkgs = []
				total_snfkgsall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_snfkgsall:
					total_listsnfkgs.append(i.asnf)
					total_rateasnfkgs_detail = round(sum(total_listsnfkgs),2)
				total_listasnfkgs = []
				total_asnfkgsall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_asnfkgsall:
					total_listasnfkgs.append(i.amount)
					total_rateamount_detail = round(sum(total_listasnfkgs),2)
				total_listamount = []
				total_amountall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_amountall:
					total_listamount.append(i.Snf1)
					total_ratesnf_detail = round(sum(total_listamount),2)
				total_listsnf = []
				total_snfall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_snfall:
					total_listsnf.append(i.comm)
					total_ratecomm_detail = round(sum(total_listsnf),2)
				total_listcomm = []
				total_commall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_commall:
					total_listcomm.append(i.aarrears)
					total_rateexsamt_detail = round(sum(total_listcomm),2)
				total_listexsamt = []
				total_exsamtall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_exsamtall:
					total_listexsamt.append(i.cartage)
					total_ratecartage_detail = round(sum(total_listexsamt),2)
				total_listcartage = []
				total_cartageall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_cartageall:
					total_listcartage.append(i.aothers)
					total_rateaothers_detail = round(sum(total_listcartage),2)
				total_listaothers = []
				total_othersall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_othersall:
					total_listaothers.append(i.gamount)
					total_rategamt_detail = round(sum(total_listaothers),2)
				total_listgamt = []
				total_gamtall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_gamtall:
					total_listgamt.append(i.stores)
					#total_listloan_no.append(i.stores)
					total_ratestores_detail = round(sum(total_listgamt),2)
				total_liststores = []
				total_storesall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_storesall:
					total_liststores.append(i.rothers)
					total_raterothers_detail = round(sum(total_liststores),2)
				total_listrothers = []
				total_rothersall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_rothersall:
					total_listrothers.append(i.net)
					total_ratenet_detail = round(sum(total_listrothers),2)	
				total_listtotal =[]
				total_totalall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_totalall:
					total_listtotal.append(i.total)
					total_total_detail = round(sum(total_listtotal),2)
					
			else:
				datarw = RPT_Routewisebillabstract.objects.raw(fourth)
				total_kgsall = []
				total_listkgs = []
				total_listqty = []
				total_listltrs =[]
				total_listfat =[]
				total_listsnf =[]
				total_listfatkgs =[]
				total_listsnfkgs =[]
				total_listamount =[]
				total_rateqtysum_detail = 0.00
				total_rateltrsum_detail=0.00
				total_ratefatkgs_detail=0.00
				total_rateafatkgs_detail=0.00
				total_ratesnfkgs_detail=0.00
				total_rateasnfkgs_detail=0.00
				total_rateamount_detail=0.00
				total_ratesnf_detail=0.00
				total_ratecomm_detail=0.00
				total_rateexsamt_detail=0.00
				total_ratecartage_detail=0.00
				total_rateaothers_detail =0.00
				total_rategamt_detail=0.00
				total_ratestores_detail=0.00
				total_raterothers_detail=0.00
				total_ratenet_detail =0.00
				total_total_detail =0.00
				total_kgsall = RPT_Routewisebillabstract.objects.raw(fourth)

				for i in total_kgsall:
					total_listkgs.append(i.qty)
					total_rateqtysum_detail = round(sum(total_listkgs),2)
				total_listqty = []
				total_qtyall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_qtyall:
					total_listqty.append(i.Ltrs)
					total_rateltrsum_detail = round(sum(total_listqty),2)
				total_listltrs = []
				total_ltrall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_ltrall:
					total_listltrs.append(i.fatkgs)
					total_ratefatkgs_detail = round(sum(total_listltrs),2)
				total_listfatkgs = []
				total_fatkgsall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_fatkgsall:
					total_listfatkgs.append(i.afat)
					total_rateafatkgs_detail = round(sum(total_listfatkgs),2)
				total_listafatkgs = []
				total_afatkgsall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_afatkgsall:
					total_listafatkgs.append(i.snfkgs)
					total_ratesnfkgs_detail = round(sum(total_listafatkgs),2)
				total_listsnfkgs = []
				total_snfkgsall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_snfkgsall:
					total_listsnfkgs.append(i.asnf)
					total_rateasnfkgs_detail = round(sum(total_listsnfkgs),2)
				total_listasnfkgs = []
				total_asnfkgsall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_asnfkgsall:
					total_listasnfkgs.append(i.amount)
					total_rateamount_detail = round(sum(total_listasnfkgs),2)
				total_listamount = []
				total_amountall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_amountall:
					total_listamount.append(i.Snf1)
					total_ratesnf_detail = round(sum(total_listamount),2)
				total_listsnf = []
				total_snfall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_snfall:
					total_listsnf.append(i.comm)
					total_ratecomm_detail = round(sum(total_listsnf),2)
				total_listcomm = []
				total_commall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_commall:
					total_listcomm.append(i.aarrears)
					total_rateexsamt_detail = round(sum(total_listcomm),2)
				total_listexsamt = []
				total_exsamtall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_exsamtall:
					total_listexsamt.append(i.cartage)
					total_ratecartage_detail = round(sum(total_listexsamt),2)
				total_listcartage = []
				total_cartageall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_cartageall:
					total_listcartage.append(i.aothers)
					total_rateaothers_detail = round(sum(total_listcartage),2)
				total_listaothers = []
				total_othersall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_othersall:
					total_listaothers.append(i.gamount)
					total_rategamt_detail = round(sum(total_listaothers),2)
				total_listgamt = []
				total_gamtall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_gamtall:
					total_listgamt.append(i.stores)
					#total_listloan_no.append(i.stores)
					total_ratestores_detail = round(sum(total_listgamt),2)
				total_liststores = []
				total_storesall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_storesall:
					total_liststores.append(i.rothers)
					total_raterothers_detail = round(sum(total_liststores),2)
				total_listrothers = []
				total_rothersall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_rothersall:
					total_listrothers.append(i.net)
					total_ratenet_detail = round(sum(total_listrothers),2)				
				total_listtotal =[]
				total_totalall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_totalall:
					total_listtotal.append(i.total)
					total_total_detail = round(sum(total_listtotal),2)


				slug =datetime.datetime.strptime(slug, '%Y-%m-%d').strftime('%d-%m-%Y')
				print(slug)
				slug1 = datetime.datetime.strptime(slug1, '%Y-%m-%d').strftime('%d-%m-%Y')	
				print(slug1)
			datefrom1 = datetime.datetime.strptime(slug,'%Y-%m-%d').strftime('%d-%m-%Y')
			dateto1 = datetime.datetime.strptime(slug1,'%Y-%m-%d').strftime('%d-%m-%Y')

			context = {
				'datefrom': slug,
				'dateto': slug1,
				'routecode': slug2,
				'centercode' : slug3,
				#'shift' : slug4,
				'datarw' :datarw,
				'datefrom1':datefrom1,
				'dateto1':dateto1,
				'total_rateqtysum_detail': total_rateqtysum_detail,
				'total_rateltrsum_detail': total_rateltrsum_detail,
				'total_ratefatkgs_detail': total_ratefatkgs_detail,
				'total_rateafatkgs_detail': total_rateafatkgs_detail,
				'total_ratesnfkgs_detail': total_ratesnfkgs_detail,
				'total_rateasnfkgs_detail': total_rateasnfkgs_detail,
				'total_rateamount_detail': total_rateamount_detail,
				'total_ratesnf_detail': total_ratesnf_detail,
				'total_ratecomm_detail': total_ratecomm_detail,
				'total_rateexsamt_detail': total_rateexsamt_detail,
				'total_ratecartage_detail': total_ratecartage_detail,
				'total_rateaothers_detail':total_rateaothers_detail,
				'total_rategamt_detail': total_rategamt_detail,
				'total_total_detail': total_total_detail,
				'total_ratestores_detail': total_ratestores_detail,
				'total_raterothers_detail': total_raterothers_detail,
				'total_ratenet_detail': total_ratenet_detail,
				#'name': name,




			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_routewisebillabstract.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+""+slug1+""+slug2+"_"+slug3+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		else:
			template = get_template('pdf_routewisebillabstract.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
		
			first = "select D.id id,D.routecode routecode,D.centercode centercode,sum(D.qty) qty,round(sum(D.ltrs),2) Ltrs,round(avg(D.fat),2) fatkgs,round(sum(D.fat),2) afat,round(sum(D.snf),2) snfkgs,round(avg(D.snf),2) asnf,round(sum(amount),2) amount,D.tsrate Snf1,D.comm comm,round(sum(amount),2) exsamt,A.cartage cartage,A.aothers aothers,round(amount,2) gamount,round(L.total,2) total,A.stores stores,A.aarrears aarrears,A.rothers rothers,D.net net from school_daily_data D, school_additions A, school_cloan L where D.centercode = L.center and D.centercode = A.centercode and A.date between '%s' and '%s' and L.date between '%s' and '%s'  and D.date between '%s' and '%s' group by D.routecode"%(str(slug),str(slug1),str(slug),str(slug1),str(slug),str(slug1))
			print(first)
			print(2.3)
			second = "select D.id id,D.routecode routecode,D.centercode centercode,sum(D.qty) qty,round(sum(D.ltrs),2) Ltrs,round(avg(D.fat),2) fatkgs,round(sum(D.fat),2) afat,round(sum(D.snf),2) snfkgs,round(avg(D.snf),2) asnf,round(sum(amount),2) amount,D.tsrate Snf1,D.comm comm,round(sum(amount),2) exsamt,A.cartage cartage,A.aothers aothers,round(amount,2) gamount,round(L.total,2) total,A.stores stores,A.aarrears aarrears,A.rothers rothers,D.net net from school_daily_data D, school_additions A, school_cloan L where D.centercode = L.center and D.centercode = A.centercode and A.date between '%s' and '%s' and L.date between '%s' and '%s'  and D.date between '%s' and '%s' and D.centercode = '%s' group by D.routecode"%(str(slug),str(slug1),str(slug),str(slug1),str(slug),str(slug1),str(slug3))
			print(2.1)
			third = "select D.id id,D.routecode routecode,D.centercode centercode,sum(D.qty) qty,round(sum(D.ltrs),2) Ltrs,round(avg(D.fat),2) fatkgs,round(sum(D.fat),2) afat,round(sum(D.snf),2) snfkgs,round(avg(D.snf),2) asnf,round(sum(amount),2) amount,D.tsrate Snf1,D.comm comm,round(sum(amount),2) exsamt,A.cartage cartage,A.aothers aothers,round(amount,2) gamount,round(L.total,2) total,A.stores stores,A.aarrears aarrears,A.rothers rothers,D.net net from school_daily_data D, school_additions A, school_cloan L where D.centercode = L.center and D.centercode = A.centercode and A.date between '%s' and '%s' and L.date between '%s' and '%s'  and D.date between '%s' and '%s' and D.routecode = '%s' group by D.routecode"%(str(slug),str(slug1),str(slug),str(slug1),str(slug),str(slug1),str(slug2))
			print(2.2)
			fourth = "select D.id id,D.routecode routecode,D.centercode centercode,sum(D.qty) qty,round(sum(D.ltrs),2) Ltrs,round(avg(D.fat),2) fatkgs,round(sum(D.fat),2) afat,round(sum(D.snf),2) snfkgs,round(avg(D.snf),2) asnf,round(sum(amount),2) amount,D.tsrate Snf1,D.comm comm,round(sum(amount),2) exsamt,A.cartage cartage,A.aothers aothers,round(amount,2) gamount,round(L.total,2) total,A.stores stores,A.aarrears aarrears,A.rothers rothers,D.net net from school_daily_data D, school_additions A, school_cloan L where D.centercode = L.center and D.centercode = A.centercode and A.date between '%s' and '%s' and L.date between '%s' and '%s'  and D.date between '%s' and '%s' and D.centercode='%s' and D.routecode = '%s' group by D.routecode"%(str(slug),str(slug1),str(slug),str(slug1),str(slug),str(slug1),str(slug3),str(slug2))
			print(2.4)

			if slug2 == 'all' and slug3 == 'all':
				datarw = RPT_Routewisebillabstract.objects.raw(first)
				total_kgsall = []
				total_listkgs = []
				total_listqty = []
				total_listltrs =[]
				total_listfat =[]
				total_listsnf =[]
				total_listfatkgs =[]
				total_listsnfkgs =[]
				total_listamount =[]
				total_kgsall = RPT_Routewisebillabstract.objects.raw(first)

				for i in total_kgsall:
					total_listkgs.append(i.qty)
					total_rateqtysum_detail = round(sum(total_listkgs),2)
				total_listqty = []
				total_qtyall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_qtyall:
					total_listqty.append(i.Ltrs)
					total_rateltrsum_detail = round(sum(total_listqty),2)
				total_listltrs = []
				total_ltrall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_ltrall:
					total_listltrs.append(i.fatkgs)
					total_ratefatkgs_detail = round(sum(total_listltrs),2)
				total_listfatkgs = []
				total_fatkgsall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_fatkgsall:
					total_listfatkgs.append(i.afat)
					total_rateafatkgs_detail = round(sum(total_listfatkgs),2)
				total_listafatkgs = []
				total_afatkgsall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_afatkgsall:
					total_listafatkgs.append(i.snfkgs)
					total_ratesnfkgs_detail = round(sum(total_listafatkgs),2)
				total_listsnfkgs = []
				total_snfkgsall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_snfkgsall:
					total_listsnfkgs.append(i.asnf)
					total_rateasnfkgs_detail = round(sum(total_listsnfkgs),2)
				total_listasnfkgs = []
				total_asnfkgsall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_asnfkgsall:
					total_listasnfkgs.append(i.amount)
					total_rateamount_detail = round(sum(total_listasnfkgs),2)
				total_listamount = []
				total_amountall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_amountall:
					total_listamount.append(i.Snf1)
					total_ratesnf_detail = round(sum(total_listamount),2)
				total_listsnf = []
				total_snfall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_snfall:
					total_listsnf.append(i.comm)
					total_ratecomm_detail = round(sum(total_listsnf),2)
				total_listcomm = []
				total_commall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_commall:
					total_listcomm.append(i.aarrears)
					total_rateexsamt_detail = round(sum(total_listcomm),2)
				total_listexsamt = []
				total_exsamtall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_exsamtall:
					total_listexsamt.append(i.cartage)
					total_ratecartage_detail = round(sum(total_listexsamt),2)
				total_listcartage = []
				total_cartageall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_cartageall:
					total_listcartage.append(i.aothers)
					total_rateaothers_detail = round(sum(total_listcartage),2)
				total_listaothers = []
				total_othersall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_othersall:
					total_listaothers.append(i.gamount)
					total_rategamt_detail = round(sum(total_listaothers),2)
				total_listgamt = []
				total_gamtall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_gamtall:
					total_listgamt.append(i.stores)
					#total_listloan_no.append(i.stores)
					total_ratestores_detail = round(sum(total_listgamt),2)
				total_liststores = []
				total_storesall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_storesall:
					total_liststores.append(i.rothers)
					total_raterothers_detail = round(sum(total_liststores),2)
				total_listrothers = []
				total_rothersall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_rothersall:
					total_listrothers.append(i.net)
					total_ratenet_detail = round(sum(total_listrothers),2)
				total_listtotal =[]
				total_totalall = RPT_Routewisebillabstract.objects.raw(first)
				for i in total_totalall:
					total_listtotal.append(i.total)
					total_total_detail = round(sum(total_listtotal),2)
			
			elif slug2 == 'all' and slug3 != 'all':
				datarw = RPT_Routewisebillabstract.objects.raw(second)
				total_kgsall = []
				total_listkgs = []
				total_listqty = []
				total_listltrs =[]
				total_listfat =[]
				total_listsnf =[]
				total_listfatkgs =[]
				total_listsnfkgs =[]
				total_listamount =[]
				total_kgsall = RPT_Routewisebillabstract.objects.raw(second)

				for i in total_kgsall:
					total_listkgs.append(i.qty)
					total_rateqtysum_detail = round(sum(total_listkgs),2)
				total_listqty = []
				total_qtyall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_qtyall:
					total_listqty.append(i.Ltrs)
					total_rateltrsum_detail = round(sum(total_listqty),2)
				total_listltrs = []
				total_ltrall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_ltrall:
					total_listltrs.append(i.fatkgs)
					total_ratefatkgs_detail = round(sum(total_listltrs),2)
				total_listfatkgs = []
				total_fatkgsall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_fatkgsall:
					total_listfatkgs.append(i.afat)
					total_rateafatkgs_detail = round(sum(total_listfatkgs),2)
				total_listafatkgs = []
				total_afatkgsall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_afatkgsall:
					total_listafatkgs.append(i.snfkgs)
					total_ratesnfkgs_detail = round(sum(total_listafatkgs),2)
				total_listsnfkgs = []
				total_snfkgsall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_snfkgsall:
					total_listsnfkgs.append(i.asnf)
					total_rateasnfkgs_detail = round(sum(total_listsnfkgs),2)
				total_listasnfkgs = []
				total_asnfkgsall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_asnfkgsall:
					total_listasnfkgs.append(i.amount)
					total_rateamount_detail = round(sum(total_listasnfkgs),2)
				total_listamount = []
				total_amountall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_amountall:
					total_listamount.append(i.Snf1)
					total_ratesnf_detail = round(sum(total_listamount),2)
				total_listsnf = []
				total_snfall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_snfall:
					total_listsnf.append(i.comm)
					total_ratecomm_detail = round(sum(total_listsnf),2)
				total_listcomm = []
				total_commall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_commall:
					total_listcomm.append(i.aarrears)
					total_rateexsamt_detail = round(sum(total_listcomm),2)
				total_listexsamt = []
				total_exsamtall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_exsamtall:
					total_listexsamt.append(i.cartage)
					total_ratecartage_detail = round(sum(total_listexsamt),2)
				total_listcartage = []
				total_cartageall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_cartageall:
					total_listcartage.append(i.aothers)
					total_rateaothers_detail = round(sum(total_listcartage),2)
				total_listaothers = []
				total_othersall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_othersall:
					total_listaothers.append(i.gamount)
					total_rategamt_detail = round(sum(total_listaothers),2)
				total_listgamt = []
				total_gamtall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_gamtall:
					total_listgamt.append(i.stores)
					#total_listloan_no.append(i.stores)
					total_ratestores_detail = round(sum(total_listgamt),2)
				total_liststores = []
				total_storesall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_storesall:
					total_liststores.append(i.rothers)
					total_raterothers_detail = round(sum(total_liststores),2)
				total_listrothers = []
				total_rothersall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_rothersall:
					total_listrothers.append(i.net)
				total_listtotal =[]
				total_totalall = RPT_Routewisebillabstract.objects.raw(second)
				for i in total_totalall:
					total_listtotal.append(i.total)
					total_total_detail = round(sum(total_listtotal),2)
		
			elif slug3 == 'all' and slug2 != 'all':
				total_ratenet_detail = round(sum(total_listrothers),2)
				datarw = RPT_Routewisebillabstract.objects.raw(third)
				total_kgsall = []
				total_listkgs = []
				total_listqty = []
				total_listltrs =[]
				total_listfat =[]
				total_listsnf =[]
				total_listfatkgs =[]
				total_listsnfkgs =[]
				total_listamount =[]
				total_kgsall = RPT_Routewisebillabstract.objects.raw(third)

				for i in total_kgsall:
					total_listkgs.append(i.qty)
					total_rateqtysum_detail = round(sum(total_listkgs),2)
				total_listqty = []
				total_qtyall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_qtyall:
					total_listqty.append(i.Ltrs)
					total_rateltrsum_detail = round(sum(total_listqty),2)
				total_listltrs = []
				total_ltrall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_ltrall:
					total_listltrs.append(i.fatkgs)
					total_ratefatkgs_detail = round(sum(total_listltrs),2)
				total_listfatkgs = []
				total_fatkgsall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_fatkgsall:
					total_listfatkgs.append(i.afat)
					total_rateafatkgs_detail = round(sum(total_listfatkgs),2)
				total_listafatkgs = []
				total_afatkgsall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_afatkgsall:
					total_listafatkgs.append(i.snfkgs)
					total_ratesnfkgs_detail = round(sum(total_listafatkgs),2)
				total_listsnfkgs = []
				total_snfkgsall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_snfkgsall:
					total_listsnfkgs.append(i.asnf)
					total_rateasnfkgs_detail = round(sum(total_listsnfkgs),2)
				total_listasnfkgs = []
				total_asnfkgsall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_asnfkgsall:
					total_listasnfkgs.append(i.amount)
					total_rateamount_detail = round(sum(total_listasnfkgs),2)
				total_listamount = []
				total_amountall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_amountall:
					total_listamount.append(i.Snf1)
					total_ratesnf_detail = round(sum(total_listamount),2)
				total_listsnf = []
				total_snfall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_snfall:
					total_listsnf.append(i.comm)
					total_ratecomm_detail = round(sum(total_listsnf),2)
				total_listcomm = []
				total_commall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_commall:
					total_listcomm.append(i.aarrears)
					total_rateexsamt_detail = round(sum(total_listcomm),2)
				total_listexsamt = []
				total_exsamtall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_exsamtall:
					total_listexsamt.append(i.cartage)
					total_ratecartage_detail = round(sum(total_listexsamt),2)
				total_listcartage = []
				total_cartageall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_cartageall:
					total_listcartage.append(i.aothers)
					total_rateaothers_detail = round(sum(total_listcartage),2)
				total_listaothers = []
				total_othersall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_othersall:
					total_listaothers.append(i.gamount)
					total_rategamt_detail = round(sum(total_listaothers),2)
				total_listgamt = []
				total_gamtall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_gamtall:
					total_listgamt.append(i.stores)
					#total_listloan_no.append(i.stores)
					total_ratestores_detail = round(sum(total_listgamt),2)
				total_liststores = []
				total_storesall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_storesall:
					total_liststores.append(i.rothers)
					total_raterothers_detail = round(sum(total_liststores),2)
				total_listrothers = []
				total_rothersall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_rothersall:
					total_listrothers.append(i.net)
					total_ratenet_detail = round(sum(total_listrothers),2)	
				total_listtotal =[]
				total_totalall = RPT_Routewisebillabstract.objects.raw(third)
				for i in total_totalall:
					total_listtotal.append(i.total)
					total_total_detail = round(sum(total_listtotal),2)
					
			else:
				datarw = RPT_Routewisebillabstract.objects.raw(fourth)
				total_kgsall = []
				total_listkgs = []
				total_listqty = []
				total_listltrs =[]
				total_listfat =[]
				total_listsnf =[]
				total_listfatkgs =[]
				total_listsnfkgs =[]
				total_listamount =[]
				total_kgsall = RPT_Routewisebillabstract.objects.raw(fourth)

				for i in total_kgsall:
					total_listkgs.append(i.qty)
					total_rateqtysum_detail = round(sum(total_listkgs),2)
				total_listqty = []
				total_qtyall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_qtyall:
					total_listqty.append(i.Ltrs)
					total_rateltrsum_detail = round(sum(total_listqty),2)
				total_listltrs = []
				total_ltrall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_ltrall:
					total_listltrs.append(i.fatkgs)
					total_ratefatkgs_detail = round(sum(total_listltrs),2)
				total_listfatkgs = []
				total_fatkgsall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_fatkgsall:
					total_listfatkgs.append(i.afat)
					total_rateafatkgs_detail = round(sum(total_listfatkgs),2)
				total_listafatkgs = []
				total_afatkgsall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_afatkgsall:
					total_listafatkgs.append(i.snfkgs)
					total_ratesnfkgs_detail = round(sum(total_listafatkgs),2)
				total_listsnfkgs = []
				total_snfkgsall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_snfkgsall:
					total_listsnfkgs.append(i.asnf)
					total_rateasnfkgs_detail = round(sum(total_listsnfkgs),2)
				total_listasnfkgs = []
				total_asnfkgsall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_asnfkgsall:
					total_listasnfkgs.append(i.amount)
					total_rateamount_detail = round(sum(total_listasnfkgs),2)
				total_listamount = []
				total_amountall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_amountall:
					total_listamount.append(i.Snf1)
					total_ratesnf_detail = round(sum(total_listamount),2)
				total_listsnf = []
				total_snfall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_snfall:
					total_listsnf.append(i.comm)
					total_ratecomm_detail = round(sum(total_listsnf),2)
				total_listcomm = []
				total_commall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_commall:
					total_listcomm.append(i.aarrears)
					total_rateexsamt_detail = round(sum(total_listcomm),2)
				total_listexsamt = []
				total_exsamtall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_exsamtall:
					total_listexsamt.append(i.cartage)
					total_ratecartage_detail = round(sum(total_listexsamt),2)
				total_listcartage = []
				total_cartageall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_cartageall:
					total_listcartage.append(i.aothers)
					total_rateaothers_detail = round(sum(total_listcartage),2)
				total_listaothers = []
				total_othersall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_othersall:
					total_listaothers.append(i.gamount)
					total_rategamt_detail = round(sum(total_listaothers),2)
				total_listgamt = []
				total_gamtall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_gamtall:
					total_listgamt.append(i.stores)
					#total_listloan_no.append(i.stores)
					total_ratestores_detail = round(sum(total_listgamt),2)
				total_liststores = []
				total_storesall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_storesall:
					total_liststores.append(i.rothers)
					total_raterothers_detail = round(sum(total_liststores),2)
				total_listrothers = []
				total_rothersall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_rothersall:
					total_listrothers.append(i.net)
					total_ratenet_detail = round(sum(total_listrothers),2)				
				total_listtotal =[]
				total_totalall = RPT_Routewisebillabstract.objects.raw(fourth)
				for i in total_totalall:
					total_listtotal.append(i.total)
					total_total_detail = round(sum(total_listtotal),2)



			context = {
				'datefrom': slug,
				'dateto': slug1,
				'routecode': slug2,
				'centercode' : slug3,
				#'shift' : slug4,
				'datarw' :datarw,
				'total_rateqtysum_detail': total_rateqtysum_detail,
				'total_rateltrsum_detail': total_rateltrsum_detail,
				'total_ratefatkgs_detail': total_ratefatkgs_detail,
				'total_rateafatkgs_detail': total_rateafatkgs_detail,
				'total_ratesnfkgs_detail': total_ratesnfkgs_detail,
				'total_rateasnfkgs_detail': total_rateasnfkgs_detail,
				'total_rateamount_detail': total_rateamount_detail,
				'total_ratesnf_detail': total_ratesnf_detail,
				'total_ratecomm_detail': total_ratecomm_detail,
				'total_rateexsamt_detail': total_rateexsamt_detail,
				'total_ratecartage_detail': total_ratecartage_detail,
				'total_rategamt_detail': total_rategamt_detail,
				'total_total_detail': total_total_detail,
				'total_ratestores_detail': total_ratestores_detail,
				'total_raterothers_detail': total_raterothers_detail,
				'total_ratenet_detail': total_ratenet_detail,
				#'name': name,




			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_routewisebillabstract.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+""+slug1+""+slug2+"_"+slug3+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
def excel_routewisebillabstract(request,slug,slug1,slug2,slug3):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		#data = RPT_consolidated.objects.filter(date_gte=slug, date_lte=slug1 , selecting=slug , centercode=slug3 , routecode=slug4)
		#Daily_data.objects.filter(date__range=[datefrom, dateto], routecode=routecode)
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="routewisebillabstract.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('routewisebillabstract', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MMM-YY'
		columns = ['routecode','centercode','qty','Ltrs','fatkgs','afat','snfkgs','asnf','amount','Snf1','comm','exsamt','cartage','aothers','gamount','total','stores','aarrears','rothers','net']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		
		if slug2 == 'all' and slug3 == 'all':
			rows = RPT_Routewisebillabstract.objects.using(brch).filter().distinct().values_list(
			'routecode','centercode','qty','Ltrs','fatkgs','afat','snfkgs','asnf','amount','Snf1','comm','exsamt','cartage','aothers','gamount','total','stores','aarrears','rothers','net')
			
		
		elif slug2 == 'all' and slug3 != 'all':
			rows = RPT_Routewisebillabstract.objects.using(brch).filter(centercode = slug3).distinct().values_list(
			'routecode','centercode','qty','Ltrs','fatkgs','afat','snfkgs','asnf','amount','Snf1','comm','exsamt','cartage','aothers','gamount','total','stores','aarrears','rothers','net')

		elif slug3 == 'all' and slug2 != 'all':
			rows = RPT_Routewisebillabstract.objects.using(brch).filter(routecode = slug2).distinct().values_list(
			'routecode','centercode','qty','Ltrs','fatkgs','afat','snfkgs','asnf','amount','Snf1','comm','exsamt','cartage','aothers','gamount','total','stores','aarrears','rothers','net')
				
		else:
			rows = RPT_Routewisebillabstract.objects.using(brch).filter(routecode = slug2,centercode=slug3).distinct().values_list(
			'routecode','centercode','qty','Ltrs','fatkgs','afat','snfkgs','asnf','amount','Snf1','comm','exsamt','cartage','aothers','gamount','total','stores','aarrears','rothers','net')

		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
		wb.save(response)
		return response
	else:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		#data = RPT_consolidated.objects.filter(date_gte=slug, date_lte=slug1 , selecting=slug , centercode=slug3 , routecode=slug4)
		#Daily_data.objects.filter(date__range=[datefrom, dateto], routecode=routecode)
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="routewisebillabstract.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('routewisebillabstract', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MMM-YY'
		columns = ['routecode','centercode','qty','Ltrs','fatkgs','afat','snfkgs','asnf','amount','Snf1','comm','exsamt','cartage','aothers','gamount','total','stores','aarrears','rothers','net']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		
		if slug2 == 'all' and slug3 == 'all':
			rows = RPT_Routewisebillabstract.objects.filter().distinct().values_list(
			'routecode','centercode','qty','Ltrs','fatkgs','afat','snfkgs','asnf','amount','Snf1','comm','exsamt','cartage','aothers','gamount','total','stores','aarrears','rothers','net')
			
		
		elif slug2 == 'all' and slug3 != 'all':
			rows = RPT_Routewisebillabstract.objects.filter(centercode = slug3).distinct().values_list(
			'routecode','centercode','qty','Ltrs','fatkgs','afat','snfkgs','asnf','amount','Snf1','comm','exsamt','cartage','aothers','gamount','total','stores','aarrears','rothers','net')

		elif slug3 == 'all' and slug2 != 'all':
			rows = RPT_Routewisebillabstract.objects.filter(routecode = slug2).distinct().values_list(
			'routecode','centercode','qty','Ltrs','fatkgs','afat','snfkgs','asnf','amount','Snf1','comm','exsamt','cartage','aothers','gamount','total','stores','aarrears','rothers','net')
				
		else:
			rows = RPT_Routewisebillabstract.objects.filter(routecode = slug2,centercode=slug3).distinct().values_list(
			'routecode','centercode','qty','Ltrs','fatkgs','afat','snfkgs','asnf','amount','Snf1','comm','exsamt','cartage','aothers','gamount','total','stores','aarrears','rothers','net')

		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
		wb.save(response)
		return response

def daywiseabstract(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		route = Route.objects.using(brch).all()
		center = Center.objects.using(brch).all()
		branch = Branch.objects.using(brch).all()
		today = date.today()
	   
		#cursor = connection.cursor()
		t_m = datetime.datetime.now().month
		#t_y = datetime.datetime.now().year
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	#dc = RPT_consolidated.objects.filter(date__range=[datefrom, dateto]).distinct()
	# return HttpResponse(end_of_m)
		if request.session.has_key('name'):
			if request.method == "POST":
				datefrom = request.POST["datefrom"]
				dateto = request.POST["dateto"]
				routecode =  request.POST["routecode"]
				centercode = request.POST["centercode"]
				shift = request.POST["shift"]
				#selecting = request.POST["Issued_to"]
				#cursor1 = connection.cursor()
				#DataDel = "delete from school_rpt_daywiseabstract"
				#cursor1.execute(DataDel)
				#cursor = connection.cursor()
					#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
				#DataInsert = " insert into school_rpt_daywiseabstract (date,Shift,Milktype,centercode,kgs,ltrs,fatkgs,snfkgs,ltrrate,amount,tsrate,fat,snf,comm,net,rate,gamount)  select D.date,D.shift,D.milk_type,D.centercode,sum(qty),round(sum(ltrs),2),sum(fat),sum(snf),avg(fat),avg(snf),sum(ltrrate),sum(amount),D.tsrate,D.comm,sum(D.net),D.ltrrate,sum(D.amount) from school_daily_data D   where  date between '%s' and '%s' group by date,centercode,milk_type,shift"%(str(datefrom),str(dateto))
					#cursor1.execute(DataInsert)
				#print(DataInsert)      
				#cursor.execute(DataInsert)

				first = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(shift))
				print(first)
				second = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.shift = '%s'   group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(shift))
				third = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s'   group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto))
				fourth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.routecode = '%s'   group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(routecode))
				fifth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.routecode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(routecode),str(shift))
				sixth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.routecode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(routecode),str(shift))
				seventh = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.centercode = '%s'   group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(centercode))
				eigth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.centercode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(centercode),str(shift))
				ninth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s'  and D.centercode = '%s' and D.shift = '%s' group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(centercode),str(shift))
				tenth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s'  and D.centercode = '%s' and D.routecode = '%s' group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(centercode),str(routecode))
				eleventh = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.centercode = '%s' and D.routecode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(centercode),str(routecode),str(shift))
				twelve = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s'  and D.centercode = '%s' and D.routecode = '%s' and D.shift = '%s' group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(centercode),str(routecode),str(shift))
				if centercode == "all" and routecode == "all" and shift == "am":
					da=RPT_Daywiseabstract.objects.raw(first)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(first)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(first)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)
					#total_listaamount =[]
					#total_aamountall = RPT_Daywiseabstract.objects.raw(first)

				elif centercode == "all" and routecode == "all" and shift == "pm":
					da=RPT_Daywiseabstract.objects.raw(second)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(second)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(second)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode == "all" and routecode == "all" and shift == "both":
					da=RPT_Daywiseabstract.objects.raw(third)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(third)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(third)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode == "all" and routecode != "all" and shift == "both":
					da=RPT_Daywiseabstract.objects.raw(fourth)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode == "all" and routecode != "all" and shift == "am":
					da=RPT_Daywiseabstract.objects.raw(fifth)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode == "all" and routecode != "all" and shift == "pm":
					da=RPT_Daywiseabstract.objects.raw(sixth)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode != "all" and routecode == "all" and shift == "both":
					da=RPT_Daywiseabstract.objects.raw(seventh)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode != "all" and routecode == "all" and shift == "am":
					da=RPT_Daywiseabstract.objects.raw(eigth)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode != "all" and routecode == "all" and shift == "pm":
					da=RPT_Daywiseabstract.objects.raw(ninth)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode != "all" and routecode != "all" and shift == "both":
					da=RPT_Daywiseabstract.objects.raw(tenth)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode != "all" and routecode != "all" and shift == "am":
					da=RPT_Daywiseabstract.objects.raw(eleventh)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode != "all" and routecode != "all" and shift == "pm":
					da=RPT_Daywiseabstract.objects.raw(twelve)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

			return render(request,'daywiseabstract.html',locals())
		else:
			return render(request,'index.html',locals())
		
					#messages.error(request,err)


			return render(request,'daywiseabstract.html',locals())
	else:
		route = Route.objects.all()
		center = Center.objects.all()
		branch = Branch.objects.all()
		today = date.today()
	   
		#cursor = connection.cursor()
		t_m = datetime.datetime.now().month
		#t_y = datetime.datetime.now().year
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	#dc = RPT_consolidated.objects.filter(date__range=[datefrom, dateto]).distinct()
	# return HttpResponse(end_of_m)
		if request.session.has_key('name'):
			if request.method == "POST":
				datefrom = request.POST["datefrom"]
				dateto = request.POST["dateto"]
				routecode =  request.POST["routecode"]
				centercode = request.POST["centercode"]
				shift = request.POST["shift"]
				#selecting = request.POST["Issued_to"]
				#cursor1 = connection.cursor()
				#DataDel = "delete from school_rpt_daywiseabstract"
				#cursor1.execute(DataDel)
				#cursor = connection.cursor()
					#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
				#DataInsert = " insert into school_rpt_daywiseabstract (date,Shift,Milktype,centercode,kgs,ltrs,fatkgs,snfkgs,ltrrate,amount,tsrate,fat,snf,comm,net,rate,gamount)  select D.date,D.shift,D.milk_type,D.centercode,sum(qty),round(sum(ltrs),2),sum(fat),sum(snf),avg(fat),avg(snf),sum(ltrrate),sum(amount),D.tsrate,D.comm,sum(D.net),D.ltrrate,sum(D.amount) from school_daily_data D   where  date between '%s' and '%s' group by date,centercode,milk_type,shift"%(str(datefrom),str(dateto))
					#cursor1.execute(DataInsert)
				#print(DataInsert)      
				#cursor.execute(DataInsert)

				first = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(datefrom),str(dateto),str(shift))
				print(first)
				second = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.shift = '%s'   group by date,centercode,milk_type,shift"%(str(datefrom),str(dateto),str(shift))
				third = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s'   group by date,centercode,milk_type,shift"%(str(datefrom),str(dateto))
				fourth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.routecode = '%s'   group by date,centercode,milk_type,shift"%(str(datefrom),str(dateto),str(routecode))
				fifth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.routecode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(datefrom),str(dateto),str(routecode),str(shift))
				sixth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.routecode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(datefrom),str(dateto),str(routecode),str(shift))
				seventh = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.centercode = '%s'   group by date,centercode,milk_type,shift"%(str(datefrom),str(dateto),str(centercode))
				eigth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.centercode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(datefrom),str(dateto),str(centercode),str(shift))
				ninth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s'  and D.centercode = '%s' and D.shift = '%s' group by date,centercode,milk_type,shift"%(str(datefrom),str(dateto),str(centercode),str(shift))
				tenth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s'  and D.centercode = '%s' and D.routecode = '%s' group by date,centercode,milk_type,shift"%(str(datefrom),str(dateto),str(centercode),str(routecode))
				eleventh = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.centercode = '%s' and D.routecode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(datefrom),str(dateto),str(centercode),str(routecode),str(shift))
				twelve = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s'  and D.centercode = '%s' and D.routecode = '%s' and D.shift = '%s' group by date,centercode,milk_type,shift"%(str(datefrom),str(dateto),str(centercode),str(routecode),str(shift))
				if centercode == "all" and routecode == "all" and shift == "am":
					da=RPT_Daywiseabstract.objects.raw(first)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(first)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(first)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(first)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)
					#total_listaamount =[]
					#total_aamountall = RPT_Daywiseabstract.objects.raw(first)

				elif centercode == "all" and routecode == "all" and shift == "pm":
					da=RPT_Daywiseabstract.objects.raw(second)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(second)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(second)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(second)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode == "all" and routecode == "all" and shift == "both":
					da=RPT_Daywiseabstract.objects.raw(third)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(third)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(third)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(third)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode == "all" and routecode != "all" and shift == "both":
					da=RPT_Daywiseabstract.objects.raw(fourth)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(fourth)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode == "all" and routecode != "all" and shift == "am":
					da=RPT_Daywiseabstract.objects.raw(fifth)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(fifth)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode == "all" and routecode != "all" and shift == "pm":
					da=RPT_Daywiseabstract.objects.raw(sixth)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(sixth)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode != "all" and routecode == "all" and shift == "both":
					da=RPT_Daywiseabstract.objects.raw(seventh)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(seventh)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode != "all" and routecode == "all" and shift == "am":
					da=RPT_Daywiseabstract.objects.raw(eigth)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(eigth)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode != "all" and routecode == "all" and shift == "pm":
					da=RPT_Daywiseabstract.objects.raw(ninth)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(ninth)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode != "all" and routecode != "all" and shift == "both":
					da=RPT_Daywiseabstract.objects.raw(tenth)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(tenth)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode != "all" and routecode != "all" and shift == "am":
					da=RPT_Daywiseabstract.objects.raw(eleventh)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(eleventh)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

				elif centercode != "all" and routecode != "all" and shift == "pm":
					da=RPT_Daywiseabstract.objects.raw(twelve)
					#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listsnf =[]
					total_listcomm =[]
					total_listpel =[]
					
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_amountall:
							total_listamount.append(i.ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_fatall:
							total_listfat.append(i.fatkgs)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_ltrsall:
						total_listltrs.append(i.snfkgs)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_rateall:
							total_listrate.append(i.comm)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_asnfall:
							total_listasnf.append(i.net)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
					total_listcomm =[]
					total_alistcomm = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_alistcomm:
							total_listcomm.append(i.rate)
							total_acommsum_detail = sum(total_listcomm)
					total_listpel =[]
					total_pelall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_pelall:
							total_listpel.append(i.amount)
							total_apelsum_detail = sum(total_listcomm)
					total_listapel =[]
					total_ltrall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_ltrall:
							total_listapel.append(i.ltrrate)
							total_avpelsum_detail = sum(total_listcomm)
					total_listaamount =[]
					total_aamountall = RPT_Daywiseabstract.objects.raw(twelve)
					for i in total_aamountall:
							total_listaamount.append(i.tsrate)
							total_amtsum_detail = sum(total_listcomm)

			return render(request,'daywiseabstract.html',locals())
		else:
			return render(request,'index.html',locals())
		
					#messages.error(request,err)


			return render(request,'daywiseabstract.html',locals())

def centerwise(request):
	#try:
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		route = Route.objects.using(brch).all()
		center = Center.objects.using(brch).all()
		milk =Milktype.objects.all()
		#data = Daily_data.objects.all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.session.has_key('name'):
			if request.method == "POST":
				datefrom = request.POST["datefrom"]
				dateto = request.POST["dateto"]
				centercode = request.POST["centercode"]
				#shift =  request.POST["dayshift"]
				#milk_type = request.POST["milk_type"]

				#cursor1 = connection.cursor()
				#DataDel = "delete from School_RPT_Daywisesreport"
				#cursor1.execute(DataDel)
				#cursor = connection.cursor()
				#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
				#DataInsert = "insert into School_RPT_Daywisesreport (branch,date,shift,routecode,centercode,milk_type,fat,snf,sqty,sltrs,afat,asnf,kfat,ksnf,gamount) select branch,date,shift,routecode,centercode,milk_type,round(fat,2),round(snf,2), round(sum(qty),2),round(sum(ltrs),3), round(avg(fat),3),round(avg(snf),3),round((sum(qty)*avg(fat))/100),round((sum(qty)*avg(snf))/100), round(sum(amount),2)  from school_daily_data where date between '%s' and '%s' group by date,shift,milk_type"%(str(datefrom),str(dateto))
				#cursor1.execute(DataInsert)       
				#cursor.execute(DataInsert)

				first = " select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,C.name name ,round(sum(D.fat),2) fatkgs,round(sum(D.snf),2) snfkgs,round(avg(D.fat),2) Fat,round(avg(D.snf),2) Snf,round(sum(ltrrate),2) ltrrate,round(sum(amount),2) amount from %s.school_daily_data D,%s .school_center C where  date between '%s' and '%s' and C.centre_code = D.centercode group by date"%(str(brch),str(brch),str(datefrom),str(dateto))
				second = " select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,C.name name ,round(sum(D.fat),2) fatkgs,round(sum(D.snf),2) snfkgs,round(avg(D.fat),2) Fat,round(avg(D.snf),2) Snf,round(sum(ltrrate),2) ltrrate,round(sum(amount),2) amount from %s.school_daily_data D,%s.school_center C where  date between '%s' and '%s' and centercode ='%s' and C.centre_code = D.centercode group by date "%(str(brch),str(brch),str(datefrom),str(dateto),str(centercode))
				print(first)
				if centercode == 'all':
					dc = RPT_Centerwisesreport.objects.using(brch).raw(first)
					total_listfat = []
					total_fatall = RPT_Centerwisesreport.objects.raw(first)
					for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_fatsum_detail = round(sum(total_listfat),2)
					total_listsnf = []
					total_snfall = RPT_Centerwisesreport.objects.raw(first)
					for i in total_snfall:
						total_listsnf.append(i.snfkgs)
						total_snfsum_detail = round(sum(total_listsnf),2)
					total_listafat = []
					total_afatall = RPT_Centerwisesreport.objects.raw(first)
					for i in total_afatall:
						total_listafat.append(i.Fat)
						total_afatsum_detail = round(sum(total_listafat),2)
					total_listasnf = []
					total_asnfall = RPT_Centerwisesreport.objects.raw(first)
					for i in total_asnfall:
						total_listasnf.append(i.Snf)
						total_asnfsum_detail = round(sum(total_listasnf),2)
					total_ltrrate = []
					total_ltrrateall = RPT_Centerwisesreport.objects.raw(first)
					for i in total_ltrrate:
						total_ltrrate.append(i.ltrrate)
						total_ltrratesum_detail = round(sum(total_ltrrate),2)
					total_amount = []
					total_amountall = RPT_Centerwisesreport.objects.raw(first)
					for i in total_amount:
						total_amount.append(i.amount)
						total_amountsum_detail = round(sum(total_amount),2)

				else:
					dc = RPT_Centerwisesreport.objects.using(brch).raw(second)
					total_listfat = []
					total_fatall = RPT_Centerwisesreport.objects.raw(second)
					for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_fatsum_detail = round(sum(total_listfat),2)
					total_listsnf = []
					total_snfall = RPT_Centerwisesreport.objects.raw(second)
					for i in total_snfall:
						total_listsnf.append(i.snfkgs)
						total_snfsum_detail = round(sum(total_listsnf),2)
					total_listafat = []
					total_afatall = RPT_Centerwisesreport.objects.raw(second)
					for i in total_afatall:
						total_listafat.append(i.Fat)
						total_afatsum_detail = round(sum(total_listafat),2)
					total_listasnf = []
					total_asnfall = RPT_Centerwisesreport.objects.raw(second)
					for i in total_asnfall:
						total_listasnf.append(i.Snf)
						total_asnfsum_detail = round(sum(total_listasnf),2)
					total_ltrrate = []
					total_ltrrateall = RPT_Centerwisesreport.objects.raw(second)
					for i in total_ltrrate:
						total_ltrrate.append(i.ltrrate)
						total_ltrratesum_detail = round(sum(total_ltrrate),2)
					total_amount = []
					total_amountall = RPT_Centerwisesreport.objects.raw(second)
					for i in total_amount:
						total_amount.append(i.amount)
						total_amountsum_detail = round(sum(total_amount),2)

				#branchdata = cursor.fetchall() 
				
			return render(request,'centerwiseconsolidated.html',locals())
		else:
			return render(request,'index.html',locals())
	
	else:
		route = Route.objects.all()
		center = Center.objects.all()
		milk =Milktype.objects.all()
		#data = Daily_data.objects.all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.session.has_key('name'):
			if request.method == "POST":
				datefrom = request.POST["datefrom"]
				dateto = request.POST["dateto"]
				shift =  request.POST["dayshift"]
				milk_type = request.POST["milk_type"]

				#cursor1 = connection.cursor()
				#DataDel = "delete from School_RPT_Daywisesreport"
				#cursor1.execute(DataDel)
				#cursor = connection.cursor()
				#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
				#DataInsert = "insert into School_RPT_Daywisesreport (branch,date,shift,routecode,centercode,milk_type,fat,snf,sqty,sltrs,afat,asnf,kfat,ksnf,gamount) select branch,date,shift,routecode,centercode,milk_type,round(fat,2),round(snf,2), round(sum(qty),2),round(sum(ltrs),3), round(avg(fat),3),round(avg(snf),3),round((sum(qty)*avg(fat))/100),round((sum(qty)*avg(snf))/100), round(sum(amount),2)  from school_daily_data where date between '%s' and '%s' group by date,shift,milk_type"%(str(datefrom),str(dateto))
				#cursor1.execute(DataInsert)       
				#cursor.execute(DataInsert)

				first = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from school_daily_data where date between '%s' and '%s' group by date,shift,milk_type"%(str(datefrom),str(dateto))
				second = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from school_daily_data  where date between '%s' and '%s' and milk_type='%s' group by date,shift,milk_type"%(str(datefrom),str(dateto),str(milk_type))
				third = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from school_daily_data  where date between '%s' and '%s' and shift = '%s' group by date,shift,milk_type"%(str(datefrom),str(dateto),str(shift))
				fourth = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from school_daily_data  where date between '%s' and '%s' and milk_type= '%s' and shift = '%s' group by date,shift,milk_type"%(str(datefrom),str(dateto),str(milk_type),str(shift))
				#branchdata = cursor.fetchall() 
				if shift == 'all' and milk_type == 'all':
					dc = RPT_Daywisesreport.objects.raw(first)
					total_listkgs = []
					total_kgsall = RPT_Daywisesreport.objects.raw(first)
					for i in total_kgsall:
						total_listkgs.append(i.sqty)
						total_kgssum_detail = round(sum(total_listkgs),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywisesreport.objects.raw(first)
					for i in total_ltrsall:
						total_listltrs.append(i.sltrs)
						total_ltrssum_detail = round(sum(total_listltrs),2)
					total_listfat = []
					total_fatall = RPT_Daywisesreport.objects.raw(first)
					for i in total_fatall:
						total_listfat.append(i.kfat)
						total_fatsum_detail = round(sum(total_listfat),2)
					total_listsnf = []
					total_snfall = RPT_Daywisesreport.objects.raw(first)
					for i in total_snfall:
						total_listsnf.append(i.ksnf)
						total_snfsum_detail = round(sum(total_listsnf),2)
					total_listafat = []
					total_afatall = RPT_Daywisesreport.objects.raw(first)
					for i in total_afatall:
						total_listafat.append(i.afat)
						total_afatsum_detail = round(sum(total_listafat),2)
					total_listasnf = []
					total_asnfall = RPT_Daywisesreport.objects.raw(first)
					for i in total_asnfall:
						total_listasnf.append(i.asnf)
						total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywisesreport.objects.raw(first)
					for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = round(sum(total_listgamt),3)
				elif shift == 'all' and milk_type != 'all':
					dc = RPT_Daywisesreport.objects.raw(second)
					total_listkgs = []
					total_kgsall = RPT_Daywisesreport.objects.raw(second)
					for i in total_kgsall:
						total_listkgs.append(i.sqty)
						total_kgssum_detail = round(sum(total_listkgs),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywisesreport.objects.raw(second)
					for i in total_ltrsall:
						total_listltrs.append(i.sltrs)
						total_ltrssum_detail = round(sum(total_listltrs),2)
					total_listfat = []
					total_fatall = RPT_Daywisesreport.objects.raw(second)
					for i in total_fatall:
						total_listfat.append(i.kfat)
						total_fatsum_detail = round(sum(total_listfat),2)
					total_listsnf = []
					total_snfall = RPT_Daywisesreport.objects.raw(second)
					for i in total_snfall:
						total_listsnf.append(i.ksnf)
						total_snfsum_detail = round(sum(total_listsnf),2)
					total_listafat = []
					total_afatall = RPT_Daywisesreport.objects.raw(second)
					for i in total_afatall:
						total_listafat.append(i.afat)
						total_afatsum_detail = round(sum(total_listafat),2)
					total_listasnf = []
					total_asnfall = RPT_Daywisesreport.objects.raw(second)
					for i in total_asnfall:
						total_listasnf.append(i.asnf)
						total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywisesreport.objects.raw(second)
					for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = round(sum(total_listgamt),2)
				elif milk_type == 'all' and shift != 'all':
					dc = RPT_Daywisesreport.objects.raw(third)
					total_listkgs = []
					total_kgsall = RPT_Daywisesreport.objects.raw(third)
					for i in total_kgsall:
						total_listkgs.append(i.sqty)
						total_kgssum_detail = round(sum(total_listkgs),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywisesreport.objects.raw(third)
					for i in total_ltrsall:
						total_listltrs.append(i.sltrs)
						total_ltrssum_detail = round(sum(total_listltrs),2)
					total_listfat = []
					total_fatall = RPT_Daywisesreport.objects.raw(third)
					for i in total_fatall:
						total_listfat.append(i.kfat)
						total_fatsum_detail = round(sum(total_listfat),2)
					total_listsnf = []
					total_snfall = RPT_Daywisesreport.objects.raw(third)
					for i in total_snfall:
						total_listsnf.append(i.ksnf)
						total_snfsum_detail = round(sum(total_listsnf),2)
					total_listafat = []
					total_afatall = RPT_Daywisesreport.objects.raw(third)
					for i in total_afatall:
						total_listafat.append(i.afat)
						total_afatsum_detail = round(sum(total_listafat),2)
					total_listasnf = []
					total_asnfall = RPT_Daywisesreport.objects.raw(third)
					for i in total_asnfall:
						total_listasnf.append(i.asnf)
						total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_Daywisesreport.objects.raw(third)
					for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = round(sum(total_listgamt),2)
				else:
					dc = RPT_Daywisesreport.objects.raw(fourth)
					total_listkgs = []
					total_kgsall = RPT_Daywisesreport.objects.raw(fourth)
					for i in total_kgsall:
						total_listkgs.append(i.sqty)
						total_kgssum_detail = round(sum(total_listkgs),2)
					total_listltrs = []
					total_ltrsall = RPT_Daywisesreport.objects.raw(fourth)
					for i in total_ltrsall:
						total_listltrs.append(i.sltrs)
						total_ltrssum_detail = round(sum(total_listltrs),2)
					total_listfat = []
					total_fatall = RPT_Daywisesreport.objects.raw(fourth)
					for i in total_fatall:
						total_listfat.append(i.kfat)
						total_fatsum_detail = round(sum(total_listfat),2)
					total_listsnf = []
					total_snfall = RPT_Daywisesreport.objects.raw(fourth)
					for i in total_snfall:
						total_listsnf.append(i.ksnf)
						total_snfsum_detail = round(sum(total_listsnf),2)
					total_listafat = []
					total_afatall = RPT_Daywisesreport.objects.raw(fourth)
					for i in total_afatall:
						total_listafat.append(i.afat)
						total_afatsum_detail = round(sum(total_listafat),2)
					total_listasnf = []
					total_asnfall = RPT_Daywisesreport.objects.raw(fourth)
					for i in total_asnfall:
						total_listasnf.append(i.asnf)
						total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall =RPT_Daywisesreport.objects.raw(fourth)
					for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = round(sum(total_listgamt),2)
			return render(request,'centerwiseconsolidated.html',locals())
		else:
			return render(request,'index.html',locals())

class GeneratePdfCenterwisereport(View):
	def get(self, request,slug, slug1,slug2,*args, **kwargs):
		template = get_template('pdf_centerwise.html')
		today = date.today()
		start_of_yr = today.replace(day =1, month=4)
		end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
		
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			first = " select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,C.name name ,round(sum(D.fat),2) fatkgs,round(sum(D.snf),2) snfkgs,round(avg(D.fat),2) Fat,round(avg(D.snf),2) Snf,round(sum(ltrrate),2) ltrrate,round(sum(amount),2) amount from %s.school_daily_data D,%s .school_center C where  date between '%s' and '%s' group by date,centercode"%(str(brch),str(brch),str(slug1),str(slug2))
			second = " select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,C.name name ,round(sum(D.fat),2) fatkgs,round(sum(D.snf),2) snfkgs,round(avg(D.fat),2) Fat,round(avg(D.snf),2) Snf,round(sum(ltrrate),2) ltrrate,round(sum(amount),2) amount from %s.school_daily_data D,%s.school_center C where  date between '%s' and '%s' and centercode ='%s' group by date,centercode"%(str(brch),str(brch),str(slug1),str(slug2),str(slug))
			print(first)
			if slug == 'all':
				dc = RPT_Centerwisesreport.objects.using(brch).raw(first)
				print("1.235")
				total_listfat = []
				total_fatall = RPT_Centerwisesreport.objects.using(brch).raw(first)
				for i in total_fatall:
					total_listfat.append(i.fatkgs)
					total_fatsum_detail = round(sum(total_listfat),2)
				total_listsnf = []
				total_snfall = RPT_Centerwisesreport.objects.using(brch).raw(first)
				for i in total_snfall:
					total_listsnf.append(i.snfkgs)
					total_snfsum_detail = round(sum(total_listsnf),2)
				total_listafat = []
				total_afatall = RPT_Centerwisesreport.objects.using(brch).raw(first)
				for i in total_afatall:
					total_listafat.append(i.Fat)
					total_afatsum_detail = round(sum(total_listafat),2)
				total_listasnf = []
				total_asnfall = RPT_Centerwisesreport.objects.using(brch).raw(first)
				for i in total_asnfall:
					total_listasnf.append(i.Snf)
					total_asnfsum_detail = round(sum(total_listasnf),2)
				total_ltrrate = []
				total_ltrrateall = RPT_Centerwisesreport.objects.using(brch).raw(first)
				for i in total_ltrrate:
					total_ltrrate.append(i.ltrrate)
					total_ltrratesum_detail = round(sum(total_ltrrate),2)
				total_amount = []
				total_amountall = RPT_Centerwisesreport.objects.using(brch).raw(first)
				for i in total_amount:
					total_amount.append(i.amount)
					total_amountsum_detail = round(sum(total_amount),2)

			else:
				dc = RPT_Centerwisesreport.objects.using(brch).raw(second)
				total_listfat = []
				total_fatall = RPT_Centerwisesreport.objects.raw(second)
				for i in total_fatall:
					total_listfat.append(i.fatkgs)
					total_fatsum_detail = round(sum(total_listfat),2)
				total_listsnf = []
				total_snfall = RPT_Centerwisesreport.objects.raw(second)
				for i in total_snfall:
					total_listsnf.append(i.snfkgs)
					total_snfsum_detail = round(sum(total_listsnf),2)
				total_listafat = []
				total_afatall = RPT_Centerwisesreport.objects.raw(second)
				for i in total_afatall:
					total_listafat.append(i.Fat)
					total_afatsum_detail = round(sum(total_listafat),2)
				total_listasnf = []
				total_asnfall = RPT_Centerwisesreport.objects.raw(second)
				for i in total_asnfall:
					total_listasnf.append(i.Snf)
					total_asnfsum_detail = round(sum(total_listasnf),2)
				total_ltrrate = []
				total_ltrrateall = RPT_Centerwisesreport.objects.raw(second)
				for i in total_ltrrate:
					total_ltrrate.append(i.ltrrate)
					total_ltrratesum_detail = round(sum(total_ltrrate),2)
				total_amount = []
				total_amountall = RPT_Centerwisesreport.objects.raw(second)
				for i in total_amount:
					total_amount.append(i.amount)
					total_amountsum_detail = round(sum(total_amount),2)
		else:
			first = " select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,C.name name ,round(sum(D.fat),2) fatkgs,round(sum(D.snf),2) snfkgs,round(avg(D.fat),2) Fat,round(avg(D.snf),2) Snf,round(sum(ltrrate),2) ltrrate,round(sum(amount),2) amount from %s.school_daily_data D,%s .school_center C where  date between '%s' and '%s' group by date,centercode"%(str(brch),str(brch),str(datefrom),str(dateto))
			second = " select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,C.name name ,round(sum(D.fat),2) fatkgs,round(sum(D.snf),2) snfkgs,round(avg(D.fat),2) Fat,round(avg(D.snf),2) Snf,round(sum(ltrrate),2) ltrrate,round(sum(amount),2) amount from %s.school_daily_data D,%s.school_center C where  date between '%s' and '%s' and centercode ='%s' group by date,centercode"%(str(brch),str(brch),str(datefrom),str(dateto),str(centercode))
			if centercode == 'all':
				dc = RPT_Centerwisesreport.objects.using(brch).raw(first)
				total_listfat = []
				total_fatall = RPT_Centerwisesreport.objects.raw(first)
				for i in total_fatall:
					total_listfat.append(i.fatkgs)
					total_fatsum_detail = round(sum(total_listfat),2)
				total_listsnf = []
				total_snfall = RPT_Centerwisesreport.objects.raw(first)
				for i in total_snfall:
					total_listsnf.append(i.snfkgs)
					total_snfsum_detail = round(sum(total_listsnf),2)
				total_listafat = []
				total_afatall = RPT_Centerwisesreport.objects.raw(first)
				for i in total_afatall:
					total_listafat.append(i.Fat)
					total_afatsum_detail = round(sum(total_listafat),2)
				total_listasnf = []
				total_asnfall = RPT_Centerwisesreport.objects.raw(first)
				for i in total_asnfall:
					total_listasnf.append(i.Snf)
					total_asnfsum_detail = round(sum(total_listasnf),2)
				total_ltrrate = []
				total_ltrrateall = RPT_Centerwisesreport.objects.raw(first)
				for i in total_ltrrate:
					total_ltrrate.append(i.ltrrate)
					total_ltrratesum_detail = round(sum(total_ltrrate),2)
				total_amount = []
				total_amountall = RPT_Centerwisesreport.objects.raw(first)
				for i in total_amount:
					total_amount.append(i.amount)
					total_amountsum_detail = round(sum(total_amount),2)

			else:
				dc = RPT_Centerwisesreport.objects.raw(second)
				total_listfat = []
				total_fatall = RPT_Centerwisesreport.objects.raw(second)
				for i in total_fatall:
					total_listfat.append(i.fatkgs)
					total_fatsum_detail = round(sum(total_listfat),2)
				total_listsnf = []
				total_snfall = RPT_Centerwisesreport.objects.raw(second)
				for i in total_snfall:
					total_listsnf.append(i.snfkgs)
					total_snfsum_detail = round(sum(total_listsnf),2)
				total_listafat = []
				total_afatall = RPT_Centerwisesreport.objects.raw(second)
				for i in total_afatall:
					total_listafat.append(i.Fat)
					total_afatsum_detail = round(sum(total_listafat),2)
				total_listasnf = []
				total_asnfall = RPT_Centerwisesreport.objects.raw(second)
				for i in total_asnfall:
					total_listasnf.append(i.Snf)
					total_asnfsum_detail = round(sum(total_listasnf),2)
				total_ltrrate = []
				total_ltrrateall = RPT_Centerwisesreport.objects.raw(second)
				for i in total_ltrrate:
					total_ltrrate.append(i.ltrrate)
					total_ltrratesum_detail = round(sum(total_ltrrate),2)
				total_amount = []
				total_amountall = RPT_Centerwisesreport.objects.raw(second)
				for i in total_amount:
					total_amount.append(i.amount)
					total_amountsum_detail = round(sum(total_amount),2)

		context = {
				
			'centercode': slug,
			'datefrom':slug1,
			'dateto':slug2,
			'dc':dc,
			
		}
		html = template.render(context)
		pdf = render_to_pdf("pdf_centerwise.html",context)
		if pdf:
			response = HttpResponse(pdf,content_type = "application/pdf")
			filename = slug+".pdf"
			content = "inline; filename=%s" %(filename)
			download = request.GET.get("download")
			if download:
				content = "attachment; filename=%s" %(filename)
			response['Content-Disposition'] = content
			return response
		return HttpResponse("Not Found")

class GeneratePdfDaywiseabstract(View):
	def get(self, request,slug, slug1, slug2,slug3,slug4 , *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_daywiseabstract.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)

			first = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(brch),str(slug),str(slug1),str(slug4))
			print(first)
			second = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.shift = '%s'   group by date,centercode,milk_type,shift"%(str(brch),str(slug),str(slug1),str(slug4))
			third = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s'   group by date,centercode,milk_type,shift"%(str(brch),str(slug),str(slug1))
			fourth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.routecode = '%s'   group by date,centercode,milk_type,shift"%(str(brch),str(slug),str(slug1),str(slug2))
			fifth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.routecode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(brch),str(slug),str(slug1),str(slug2),str(slug4))
			sixth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.routecode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(brch),str(slug),str(slug1),str(slug2),str(slug4))
			seventh = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.centercode = '%s'   group by date,centercode,milk_type,shift"%(str(brch),str(slug),str(slug1),str(slug3))
			eigth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.centercode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(brch),str(slug),str(slug1),str(slug3),str(slug4))
			ninth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s'  and D.centercode = '%s' and D.shift = '%s' group by date,centercode,milk_type,shift"%(str(brch),str(slug),str(slug1),str(slug3),str(slug4))
			tenth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s'  and D.centercode = '%s' and D.routecode = '%s' group by date,centercode,milk_type,shift"%(str(brch),str(slug),str(slug1),str(slug3),str(slug2))
			eleventh = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.centercode = '%s' and D.routecode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(brch),str(slug),str(slug1),str(slug3),str(slug2),str(slug4))
			twelve = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from %s.school_daily_data D   where  date between '%s' and '%s'  and D.centercode = '%s' and D.routecode = '%s' and D.shift = '%s' group by date,centercode,milk_type,shift"%(str(brch),str(slug),str(slug1),str(slug3),str(slug2),str(slug4))
		
			if slug3 == "all" and slug2 == "all" and slug4 == "am":
				datadw=RPT_Daywiseabstract.objects.raw(first)
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(first)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(first)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)
				#total_listaamount =[]
					#total_aamountall = RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()

			elif slug3 == "all" and slug2 == "all" and slug4 == "pm":
				datadw=RPT_Daywiseabstract.objects.raw(second)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(second)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(second)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 == "all" and slug2 == "all" and slug4 == "both":
				datadw=RPT_Daywiseabstract.objects.raw(third)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(third)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(third)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 == "all" and slug2 != "all" and slug4 == "both":
				datadw=RPT_Daywiseabstract.objects.raw(fourth)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 == "all" and slug2 != "all" and slug4 == "am":
				datadw=RPT_Daywiseabstract.objects.raw(fifth)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 == "all" and slug2 != "all" and slug4 == "pm":
				datadw=RPT_Daywiseabstract.objects.raw(sixth)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 != "all" and slug2 == "all" and slug4 == "both":
				datadw=RPT_Daywiseabstract.objects.raw(seventh)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 != "all" and slug2 == "all" and slug4 == "am":
				datadw=RPT_Daywiseabstract.objects.raw(eigth)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 != "all" and slug2 == "all" and slug4 == "pm":
				datadw=RPT_Daywiseabstract.objects.raw(ninth)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 != "all" and slug2 != "all" and slug4 == "both":
				datadw=RPT_Daywiseabstract.objects.raw(tenth)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 != "all" and slug2 != "all" and slug4 == "am":
				datadw=RPT_Daywiseabstract.objects.raw(eleventh)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 != "all" and slug2 != "all" and slug4 == "pm":
				datadw=RPT_Daywiseabstract.objects.raw(twelve)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

				slug =datetime.datetime.strptime(slug, '%Y-%m-%d').strftime('%d-%m-%Y')
				print(slug)
				slug1 = datetime.datetime.strptime(slug1, '%Y-%m-%d').strftime('%d-%m-%Y')	
				print(slug1)
			datefrom1 = datetime.datetime.strptime(slug,'%Y-%m-%d').strftime('%d-%m-%Y')
			dateto1 = datetime.datetime.strptime(slug1,'%Y-%m-%d').strftime('%d-%m-%Y')
			context = {
				'datefrom': slug,
				'dateto': slug1,
				'routecode': slug2,
				'centercode' : slug3,
				'datefrom1':datefrom1,
				'dateto1':dateto1,
				'shift' : slug4,
				'datadw' :datadw,
				'total_ratesum_detail': total_ratesum_detail,
				'total_ltrssum_detail': total_ltrssum_detail,
				'total_fatsum_detail': total_fatsum_detail,
				'total_kgssum_detail': total_kgssum_detail,
				'total_snfsum_detail': total_snfsum_detail,
				'total_pelsum_detail': total_pelsum_detail,
				'total_gamtsum_detail': total_gamtsum_detail,
				'total_apelsum_detail': total_apelsum_detail,
				'total_afatsum_detail': total_afatsum_detail,
				'total_avpelsum_detail': total_avpelsum_detail,
				'total_amtsum_detail': total_amtsum_detail,
				'total_asnfsum_detail': total_asnfsum_detail,
				'total_acommsum_detail': total_acommsum_detail,
				#'name': name,




			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_daywiseabstract.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+""+slug1+""+slug2+"_"+slug3+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		else:
			template = get_template('pdf_daywiseabstract.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)

			first = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug4))
			print(first)
			second = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.shift = '%s'   group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug4))
			third = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s'   group by date,centercode,milk_type,shift"%(str(slug),str(slug1))
			fourth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.routecode = '%s'   group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug2))
			fifth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.routecode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug2),str(slug4))
			sixth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.routecode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug2),str(slug4))
			seventh = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.centercode = '%s'   group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug3))
			eigth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.centercode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug3),str(slug4))
			ninth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s'  and D.centercode = '%s' and D.shift = '%s' group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug3),str(slug4))
			tenth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s'  and D.centercode = '%s' and D.routecode = '%s' group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug3),str(slug2))
			eleventh = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.centercode = '%s' and D.routecode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug3),str(slug2),str(slug4))
			twelve = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s'  and D.centercode = '%s' and D.routecode = '%s' and D.shift = '%s' group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug3),str(slug2),str(slug4))
		
			if slug3 == "all" and slug2 == "all" and slug4 == "am":
				datadw=RPT_Daywiseabstract.objects.raw(first)
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(first)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(first)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(first)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)
				#total_listaamount =[]
					#total_aamountall = RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()

			elif slug3 == "all" and slug2 == "all" and slug4 == "pm":
				datadw=RPT_Daywiseabstract.objects.raw(second)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(second)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(second)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(second)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 == "all" and slug2 == "all" and slug4 == "both":
				datadw=RPT_Daywiseabstract.objects.raw(third)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(third)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(third)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(third)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 == "all" and slug2 != "all" and slug4 == "both":
				datadw=RPT_Daywiseabstract.objects.raw(fourth)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(fourth)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 == "all" and slug2 != "all" and slug4 == "am":
				datadw=RPT_Daywiseabstract.objects.raw(fifth)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(fifth)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 == "all" and slug2 != "all" and slug4 == "pm":
				datadw=RPT_Daywiseabstract.objects.raw(sixth)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(sixth)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 != "all" and slug2 == "all" and slug4 == "both":
				datadw=RPT_Daywiseabstract.objects.raw(seventh)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(seventh)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 != "all" and slug2 == "all" and slug4 == "am":
				datadw=RPT_Daywiseabstract.objects.raw(eigth)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(eigth)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 != "all" and slug2 == "all" and slug4 == "pm":
				datadw=RPT_Daywiseabstract.objects.raw(ninth)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(ninth)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 != "all" and slug2 != "all" and slug4 == "both":
				datadw=RPT_Daywiseabstract.objects.raw(tenth)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(tenth)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 != "all" and slug2 != "all" and slug4 == "am":
				datadw=RPT_Daywiseabstract.objects.raw(eleventh)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(eleventh)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)

			elif slug3 != "all" and slug2 != "all" and slug4 == "pm":
				datadw=RPT_Daywiseabstract.objects.raw(twelve)
				#da=RPT_Daywiseabstract.objects.filter(Shift=shift).distinct()
				total_kgsall = []
				total_listkgs = []
				total_listamount = []
				total_listsnf =[]
				total_listcomm =[]
				total_listpel =[]
				
				total_listfat = []
				total_listltrs = []
				total_kgsall = []
				total_listkgs = []
				total_kgsall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_ratesum_detail = round(sum(total_listkgs),2)
				total_listamount = []
				total_amountall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_amountall:
						total_listamount.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listamount),4)
				total_listfat = []
				total_fatall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_fatall:
						total_listfat.append(i.fatkgs)
						total_kgssum_detail = round(sum(total_listfat),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_ltrsall:
					total_listltrs.append(i.snfkgs)
					total_pelsum_detail = round(sum(total_listltrs),2)
				total_listtotal = []
				total_totalall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_totalall:
						total_listtotal.append(i.Fat)
						total_fatsum_detail = round(sum(total_listtotal),3)
				total_listsnf = []
				total_snfall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_snfall:
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate = []
				total_rateall =RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_rateall:
						total_listrate.append(i.comm)
						total_afatsum_detail = round(sum(total_listrate),2)
				total_listasnf = []
				total_asnfall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_asnfall:
						total_listasnf.append(i.net)
						total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_gamtall:
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
				total_listcomm =[]
				total_alistcomm = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_alistcomm:
						total_listcomm.append(i.rate)
						total_acommsum_detail = sum(total_listcomm)
				total_listpel =[]
				total_pelall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_pelall:
						total_listpel.append(i.amount)
						total_apelsum_detail = sum(total_listcomm)
				total_listapel =[]
				total_ltrall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_ltrall:
						total_listapel.append(i.ltrrate)
						total_avpelsum_detail = sum(total_listcomm)
				total_listaamount =[]
				total_aamountall = RPT_Daywiseabstract.objects.raw(twelve)
				for i in total_aamountall:
						total_listaamount.append(i.tsrate)
						total_amtsum_detail = sum(total_listcomm)


			context = {
				'datefrom': slug,
				'dateto': slug1,
				'routecode': slug2,
				'centercode' : slug3,
				'shift' : slug4,
				'datadw' :datadw,
				'total_ratesum_detail': total_ratesum_detail,
				'total_ltrssum_detail': total_ltrssum_detail,
				'total_fatsum_detail': total_fatsum_detail,
				'total_kgssum_detail': total_kgssum_detail,
				'total_snfsum_detail': total_snfsum_detail,
				'total_pelsum_detail': total_pelsum_detail,
				'total_gamtsum_detail': total_gamtsum_detail,
				'total_apelsum_detail': total_apelsum_detail,
				'total_afatsum_detail': total_afatsum_detail,
				'total_avpelsum_detail': total_avpelsum_detail,
				'total_amtsum_detail': total_amtsum_detail,
				'total_asnfsum_detail': total_asnfsum_detail,
				'total_acommsum_detail': total_acommsum_detail,
				#'name': name,




			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_daywiseabstract.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+""+slug1+""+slug2+"_"+slug3+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")

		
def excel_daywiseabstract(request,slug,slug1,slug2,slug3,slug4):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		#data = RPT_consolidated.objects.filter(date_gte=slug, date_lte=slug1 , selecting=slug , centercode=slug3 , routecode=slug4)
		#Daily_data.objects.filter(date__range=[datefrom, dateto], routecode=routecode)
		first = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,round(sum(amount),2) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,round(sum(D.amount),2) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(shift))
		print(first)
		second = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,round(sum(amount),2) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,round(sum(D.amount),2) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.shift = '%s'   group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(shift))
		third = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,round(sum(amount),2) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,round(sum(D.amount),2) gamount from %s.school_daily_data D   where  date between '%s' and '%s'   group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto))
		print(third)
		fourth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,round(sum(amount),2) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,round(sum(D.amount),2) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.routecode = '%s'   group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(routecode))
		fifth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,round(sum(amount),2) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,round(sum(D.amount),2) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.routecode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(routecode),str(shift))
		sixth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,round(sum(amount),2) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,round(sum(D.amount),2) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.routecode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(routecode),str(shift))
		seventh = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,round(sum(amount),2) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,round(sum(D.amount),2) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.centercode = '%s'   group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(centercode))
		eigth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,round(sum(amount),2) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,round(sum(D.amount),2) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.centercode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(centercode),str(shift))
		ninth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,round(sum(amount),2) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,round(sum(D.amount),2) gamount from %s.school_daily_data D   where  date between '%s' and '%s'  and D.centercode = '%s' and D.shift = '%s' group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(centercode),str(shift))
		tenth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,round(sum(amount),2) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,round(sum(D.amount),2) gamount from %s.school_daily_data D   where  date between '%s' and '%s'  and D.centercode = '%s' and D.routecode = '%s' group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(centercode),str(routecode))
		eleventh = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,round(sum(amount),2) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,round(sum(D.amount),2) gamount from %s.school_daily_data D   where  date between '%s' and '%s' and D.centercode = '%s' and D.routecode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(centercode),str(routecode),str(shift))
		twelve = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,round(sum(amount),2) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,round(sum(D.amount),2) gamount from %s.school_daily_data D   where  date between '%s' and '%s'  and D.centercode = '%s' and D.routecode = '%s' and D.shift = '%s' group by date,centercode,milk_type,shift"%(str(brch),str(datefrom),str(dateto),str(centercode),str(routecode),str(shift))
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="daywiseabstract.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('daywiseabstract', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MMM-YY'
		columns = ['date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		if slug3 == "all" and slug2 == "all" and slug4 == "am":
			rows=RPT_Daywiseabstract.objects.using(brch).raw(first).values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')
			
		elif slug3 == "all" and slug2 == "all" and slug4 == "pm":
			rows=RPT_Daywiseabstract.objects.using(brch).filter(Shift='pm').distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			
		elif slug3 == "all" and slug2 == "all" and slug4 == "both":
			rows1=RPT_Daywiseabstract.objects.using(brch).raw(third)
			rows=rows1.values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			
		elif slug3 == "all" and slug2 != "all" and slug4 == "both":
			rows=RPT_Daywiseabstract.objects.using(brch).filter(routecode=slug2).distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			
		elif slug3 == "all" and slug2 != "all" and slug4 == "am":
			rows=RPT_Daywiseabstract.objects.using(brch).filter(routecode=slug2,Shift=slug4).distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			
		elif slug3 == "all" and slug2 != "all" and slug4 == "pm":
			rows=RPT_Daywiseabstract.objects.using(brch).filter(routecode=slug2,Shift=slug4).distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			
		elif slug3 != "all" and slug2 == "all" and slug4 == "both":
			rows=RPT_Daywiseabstract.objects.using(brch).filter(centercode=slug3).distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			
		elif slug3 != "all" and slug2 == "all" and slug4 == "am":
			rows=RPT_Daywiseabstract.objects.using(brch).filter(centercode=slug3,Shift=slug4).distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			
		elif slug3 != "all" and slug2 == "all" and slug4 == "pm":
			rows=RPT_Daywiseabstract.objects.using(brch).filter(centercode=slug3,Shift=slug4).distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			

		elif slug3 != "all" and slug2 != "all" and slug4 == "both":
			rows=RPT_Daywiseabstract.objects.using(brch).filter(centercode=slug3,routecode=slug2).distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			

		elif slug3 != "all" and slug2 != "all" and slug4 == "am":
			rows=RPT_Daywiseabstract.objects.using(brch).filter(centercode=slug3,routecode=slug2,Shift = slug4).distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			
		elif slug3 != "all" and slug2 != "all" and slug4 == "pm":
			rows=RPT_Daywiseabstract.objects.using(brch).filter(centercode=slug3,routecode=slug2,Shift = slug4).distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
		wb.save(response)
		return response
	else:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		#data = RPT_consolidated.objects.filter(date_gte=slug, date_lte=slug1 , selecting=slug , centercode=slug3 , routecode=slug4)
		#Daily_data.objects.filter(date__range=[datefrom, dateto], routecode=routecode)
		first = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug4))
		print(first)
		second = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.shift = '%s'   group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug4))
		third = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s'   group by date,centercode,milk_type,shift"%(str(slug),str(slug1))
		fourth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.routecode = '%s'   group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug2))
		fifth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.routecode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug2),str(slug4))
		sixth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.routecode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug2),str(slug4))
		seventh = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.centercode = '%s'   group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug3))
		eigth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.centercode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug3),str(slug4))
		ninth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s'  and D.centercode = '%s' and D.shift = '%s' group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug3),str(slug4))
		tenth = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s'  and D.centercode = '%s' and D.routecode = '%s' group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug3),str(slug2))
		eleventh = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s' and D.centercode = '%s' and D.routecode = '%s' and D.shift = '%s'  group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug3),str(slug2),str(slug4))
		twelve = "select D.id id,D.date date,D.shift Shift,D.milk_type Milktype,D.centercode centercode,sum(qty) kgs,round(sum(ltrs),2) Ltrs,sum(fat) fatkgs,sum(snf) snfkgs,avg(fat) Fat,avg(snf) Snf,sum(ltrrate) ltrrate,sum(amount) amount,D.tsrate tsrate,D.comm comm,sum(D.net) net,D.ltrrate rate,sum(D.amount) gamount from school_daily_data D   where  date between '%s' and '%s'  and D.centercode = '%s' and D.routecode = '%s' and D.shift = '%s' group by date,centercode,milk_type,shift"%(str(slug),str(slug1),str(slug3),str(slug2),str(slug4))
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="daywiseabstract.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('daywiseabstract', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MMM-YY'
		columns = ['date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		if slug3 == "all" and slug2 == "all" and slug4 == "am":
			rows=RPT_Daywiseabstract.objects.raw(first).values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')
			
		elif slug3 == "all" and slug2 == "all" and slug4 == "pm":
			rows=RPT_Daywiseabstract.objects.filter(Shift='pm').distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			
		elif slug3 == "all" and slug2 == "all" and slug4 == "both":
			rows1=RPT_Daywiseabstract.objects.raw(third)
			rows=rows1.values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			
		elif slug3 == "all" and slug2 != "all" and slug4 == "both":
			rows=RPT_Daywiseabstract.objects.filter(routecode=slug2).distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			
		elif slug3 == "all" and slug2 != "all" and slug4 == "am":
			rows=RPT_Daywiseabstract.objects.filter(routecode=slug2,Shift=slug4).distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			
		elif slug3 == "all" and slug2 != "all" and slug4 == "pm":
			rows=RPT_Daywiseabstract.objects.filter(routecode=slug2,Shift=slug4).distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			
		elif slug3 != "all" and slug2 == "all" and slug4 == "both":
			rows=RPT_Daywiseabstract.objects.filter(centercode=slug3).distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			
		elif slug3 != "all" and slug2 == "all" and slug4 == "am":
			rows=RPT_Daywiseabstract.objects.filter(centercode=slug3,Shift=slug4).distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			
		elif slug3 != "all" and slug2 == "all" and slug4 == "pm":
			rows=RPT_Daywiseabstract.objects.filter(centercode=slug3,Shift=slug4).distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			

		elif slug3 != "all" and slug2 != "all" and slug4 == "both":
			rows=RPT_Daywiseabstract.objects.filter(centercode=slug3,routecode=slug2).distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			

		elif slug3 != "all" and slug2 != "all" and slug4 == "am":
			rows=RPT_Daywiseabstract.objects.filter(centercode=slug3,routecode=slug2,Shift = slug4).distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

			
		elif slug3 != "all" and slug2 != "all" and slug4 == "pm":
			rows=RPT_Daywiseabstract.objects.filter(centercode=slug3,routecode=slug2,Shift = slug4).distinct().values_list(
			'date','Shift','Milktype','centercode','kgs','Ltrs','fatkgs','snfkgs','ltrrate','amount','tsrate','Fat','Snf','comm','net','rate','gamount')

		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
		wb.save(response)
		return response

import datetime
from django.db import connection
import mysql.connector
from mysql.connector import Error
def milkcollectionreport(request):
	#try: 
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			route = Route.objects.using(brch).all()
			center = Center.objects.using(brch).all()
			branch = Branch.objects.using(brch).all()
			today = date.today()
			t_m = datetime.datetime.now().month
			#t_y = datetime.datetime.now().year
			start_of_m = today.replace(day =1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			if request.method == "POST":
				datefrom = request.POST["datefrom"]
				dateto = request.POST["dateto"]
				routecode =  request.POST["routecode"]
				centercode = request.POST["centercode"]
				selecting = request.POST["Issued_to"]
				datefrom1 =datetime.datetime.strptime(datefrom, '%Y-%m-%d').strftime('%d-%m-%Y')
				print(datefrom)
				dateto1 = datetime.datetime.strptime(dateto, '%Y-%m-%d').strftime('%d-%m-%Y')	
				
				cursor = connection.cursor()
						
				directQ ="delete from %s.school_rpt_consolidatedreport"%(str(brch))
				cursor.execute(directQ)
				cursor1 = connection.cursor() 
				cursor2 = connection.cursor() 
				if selecting == "Branch":
					milkbranch = "insert into %s.school_rpt_consolidatedreport(date,Shift,Milktype,centercode,branch,centername,routecode,routename,kgs,Ltrs,Fat,Snf,afat,asnf,gamount,net,RateLtr,tsrate,ltrtsrate,kgtsrate,pel) select date,shift,milk_type,centercode,branch,centername,routecode,routename,round(sum(qty),2),round(sum(ltrs),2),round(sum(fat),2),round(sum(snf),2),round(avg(fat),2),round(avg(snf),2),round(sum(amount),2),round((sum(amount)+sum(pel)),2),round(ltrrate,2),tsrate,round(avg(tsrate),2),round((avg(tsrate)*1.03),2),round(sum(pel),2) from %s.school_daily_data D where branch = D.branch and D.date between '%s' and '%s' group by D.branch "%(str(brch),str(brch),str(datefrom),str(dateto))
					a = " select count(distinct branch)  from %s.school_rpt_consolidatedreport "%(str(brch)) 
				elif selecting == "Date":
					milkbranch = "insert into %s.school_rpt_consolidatedreport(date,Shift,Milktype,centercode,branch,centername,routecode,routename,kgs,Ltrs,Fat,Snf,afat,asnf,gamount,net,RateLtr,tsrate,ltrtsrate,kgtsrate,pel) select date,shift,milk_type,centercode,branch,centername,routecode,routename,round(sum(qty),2),round(sum(ltrs),2),round(sum(fat),2),round(sum(snf),2),round(avg(fat),2),round(avg(snf),2),round(sum(amount),2),round((sum(amount)+sum(pel)),2),round(ltrrate,2),tsrate,round(avg(tsrate),2),round((avg(tsrate)*1.03),2),round(sum(pel),2) from %s.school_daily_data D where date = D.date and D.date between '%s' and '%s' group by D.date "%(str(brch),str(brch),str(datefrom),str(dateto))
					a = " select count(distinct date)  from %s.school_rpt_consolidatedreport  "%(str(brch)) 
				elif selecting == "Center":
					milkbranch = "insert into %s.school_rpt_consolidatedreport(date,Shift,Milktype,centercode,branch,centername,routecode,routename,kgs,Ltrs,Fat,Snf,afat,asnf,gamount,net,RateLtr,tsrate,ltrtsrate,kgtsrate,pel) select date,shift,milk_type,centercode,branch,centername,routecode,routename,round(sum(qty),2),round(sum(ltrs),2),round(sum(fat),2),round(sum(snf),2),round(avg(fat),2),round(avg(snf),2),round(sum(amount),2),round((sum(amount)+sum(pel)),2),round(ltrrate,2),tsrate,round(avg(tsrate),2),round((avg(tsrate)*1.03),2),round(sum(pel),2) from %s.school_daily_data D where centercode = D.centercode and D.date between '%s' and '%s' group by D.centercode "%(str(brch),str(brch),str(datefrom),str(dateto))
					a = " select count(distinct centercode)  from %s.school_rpt_consolidatedreport "%(str(brch)) 
				elif selecting == "Route":
					milkbranch = "insert into %s.school_rpt_consolidatedreport(date,Shift,Milktype,centercode,branch,centername,routecode,routename,kgs,Ltrs,Fat,Snf,afat,asnf,gamount,net,RateLtr,tsrate,ltrtsrate,kgtsrate,pel) select date,shift,milk_type,centercode,branch,centername,routecode,routename,round(sum(qty),2),round(sum(ltrs),2),round(sum(fat),2),round(sum(snf),2),round(avg(fat),2),round(avg(snf),2),round(sum(amount),2),round((sum(amount)+sum(pel)),2),round(ltrrate,2),tsrate,round(avg(tsrate),2),round((avg(tsrate)*1.03),2),round(sum(pel),2) from %s.school_daily_data D where routecode = D.routecode and D.date between '%s' and '%s' group by D.routecode "%(str(brch),str(brch),str(datefrom),str(dateto))
					a = " select count(distinct routecode)  from %s.school_rpt_consolidatedreport "%(str(brch)) 
				print(milkbranch)
				cursor1.execute(milkbranch)
				print('@4021',a)
				cursor2.execute(a)
				datacount2 = cursor2.fetchall()
				for row in datacount2:
					valuescount2=row[0]

				cursor15 = connection.cursor()
				routeupdate = "update %s.school_rpt_consolidatedreport D ,%s.School_center C set routecode = C.route_number  where D.centercode = C.centre_code and D.date between '%s' and '%s' "%(str(brch),str(brch),str(datefrom),str(dateto))
				print(routeupdate)
				cursor15.execute(routeupdate)

				cursor16 = connection.cursor()
				routeupdate1 = "update %s.school_rpt_consolidatedreport D ,%s.School_route R set routename = R.route_name  where D.routecode = R.route_number and D.date between '%s' and '%s'"%(str(brch),str(brch),str(datefrom),str(dateto))
				print(routeupdate1)
				cursor16.execute(routeupdate1)

				cursor17 = connection.cursor()
				centerupdate1 = "update %s.school_rpt_consolidatedreport D ,%s.School_center C set centername = C.name  where D.centercode = C.centre_code and D.date between '%s' and '%s'"%(str(brch),str(brch),str(datefrom),str(dateto))
				print(centerupdate1)
				cursor17.execute(centerupdate1)

				



				if routecode == 'all' and centercode == 'all':
					if selecting == 'Date':
						md = RPT_consolidatedreport.objects.using(brch).filter(date__range = [datefrom,dateto]).distinct()
						valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(date__range = [datefrom,dateto]).distinct().count()
					elif selecting == 'Branch' :
						mb = RPT_consolidatedreport.objects.using(brch).filter(date__range = [datefrom,dateto]).distinct()
						valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(date__range = [datefrom,dateto]).distinct().count()
					elif selecting == 'Center' :
						mc = RPT_consolidatedreport.objects.using(brch).filter(date__range = [datefrom,dateto]).distinct()
						valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(date__range = [datefrom,dateto]).distinct().count()
					elif selecting == 'Route' :
						mr = RPT_consolidatedreport.objects.using(brch).filter(date__range = [datefrom,dateto]).distinct()
						valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(date__range = [datefrom,dateto]).distinct().count()
					total_listkgs = []
					total_listgamt = []
					total_listfat = []
					total_listltrs = []
					total_listsnf = []
					total_listafat = []
					total_listasnf = []
					total_listrate =[]
					total_listpel = []
					total_tsrate = []
					total_ltrtsrate = []
					total_netamount = []
					total_kgtsrate = []
					total_kgsall = RPT_consolidatedreport.objects.using(brch).filter(date__range = [datefrom,dateto]).distinct()
					for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listltrs),4)
						total_listafat.append(i.afat)
						total_afatsum_detail = round(sum(total_listafat),2)
						total_afatsum_detail1 = total_afatsum_detail/valuescount2
						total_listasnf.append(i.asnf)
						total_asnfsum_detail = round(sum(total_listasnf),2)
						total_asnfsum_detail1 = total_asnfsum_detail/valuescount2
						total_listfat.append(i.Fat)
						total_fatsum_detail = round(sum(total_listfat),3)
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
						total_listrate.append(i.RateLTR)
						total_ratesum_detail = round(sum(total_listrate),2)/valuescount2
						total_listpel.append(i.pel)
						total_pelsum_detail = round(sum(total_listpel),2)
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
						total_tsrate.append(i.tsrate)
						total_tsrate_detail = round(sum(total_tsrate),2)/valuescount2
						total_ltrtsrate.append(i.ltrtsrate)
						total_ltrtsrate_detail = round(sum(total_ltrtsrate),2)/valuescount2
						total_kgtsrate.append(i.kgtsrate)
						total_kgtsrate_detail = round(sum(total_kgtsrate),2)/valuescount2
						total_netamount.append(i.net)
						total_netamount_detail = round(sum(total_netamount),2)
				elif routecode == 'all' and centercode != 'all':
					if selecting == 'Date':
						md = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode).distinct()
						valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode).distinct().count()
					elif selecting == 'Branch' :
						mb = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode).distinct()
						valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode).distinct().count()
					elif selecting == 'Center' :
						mc = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode).distinct()
						valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode).distinct().count()
					elif selecting == 'Route' :
						mr = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode).distinct()
						valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode).distinct().count()
					total_listkgs = []
					total_listltrs =[]
					total_listgamt = []
					total_listfat = []
					total_listsnf = []
					total_listafat = []
					total_listasnf = []
					total_listrate =[]
					total_listpel = []
					total_tsrate = []
					total_ltrtsrate = []
					total_kgtsrate = []
					total_netamount = []
					total_kgsall = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode).distinct()
					for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listltrs),4)
						total_listafat.append(i.afat)
						total_afatsum_detail = round(sum(total_listafat),2)
						total_afatsum_detail1 = total_afatsum_detail/valuescount2
						total_listasnf.append(i.asnf)
						total_asnfsum_detail = round(sum(total_listasnf),2)
						total_asnfsum_detail1 = total_asnfsum_detail/valuescount2
						total_listfat.append(i.Fat)
						total_fatsum_detail = round(sum(total_listfat),3)
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
						total_listrate.append(i.RateLTR)
						total_ratesum_detail = round(sum(total_listrate),2)/valuescount2
						total_listpel.append(i.pel)
						total_pelsum_detail = round(sum(total_listpel),2)
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
						total_tsrate.append(i.tsrate)
						total_tsrate_detail = round(sum(total_tsrate),2)/valuescount2
						total_ltrtsrate.append(i.ltrtsrate)
						total_ltrtsrate_detail = round(sum(total_ltrtsrate),2)/valuescount2
						total_kgtsrate.append(i.kgtsrate)
						total_kgtsrate_detail = round(sum(total_kgtsrate),2)/valuescount2
						total_netamount.append(i.net)
						total_netamount_detail = round(sum(total_netamount),2)				
				elif routecode != 'all' and centercode == 'all':
					if selecting == 'Date':
						md = RPT_consolidatedreport.objects.using(brch).filter(routecode=routecode).distinct()
						valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(routecode=routecode).distinct().count()
					elif selecting == 'Branch' :
						mb = RPT_consolidatedreport.objects.using(brch).filter(routecode=routecode).distinct()
						valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(routecode=routecode).distinct().count()
					elif selecting == 'Center' :
						mc = RPT_consolidatedreport.objects.using(brch).filter(routecode=routecode).distinct()
						valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(routecode=routecode).distinct().count()
					elif selecting == 'Route' :
						mr = RPT_consolidatedreport.objects.using(brch).filter(routecode=routecode).distinct()
						valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(routecode=routecode).distinct().count()
					total_listkgs = []
					total_listltrs =[]
					total_listgamt = []
					total_listfat = []
					total_listsnf = []
					total_listafat = []
					total_listasnf = []
					total_listrate =[]
					total_listpel = []
					total_tsrate = []
					total_ltrtsrate = []
					total_kgtsrate = []
					total_netamount = []
					total_kgsall = RPT_consolidatedreport.objects.using(brch).filter(routecode=routecode).distinct()
					for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listltrs),4)
						total_listafat.append(i.afat)
						total_afatsum_detail = round(sum(total_listafat),2)
						total_afatsum_detail1 = total_afatsum_detail/valuescount2
						total_listasnf.append(i.asnf)
						total_asnfsum_detail = round(sum(total_listasnf),2)
						total_asnfsum_detail1 = total_asnfsum_detail/valuescount2
						total_listfat.append(i.Fat)
						total_fatsum_detail = round(sum(total_listfat),3)
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
						total_listrate.append(i.RateLTR)
						total_ratesum_detail = round(sum(total_listrate),2)/valuescount2
						total_listpel.append(i.pel)
						total_pelsum_detail = round(sum(total_listpel),2)
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
						total_tsrate.append(i.tsrate)
						total_tsrate_detail = round(sum(total_tsrate),2)/valuescount2
						total_ltrtsrate.append(i.ltrtsrate)
						total_ltrtsrate_detail = round(sum(total_ltrtsrate),2)/valuescount2
						total_kgtsrate.append(i.kgtsrate)
						total_kgtsrate_detail = round(sum(total_kgtsrate),2)/valuescount2
						total_netamount.append(i.net)
						total_netamount_detail = round(sum(total_netamount),2)
				else:
					if selecting == 'Date':
						md = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode,routecode=routecode).distinct()
						valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode,routecode=routecode).distinct().count()
					elif selecting == 'Branch' :
						mb = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode,routecode=routecode).distinct()
						valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode,routecode=routecode).distinct().count()
					elif selecting == 'Center' :
						mc = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode,routecode=routecode).distinct()
						valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode,routecode=routecode).distinct().count()
					elif selecting == 'Route' :
						mr = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode,routecode=routecode).distinct()
						valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode,routecode=routecode).distinct().count()
					total_listkgs = []
					total_listltrs =[]
					total_listgamt = []
					total_listfat = []
					total_listsnf = []
					total_listafat = []
					total_listasnf = []
					total_listrate =[]
					total_listpel = []
					total_tsrate = []
					total_ltrtsrate = []
					total_kgtsrate = []
					total_netamount = []
					total_kgsall = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode,routecode=routecode).distinct()
					for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listltrs),4)
						total_listafat.append(i.afat)
						total_afatsum_detail = round(sum(total_listafat),2)
						total_afatsum_detail1 = total_afatsum_detail/valuescount2
						total_listasnf.append(i.asnf)
						total_asnfsum_detail = round(sum(total_listasnf),2)
						total_asnfsum_detail1 = total_asnfsum_detail/valuescount2
						total_listfat.append(i.Fat)
						total_fatsum_detail = round(sum(total_listfat),3)
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
						total_listrate.append(i.RateLTR)
						total_ratesum_detail = round(sum(total_listrate),2)/valuescount2
						total_listpel.append(i.pel)
						total_pelsum_detail = round(sum(total_listpel),2)
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
						total_tsrate.append(i.tsrate)
						total_tsrate_detail = round(sum(total_tsrate),2)/valuescount2
						total_ltrtsrate.append(i.ltrtsrate)
						total_ltrtsrate_detail = round(sum(total_ltrtsrate),2)/valuescount2
						total_kgtsrate.append(i.kgtsrate)
						total_kgtsrate_detail = round(sum(total_kgtsrate),2)/valuescount2
						total_netamount.append(i.net)
						total_netamount_detail = round(sum(total_netamount),2)
			
	#except Exception as err:
	#	if search("float division by zero",str(err)):
	#		messages.error(request,'No  Data found')
	#	elif search("[Errno 5] Input/output error",str(err)):
	#		messages.error(request,'Please contact your system Administrator :  +91 9949124471')
	#	else:		
	#		messages.success(request,'Invalid Data Entry')
			
		return render(request,'milkcollectionreport.html',locals())


# Code optimization start  by Karthik dtd 24.04.2021//
import datetime
from django.db import connection
import mysql.connector
from mysql.connector import Error
def consolidated(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		route = Route.objects.using(brch).all()
		center = Center.objects.using(brch).all()
		branch = Branch.objects.using(brch).all()
		today = date.today()
		t_m = datetime.datetime.now().month
		#t_y = datetime.datetime.now().year
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode =  request.POST["routecode"]
			centercode = request.POST["centercode"]
			selecting = request.POST["Issued_to"]
			RalCal = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,round(sum(qty),2) kgs,round(sum(ltrs),2) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,round(sum(fat),2) Fat,round(sum(snf),2) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data  where date between '%s' and '%s' group by date,shift "%(str(brch),str(datefrom),str(dateto)) 
			RalCs = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,round(sum(qty),2) kgs,round(sum(ltrs),2) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,round(sum(fat),2) Fat,round(sum(snf),2) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and centercode = '%s' group by date,shift"%(str(brch),str(datefrom),str(dateto),str(centercode))
			RsCal = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,round(sum(qty),2) kgs,round(sum(ltrs),2) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,round(sum(fat),2) Fat,round(sum(snf),2) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and routecode = '%s' group by date,shift"%(str(brch),str(datefrom),str(dateto),str(routecode))
			RsCs = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,round(sum(qty),2) kgs,round(sum(ltrs),2) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,round(sum(fat),2) Fat,round(sum(snf),2) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and centercode ='%s' and routecode = '%s' group by date,shift"%(str(brch),str(datefrom),str(dateto),str(centercode),str(routecode))
			RalCal1 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,round(sum(qty),2) kgs,round(sum(ltrs),2) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,round(sum(fat),2) Fat,round(sum(snf),2) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data  where date between '%s' and '%s' group by centercode,shift "%(str(brch),str(datefrom),str(dateto)) 
			RalCs1 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,round(sum(qty),2) kgs,round(sum(ltrs),2) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,round(sum(fat),2) Fat,round(sum(snf),2) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and centercode = '%s' group by centercode,shift"%(str(brch),str(datefrom),str(dateto),str(centercode))
			RsCal1 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,round(sum(qty),2) kgs,round(sum(ltrs),2) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,round(sum(fat),2) Fat,round(sum(snf),2) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and routecode = '%s' group by centercode,shift"%(str(brch),str(datefrom),str(dateto),str(routecode))
			RsCs1 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,round(sum(qty),2) kgs,round(sum(ltrs),2) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,round(sum(fat),2) Fat,round(sum(snf),2) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and centercode ='%s' and routecode = '%s' group by centercode,shift"%(str(brch),str(datefrom),str(dateto),str(centercode),str(routecode))
			RalCal2 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,round(sum(qty),2) kgs,round(sum(ltrs),2) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,round(sum(fat),2) Fat,round(sum(snf),2) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data  where date between '%s' and '%s' group by routecode,shift "%(str(brch),str(datefrom),str(dateto)) 
			RalCs2 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,round(sum(qty),2) kgs,round(sum(ltrs),2) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,round(sum(fat),2) Fat,round(sum(snf),2) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and centercode = '%s' group by routecode,shift"%(str(brch),str(datefrom),str(dateto),str(centercode))
			RsCal2 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,round(sum(qty),2) kgs,round(sum(ltrs),2) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,round(sum(fat),2) Fat,round(sum(snf),2) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and routecode = '%s' group by routecode,shift"%(str(brch),str(datefrom),str(dateto),str(routecode))
			RsCs2 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,round(sum(qty),2) kgs,round(sum(ltrs),2) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,round(sum(fat),2) Fat,round(sum(snf),2) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and centercode ='%s' and routecode = '%s' group by routecode,shift"%(str(brch),str(datefrom),str(dateto),str(centercode),str(routecode))
			if selecting == 'Date' :
				rouallcenall = RalCal
				rouallcensel = RalCs
				rouselcenall = RsCal
				rouselcensel = RsCs
			elif selecting == 'Center' :
				rouallcenall = RalCal1
				rouallcensel = RalCs1
				rouselcenall = RsCal1
				rouselcensel = RsCs1
			elif selecting == 'Route' :
				rouallcenall = RalCal2
				rouallcensel = RalCs2
				rouselcenall = RsCal2
				rouselcensel = RsCs2

			if routecode == 'all' and centercode == 'all':
				if selecting == 'Date':
					dd = RPT_consolidatedreport.objects.raw(rouallcenall)
				elif selecting == 'Center' :
					dc = RPT_consolidatedreport.objects.raw(rouallcenall)
				elif selecting == 'Route' :
					dr = RPT_consolidatedreport.objects.raw(rouallcenall)
				total_listkgs = []
				total_listgamt = []
				total_listfat = []
				total_listltrs = []
				total_listsnf = []
				total_listafat = []
				total_listasnf = []
				total_listrate =[]
				total_listpel = []
				total_kgsall = RPT_consolidatedreport.objects.raw(rouallcenall)
				for i in total_kgsall:
					total_listkgs.append(i.kgs)
					total_kgssum_detail = round(sum(total_listkgs),2)
					total_listltrs.append(i.Ltrs)
					total_ltrssum_detail = round(sum(total_listltrs),4)
					total_listafat.append(i.afat)
					total_afatsum_detail = round(sum(total_listafat),2)
					total_listasnf.append(i.asnf)
					total_asnfsum_detail = round(sum(total_listasnf),2)/2
					total_listfat.append(i.Fat)
					total_fatsum_detail = round(sum(total_listfat),3)
					total_listsnf.append(i.Snf)
					total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate.append(i.RateLTR)
					total_ratesum_detail = round(sum(total_listrate),2)
					total_listpel.append(i.pel)
					total_pelsum_detail = round(sum(total_listpel),2)
					total_listgamt.append(i.gamount)
					total_gamtsum_detail = sum(total_listgamt)
					
			elif  centercode != 'all' and routecode == 'all':
				if selecting == 'Date':
					dd = RPT_consolidatedreport.objects.raw(rouallcensel)
				elif selecting == 'Center' :
					dc = RPT_consolidatedreport.objects.raw(rouallcensel)
				elif selecting == 'Route' :
					dr = RPT_consolidatedreport.objects.raw(rouallcensel)
				total_listkgs = []
				total_listgamt = []
				total_listfat = []
				total_listltrs = []
				total_listsnf = []
				total_listafat = []
				total_listasnf = []
				total_listrate =[]
				total_listpel = []
				total_kgsall = RPT_consolidatedreport.objects.raw(rouallcensel)
				for i in total_kgsall:
					total_listkgs.append(i.kgs)
					total_kgssum_detail = round(sum(total_listkgs),2)
					total_listltrs.append(i.Ltrs)
					total_ltrssum_detail = round(sum(total_listltrs),4)
					total_listafat.append(i.afat)
					total_afatsum_detail = round(sum(total_listafat),2)
					total_listasnf.append(i.asnf)
					total_asnfsum_detail = round(sum(total_listasnf),2)/2
					total_listfat.append(i.Fat)
					total_fatsum_detail = round(sum(total_listfat),3)
					total_listsnf.append(i.Snf)
					total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate.append(i.RateLTR)
					total_ratesum_detail = round(sum(total_listrate),2)
					total_listpel.append(i.pel)
					total_pelsum_detail = round(sum(total_listpel),2)
					total_listgamt.append(i.gamount)
					total_gamtsum_detail = sum(total_listgamt)
			elif centercode == 'all' and routecode != 'all':
				if selecting == 'Date':
					dd = RPT_consolidatedreport.objects.raw(rouselcenall)
				elif selecting == 'Center' :
					dc = RPT_consolidatedreport.objects.raw(rouselcenall)
				elif selecting == 'Route' :
					dr = RPT_consolidatedreport.objects.raw(rouselcenall)
				total_listkgs = []
				total_listgamt = []
				total_listfat = []
				total_listltrs = []
				total_listsnf = []
				total_listafat = []
				total_listasnf = []
				total_listrate =[]
				total_listpel = []
				total_kgsall = RPT_consolidatedreport.objects.raw(rouselcenall)
				for i in total_kgsall:
					total_listkgs.append(i.kgs)
					total_kgssum_detail = round(sum(total_listkgs),2)
					total_listltrs.append(i.Ltrs)
					total_ltrssum_detail = round(sum(total_listltrs),4)
					total_listafat.append(i.afat)
					total_afatsum_detail = round(sum(total_listafat),2)
					total_listasnf.append(i.asnf)
					total_asnfsum_detail = round(sum(total_listasnf),2)/2
					total_listfat.append(i.Fat)
					total_fatsum_detail = round(sum(total_listfat),3)
					total_listsnf.append(i.Snf)
					total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate.append(i.RateLTR)
					total_ratesum_detail = round(sum(total_listrate),2)
					total_listpel.append(i.pel)
					total_pelsum_detail = round(sum(total_listpel),2)
					total_listgamt.append(i.gamount)
					total_gamtsum_detail = sum(total_listgamt)
			elif  centercode != 'all' and routecode != 'all':
				if selecting == 'Date':
					dd = RPT_consolidatedreport.objects.raw(rouselcensel)
				elif selecting == 'Center' :
					dc = RPT_consolidatedreport.objects.raw(rouselcensel)
				elif selecting == 'Route' :
					dr = RPT_consolidatedreport.objects.raw(rouselcensel)
				total_listkgs = []
				total_listgamt = []
				total_listfat = []
				total_listltrs = []
				total_listsnf = []
				total_listafat = []
				total_listasnf = []
				total_listrate =[]
				total_listpel = []
				total_kgsall = RPT_consolidatedreport.objects.raw(rouselcensel)
				for i in total_kgsall:
					total_listkgs.append(i.kgs)
					total_kgssum_detail = round(sum(total_listkgs),2)
					total_listltrs.append(i.Ltrs)
					total_ltrssum_detail = round(sum(total_listltrs),4)
					total_listafat.append(i.afat)
					total_afatsum_detail = round(sum(total_listafat),2)
					total_listasnf.append(i.asnf)
					total_asnfsum_detail = round(sum(total_listasnf),2)/2
					total_listfat.append(i.Fat)
					total_fatsum_detail = round(sum(total_listfat),3)
					total_listsnf.append(i.Snf)
					total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate.append(i.RateLTR)
					total_ratesum_detail = round(sum(total_listrate),2)
					total_listpel.append(i.pel)
					total_pelsum_detail = round(sum(total_listpel),2)
					total_listgamt.append(i.gamount)
					total_gamtsum_detail = sum(total_listgamt)
		return render(request,'consolidated.html',locals())
#// Code optimization ends  by Karthik dtd 24.04.2021//

import datetime
from django.db import connection
import mysql.connector
from mysql.connector import Error
def dashboardbranch(request):

	branch = Branch.objects.all()
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day =1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)

	if request.session.has_key('name'):
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			branchcode =  request.POST["brcode"]
			Shift = request.POST["dayshift"]
			Milktype = request.POST["milk_type"]
			selecting = request.POST["Issued_to"]

			branchList = list();
			if branchcode=='all':
				branchListQuery ="select id,code from ho.school_branch group by code"
				branchListObj = Dashboard_branch.objects.raw(branchListQuery)
				for branchObj in branchListObj:
					branchList.append(branchObj.code)
			else:
				branchList.append(branchcode)
				print(branchList)
			
			if selecting == 'Date':
				dc=list()

				for branchcode in branchList:

					#Date
					RalCal1 = "select id id,date date,shift Shift,milk_type Milktype,branch branch,centercode centercode,routecode routecode,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round(sum(ltrrate),5) RateLTR,sum(pel) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' group by branch"%(str(branchcode),str(datefrom),str(dateto)) 
					RalCs1 = "select id id,date date,shift Shift,milk_type Milktype,branch branch,centercode centercode,routecode routecode,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round(sum(ltrrate),5) RateLTR,sum(pel) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and Shift = '%s' group by branch"%(str(branchcode),str(datefrom),str(dateto),str(Shift))
					RsCal1 = "select id id,date date,shift Shift,milk_type Milktype,branch branch,centercode centercode,routecode routecode,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round(sum(ltrrate),5) RateLTR,sum(pel) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and milk_type = '%s' group by branch"%(str(branchcode),str(datefrom),str(dateto),str(Milktype))
					RsCs1 = "select id id,date date,shift Shift,milk_type Milktype,branch branch,centercode centercode,routecode routecode,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round(sum(ltrrate),5) RateLTR,sum(pel) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and Shift ='%s' and Milktype = '%s' group by branch"%(str(branchcode),str(datefrom),str(dateto),str(Shift),str(Milktype)) 
				
					if Shift =='all' and Milktype =='all':
						queryResult = Dashboard_branch.objects.raw(RalCal1)	
						print(queryResult)					
					elif Shift != 'all' and Milktype == 'all' :
						queryResult= Dashboard_branch.objects.raw(RalCs1)						
					elif Shift == 'all' and Milktype != 'all':
						queryResult = Dashboard_branch.objects.raw(RsCal1)						
					elif Shift != 'all' and Milktype !='all':
						queryResult = Dashboard_branch.objects.raw(RsCs1)

					Quantitykgs=0.0;Quantityltrs=0.0;afat=0.0;asnf=0.0;Rate=0.0;Grossamount=0.0;
					total=Dashboard_branch()
					for d in dc:						
						Quantitykgs=Quantitykgs+(d.kgs)
						Quantityltrs=Quantityltrs+(d.Ltrs)
						afat=afat+(d.afat)
						asnf=asnf+(d.asnf)
						Rate=Rate+(d.RateLTR)
						Grossamount=Grossamount+(d.gamount)
						dc.append(d)
					
					total.branch="total"
					total.kgs=Quantitykgs
					total.Ltrs=Quantityltrs
					total.afat=afat
					total.asnf=asnf
					total.RateLtr=Rate
					total.gamount=Grossamount
					dc.append(total)

			if selecting == 'Branch':
				dc=list()
				for branchcode in branchList:
					#Branch
					RalCal = "select id id,date date,shift Shift,milk_type milktype,branch branch,centercode centercode,routecode routecode,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round(sum(ltrrate),5) RateLTR,sum(pel) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' group by branch"%(str(branchcode),str(datefrom),str(dateto)) 
					RalCs = "select id id,date date,shift Shift,milk_type milktype,branch branch,centercode centercode,routecode routecode,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round(sum(ltrrate),5) RateLTR,sum(pel) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and Shift = '%s' group by branch"%(str(branchcode),str(datefrom),str(dateto),str(Shift))
					RsCal = "select id id,date date,shift Shift,milk_type milktype,branch branch,centercode centercode,routecode routecode,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round(sum(ltrrate),5) RateLTR,sum(pel) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and milk_type = '%s' group by branch"%(str(branchcode),str(datefrom),str(dateto),str(Milktype))
					RsCs = "select id id,date date,shift Shift,milk_type milktype,branch branch,centercode centercode,routecode routecode,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round(sum(ltrrate),5) RateLTR,sum(pel) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and Shift ='%s' and milk_type = '%s' group by branch"%(str(branchcode),str(datefrom),str(dateto),str(Shift),str(Milktype)) 

					if Shift =='all' and Milktype =='all':
						queryResult =Dashboard_branch.objects.raw(RalCal)
					elif Shift != 'all' and Milktype == 'all' :
						queryResult =Dashboard_branch.objects.raw(RalCs)
					elif Shift == 'all' and Milktype != 'all':
						queryResult =Dashboard_branch.objects.raw(RsCal)
					elif Shift != 'all' and Milktype !='all':
						queryResult =Dashboard_branch.objects.raw(RsCs)
						
					Quantitykgs=0.0;Quantityltrs=0.0;afat=0.0;asnf=0.0;Rate=0.0;Grossamount=0.0;
					total=Dashboard_branch()
					for d in queryResult:						
						Quantitykgs=Quantitykgs+(d.kgs)
						Quantityltrs=Quantityltrs+(d.Ltrs)
						afat=afat+(d.afat)
						asnf=asnf+(d.asnf)
						Rate=Rate+(d.RateLTR)
						Grossamount=Grossamount+(d.gamount)
						dc.append(d)
					
					total.branch="total"
					total.kgs=Quantitykgs
					total.Ltrs=Quantityltrs
					total.afat=asnf
					total.asnf=afat
					total.RateLtr=Rate
					total.gamount=Grossamount
					dc.append(total)
			
	return render(request,'dashboardbranch.html',locals())	

class GeneratePdfMilkCollection(View):
	def get(self, request,slug, slug1, slug2,slug3 ,slug4, *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_milkcollectionreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)

			#datefrom1 =datetime.datetime.strptime(datefrom, '%Y-%m-%d').strftime('%d-%m-%Y')
			#print(datefrom)
			#dateto1 = datetime.datetime.strptime(dateto, '%Y-%m-%d').strftime('%d-%m-%Y')	
			
			cursor = connection.cursor()
					
			directQ ="delete from %s.school_rpt_consolidatedreport"%(str(brch))
			cursor.execute(directQ)
			cursor1 = connection.cursor() 
			cursor2 = connection.cursor() 
			if slug4 == "Branch":
				milkbranch = "insert into %s.school_rpt_consolidatedreport(date,Shift,Milktype,centercode,branch,centername,routecode,routename,kgs,Ltrs,Fat,Snf,afat,asnf,gamount,net,RateLtr,tsrate,ltrtsrate,kgtsrate,pel) select date,shift,milk_type,centercode,branch,centername,routecode,routename,round(sum(qty),2),round(sum(ltrs),2),round(sum(fat),2),round(sum(snf),2),round(avg(fat),2),round(avg(snf),2),round(sum(amount),2),round((sum(amount)+sum(pel)),2),round(ltrrate,2),tsrate,round(avg(tsrate),2),round((avg(tsrate)*1.03),2),round(sum(pel),2) from %s.school_daily_data D where branch = D.branch and D.date between '%s' and '%s' group by D.branch "%(str(brch),str(brch),str(slug),str(slug1))
				a = " select count(distinct branch)  from %s.school_rpt_consolidatedreport "%(str(brch)) 
			elif slug4 == "Date":
				milkbranch = "insert into %s.school_rpt_consolidatedreport(date,Shift,Milktype,centercode,branch,centername,routecode,routename,kgs,Ltrs,Fat,Snf,afat,asnf,gamount,net,RateLtr,tsrate,ltrtsrate,kgtsrate,pel) select date,shift,milk_type,centercode,branch,centername,routecode,routename,round(sum(qty),2),round(sum(ltrs),2),round(sum(fat),2),round(sum(snf),2),round(avg(fat),2),round(avg(snf),2),round(sum(amount),2),round((sum(amount)+sum(pel)),2),round(ltrrate,2),tsrate,round(avg(tsrate),2),round((avg(tsrate)*1.03),2),round(sum(pel),2) from %s.school_daily_data D where date = D.date and D.date between '%s' and '%s' group by D.date "%(str(brch),str(brch),str(slug),str(slug1))
				a = " select count(distinct date)  from %s.school_rpt_consolidatedreport "%(str(brch)) 
			elif slug4 == "Center":
				milkbranch = "insert into %s.school_rpt_consolidatedreport(date,Shift,Milktype,centercode,branch,centername,routecode,routename,kgs,Ltrs,Fat,Snf,afat,asnf,gamount,net,RateLtr,tsrate,ltrtsrate,kgtsrate,pel) select date,shift,milk_type,centercode,branch,centername,routecode,routename,round(sum(qty),2),round(sum(ltrs),2),round(sum(fat),2),round(sum(snf),2),round(avg(fat),2),round(avg(snf),2),round(sum(amount),2),round((sum(amount)+sum(pel)),2),round(ltrrate,2),tsrate,round(avg(tsrate),2),round((avg(tsrate)*1.03),2),round(sum(pel),2) from %s.school_daily_data D where centercode = D.centercode and D.date between '%s' and '%s' group by D.centercode "%(str(brch),str(brch),str(slug),str(slug1))
				a = " select count(distinct centercode)  from %s.school_rpt_consolidatedreport "%(str(brch)) 
			elif slug4 == "Route":
				milkbranch = "insert into %s.school_rpt_consolidatedreport(date,Shift,Milktype,centercode,,branch,centername,routecode,routename,kgs,Ltrs,Fat,Snf,afat,asnf,gamount,net,RateLtr,tsrate,ltrtsrate,kgtsrate,pel) select date,shift,milk_type,centercode,branch,centername,routecode,routename,round(sum(qty),2),round(sum(ltrs),2),round(sum(fat),2),round(sum(snf),2),round(avg(fat),2),round(avg(snf),2),round(sum(amount),2),round((sum(amount)+sum(pel)),2),round(ltrrate,2),tsrate,round(avg(tsrate),2),round((avg(tsrate)*1.03),2),round(sum(pel),2) from %s.school_daily_data D where routecode = D.routecode and D.date between '%s' and '%s' group by D.routecode "%(str(brch),str(brch),str(slug),str(slug1))
				a = " select count(distinct routecode)  from %s.school_rpt_consolidatedreport "%(str(brch)) 
			print(milkbranch)
			cursor1.execute(milkbranch)
			print('@4021',a)
			cursor2.execute(a)
			datacount2 = cursor2.fetchall()
			for row in datacount2:
				valuescount2=row[0]

			cursor15 = connection.cursor()
			routeupdate = "update %s.school_rpt_consolidatedreport D ,%s.School_center C set routecode = C.route_number  where D.centercode = C.centre_code and D.date between '%s' and '%s' "%(str(brch),str(brch),str(slug),str(slug1))
			print(routeupdate)
			cursor15.execute(routeupdate)

			cursor16 = connection.cursor()
			routeupdate1 = "update %s.school_rpt_consolidatedreport D ,%s.School_route R set routename = R.route_name  where D.routecode = R.route_number and D.date between '%s' and '%s'"%(str(brch),str(brch),str(slug),str(slug1))
			print(routeupdate1)
			cursor16.execute(routeupdate1)

			cursor17 = connection.cursor()
			centerupdate1 = "update %s.school_rpt_consolidatedreport D ,%s.School_center C set centername = C.name  where D.centercode = C.centre_code and D.date between '%s' and '%s'"%(str(brch),str(brch),str(slug),str(slug1))
			print(centerupdate1)
			cursor17.execute(centerupdate1)

			



			if slug2 == 'all' and slug3 == 'all':
				if slug4 == 'Date':
					datad = RPT_consolidatedreport.objects.using(brch).filter(date__range = [slug,slug1]).distinct()
					valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(date__range = [slug,slug1]).distinct().count()
				elif slug4 == 'Branch' :
					datad = RPT_consolidatedreport.objects.using(brch).filter(date__range = [slug,slug1]).distinct()
					valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(date__range = [slug,slug1]).distinct().count()
				elif slug4 == 'Center' :
					datad = RPT_consolidatedreport.objects.using(brch).filter(date__range = [slug,slug1]).distinct()
					valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(date__range = [slug,slug1]).distinct().count()
				elif slug4 == 'Route' :
					datad = RPT_consolidatedreport.objects.using(brch).filter(date__range = [slug,slug1]).distinct()
					valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(date__range = [slug,slug1]).distinct().count()
				total_listkgs = []
				total_listgamt = []
				total_listfat = []
				total_listltrs = []
				total_listsnf = []
				total_listafat = []
				total_listasnf = []
				total_listrate =[]
				total_listpel = []
				total_tsrate = []
				total_ltrtsrate = []
				total_netamount = []
				total_kgtsrate = []
				total_kgsall = RPT_consolidatedreport.objects.using(brch).filter(date__range = [slug,slug1]).distinct()
				for i in total_kgsall:
					total_listkgs.append(i.kgs)
					total_kgssum_detail = round(sum(total_listkgs),2)
					total_listltrs.append(i.Ltrs)
					total_ltrssum_detail = round(sum(total_listltrs),4)
					total_listafat.append(i.afat)
					total_afatsum_detail = round(sum(total_listafat),2)
					total_afatsum_detail1 = total_afatsum_detail/valuescount2
					total_listasnf.append(i.asnf)
					total_asnfsum_detail = round(sum(total_listasnf),2)
					total_asnfsum_detail1 = total_asnfsum_detail/valuescount2
					total_listfat.append(i.Fat)
					total_fatsum_detail = round(sum(total_listfat),3)
					total_listsnf.append(i.Snf)
					total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate.append(i.RateLTR)
					total_ratesum_detail = round(sum(total_listrate),2)/valuescount2
					total_listpel.append(i.pel)
					total_pelsum_detail = round(sum(total_listpel),2)
					total_listgamt.append(i.gamount)
					total_gamtsum_detail = sum(total_listgamt)
					total_tsrate.append(i.tsrate)
					total_tsrate_detail = round(sum(total_tsrate),2)/valuescount2
					total_ltrtsrate.append(i.ltrtsrate)
					total_ltrtsrate_detail = round(sum(total_ltrtsrate),2)/valuescount2
					total_kgtsrate.append(i.kgtsrate)
					total_kgtsrate_detail = round(sum(total_kgtsrate),2)/valuescount2
					total_netamount.append(i.net)
					total_netamount_detail = round(sum(total_netamount),2)
			elif slug2 == 'all' and slug3 != 'all':
				if slug4 == 'Date':
					datad = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3).distinct()
					valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3).distinct().count()
				elif slug4 == 'Branch' :
					datad = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3).distinct()
					valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3).distinct().count()
				elif slug4 == 'Center' :
					datad = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3).distinct()
					valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3).distinct().count()
				elif slug4 == 'Route' :
					datad = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3).distinct()
					valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3).distinct().count()
				total_listkgs = []
				total_listltrs =[]
				total_listgamt = []
				total_listfat = []
				total_listsnf = []
				total_listafat = []
				total_listasnf = []
				total_listrate =[]
				total_listpel = []
				total_tsrate = []
				total_ltrtsrate = []
				total_kgtsrate = []
				total_netamount = []
				total_kgsall = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3).distinct()
				for i in total_kgsall:
					total_listkgs.append(i.kgs)
					total_kgssum_detail = round(sum(total_listkgs),2)
					total_listltrs.append(i.Ltrs)
					total_ltrssum_detail = round(sum(total_listltrs),4)
					total_listafat.append(i.afat)
					total_afatsum_detail = round(sum(total_listafat),2)
					total_afatsum_detail1 = total_afatsum_detail/valuescount2
					total_listasnf.append(i.asnf)
					total_asnfsum_detail = round(sum(total_listasnf),2)
					total_asnfsum_detail1 = total_asnfsum_detail/valuescount2
					total_listfat.append(i.Fat)
					total_fatsum_detail = round(sum(total_listfat),3)
					total_listsnf.append(i.Snf)
					total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate.append(i.RateLTR)
					total_ratesum_detail = round(sum(total_listrate),2)/valuescount2
					total_listpel.append(i.pel)
					total_pelsum_detail = round(sum(total_listpel),2)
					total_listgamt.append(i.gamount)
					total_gamtsum_detail = sum(total_listgamt)
					total_tsrate.append(i.tsrate)
					total_tsrate_detail = round(sum(total_tsrate),2)/valuescount2
					total_ltrtsrate.append(i.ltrtsrate)
					total_ltrtsrate_detail = round(sum(total_ltrtsrate),2)/valuescount2
					total_kgtsrate.append(i.kgtsrate)
					total_kgtsrate_detail = round(sum(total_kgtsrate),2)/valuescount2
					total_netamount.append(i.net)
					total_netamount_detail = round(sum(total_netamount),2)				
			elif slug2 != 'all' and slug3 == 'all':
				if slug4 == 'Date':
					datad = RPT_consolidatedreport.objects.using(brch).filter(routecode=slug2).distinct()
					valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(routecode=slug2).distinct().count()
				elif slug4 == 'Branch' :
					datad = RPT_consolidatedreport.objects.using(brch).filter(routecode=slug2).distinct()
					valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(routecode=slug2).distinct().count()
				elif slug4 == 'Center' :
					datad = RPT_consolidatedreport.objects.using(brch).filter(routecode=slug2).distinct()
					valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(routecode=slug2).distinct().count()
				elif slug4 == 'Route' :
					datad = RPT_consolidatedreport.objects.using(brch).filter(routecode=slug2).distinct()
					valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(routecode=slug2).distinct().count()
				total_listkgs = []
				total_listltrs =[]
				total_listgamt = []
				total_listfat = []
				total_listsnf = []
				total_listafat = []
				total_listasnf = []
				total_listrate =[]
				total_listpel = []
				total_tsrate = []
				total_ltrtsrate = []
				total_kgtsrate = []
				total_netamount = []
				total_kgsall = RPT_consolidatedreport.objects.using(brch).filter(routecode=slug2).distinct()
				for i in total_kgsall:
					total_listkgs.append(i.kgs)
					total_kgssum_detail = round(sum(total_listkgs),2)
					total_listltrs.append(i.Ltrs)
					total_ltrssum_detail = round(sum(total_listltrs),4)
					total_listafat.append(i.afat)
					total_afatsum_detail = round(sum(total_listafat),2)
					total_afatsum_detail1 = total_afatsum_detail/valuescount2
					total_listasnf.append(i.asnf)
					total_asnfsum_detail = round(sum(total_listasnf),2)
					total_asnfsum_detail1 = total_asnfsum_detail/valuescount2
					total_listfat.append(i.Fat)
					total_fatsum_detail = round(sum(total_listfat),3)
					total_listsnf.append(i.Snf)
					total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate.append(i.RateLTR)
					total_ratesum_detail = round(sum(total_listrate),2)/valuescount2
					total_listpel.append(i.pel)
					total_pelsum_detail = round(sum(total_listpel),2)
					total_listgamt.append(i.gamount)
					total_gamtsum_detail = sum(total_listgamt)
					total_tsrate.append(i.tsrate)
					total_tsrate_detail = round(sum(total_tsrate),2)/valuescount2
					total_ltrtsrate.append(i.ltrtsrate)
					total_ltrtsrate_detail = round(sum(total_ltrtsrate),2)/valuescount2
					total_kgtsrate.append(i.kgtsrate)
					total_kgtsrate_detail = round(sum(total_kgtsrate),2)/valuescount2
					total_netamount.append(i.net)
					total_netamount_detail = round(sum(total_netamount),2)
			else:
				if slug4 == 'Date':
					datad = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3,routecode=slug2).distinct()
					valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3,routecode=slug2).distinct().count()
				elif slug4 == 'Branch' :
					datad = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3,routecode=slug2).distinct()
					valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3,routecode=slug2).distinct().count()
				elif slug4 == 'Center' :
					datad = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3,routecode=slug2).distinct()
					valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3,routecode=slug2).distinct().count()
				elif slug4 == 'Route' :
					datad = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3,routecode=slug2).distinct()
					valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3,routecode=slug2).distinct().count()
				total_listkgs = []
				total_listltrs =[]
				total_listgamt = []
				total_listfat = []
				total_listsnf = []
				total_listafat = []
				total_listasnf = []
				total_listrate =[]
				total_listpel = []
				total_tsrate = []
				total_ltrtsrate = []
				total_kgtsrate = []
				total_netamount = []
				total_kgsall = RPT_consolidatedreport.objects.using(brch).filter(centercode=centercode,routecode=routecode).distinct()
				for i in total_kgsall:
					total_listkgs.append(i.kgs)
					total_kgssum_detail = round(sum(total_listkgs),2)
					total_listltrs.append(i.Ltrs)
					total_ltrssum_detail = round(sum(total_listltrs),4)
					total_listafat.append(i.afat)
					total_afatsum_detail = round(sum(total_listafat),2)
					total_afatsum_detail1 = total_afatsum_detail/valuescount2
					total_listasnf.append(i.asnf)
					total_asnfsum_detail = round(sum(total_listasnf),2)
					total_asnfsum_detail1 = total_asnfsum_detail/valuescount2
					total_listfat.append(i.Fat)
					total_fatsum_detail = round(sum(total_listfat),3)
					total_listsnf.append(i.Snf)
					total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate.append(i.RateLTR)
					total_ratesum_detail = round(sum(total_listrate),2)/valuescount2
					total_listpel.append(i.pel)
					total_pelsum_detail = round(sum(total_listpel),2)
					total_listgamt.append(i.gamount)
					total_gamtsum_detail = sum(total_listgamt)
					total_tsrate.append(i.tsrate)
					total_tsrate_detail = round(sum(total_tsrate),2)/valuescount2
					total_ltrtsrate.append(i.ltrtsrate)
					total_ltrtsrate_detail = round(sum(total_ltrtsrate),2)/valuescount2
					total_kgtsrate.append(i.kgtsrate)
					total_kgtsrate_detail = round(sum(total_kgtsrate),2)/valuescount2
					total_netamount.append(i.net)
					total_netamount_detail = round(sum(total_netamount),2)			
			
			context = {
				'datefrom': slug,
				'dateto': slug1,
				'routecode': slug2,
				'centercode' : slug3,
				'selecting' : slug4,
				'datad' :datad,
				'valuescount2':valuescount2,
				'total_kgssum_detail' :total_kgssum_detail,
				'total_ltrssum_detail':total_ltrssum_detail,
				'total_afatsum_detail':total_afatsum_detail,
				'total_afatsum_detail1':total_afatsum_detail1,
				'total_asnfsum_detail':total_asnfsum_detail,
				'total_asnfsum_detail1': total_asnfsum_detail1,
				'total_fatsum_detail':total_fatsum_detail,
				'total_snfsum_detail ':total_snfsum_detail,
				'total_ratesum_detail ':total_ratesum_detail,
				'total_pelsum_detail' :total_pelsum_detail,
				'total_gamtsum_detail' :total_gamtsum_detail,
				'total_tsrate_detail':	total_tsrate_detail,				
				'total_ltrtsrate_detail':total_ltrtsrate_detail,
				'total_kgtsrate_detail':total_kgtsrate_detail,
				'total_netamount_detail':total_netamount_detail,

			
				#'name': name,




			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_milkcollectionreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+""+slug1+""+slug2+"_"+slug3+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")


class GeneratePdfConsolidated(View):
	def get(self, request,slug, slug1, slug2,slug3,slug4 , *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_consolidated.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			
			RalCal = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,routecode routecode,qty kgs,ltrs Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,fat Fat,snf Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' group by routecode,date,shift"%(str(brch),str(slug),str(slug1)) 
			RalCs = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,routecode routecode,qty kgs,ltrs Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,fat Fat,snf Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and centercode = '%s' group by routecode,date,shift"%(str(brch),str(slug),str(slug1),str(slug3))
			RsCal = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,routecode routecode,qty kgs,ltrs Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,fat Fat,snf Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and routecode = '%s' group by routecode,date,shift"%(str(brch),str(slug),str(slug1),str(slug2))
			RsCs = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,routecode routecode,qty kgs,ltrs Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,fat Fat,snf Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and centercode ='%s' and routecode = '%s' group by routecode,date,shift"%(str(brch),str(slug),str(slug1),str(slug3),str(slug2))			
			if slug4 == 'Date': 
				if slug2 == 'all' and slug3 == 'all':

					datad = RPT_consolidatedreport.objects.raw(RalCal)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)/2
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)/2
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
						
				elif  slug3 != 'all' and slug2 == 'all':
					datad = RPT_consolidatedreport.objects.raw(RalCs)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)/2
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)/2
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)

				elif slug3 == 'all' and slug2 != 'all':
					datad = RPT_consolidatedreport.objects.raw(RsCal)
					total_kgsall = []
					total_listkgs = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)/2
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)/2
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
				elif  slug3 != 'all' and slug2 != 'all':
					datad = RPT_consolidatedreport.objects.raw(RsCs)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)/2
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)/2
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)

			RalCal1 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data  where date between '%s' and '%s' group by centercode,shift "%(str(brch),str(slug),str(slug1)) 
			print(RalCal1)
			RalCs1 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and centercode = '%s' group by centercode,shift"%(str(brch),str(slug),str(slug1),str(slug3))
			RsCal1 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and routecode = '%s' group by routecode,shift"%(str(brch),str(slug),str(slug1),str(slug2))
			RsCs1 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and centercode ='%s' and routecode = '%s' group by routecode,shift"%(str(brch),str(slug),str(slug1),str(slug3),str(slug2))			
			
			if slug4 == 'Center':
				if  slug3 == 'all' and slug2 == 'all':
					datad = RPT_consolidatedreport.objects.raw(RalCal1)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RalCal1)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RalCal1)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RalCal1)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)/2
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RalCal1)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)/2
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RalCal1)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RalCal1)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RalCal1)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RalCal1)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RalCal1)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
				elif slug3 != 'all' and slug2 == 'all':
					datad = RPT_consolidatedreport.objects.raw(RalCs1)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RalCs1)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RalCs1)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RalCs1)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)/2
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RalCs1)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)/2
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RalCs1)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RalCs1)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RalCs1)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RalCs1)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RalCs1)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
				elif  slug3 == 'all' and slug2 != 'all':
					datad = RPT_consolidatedreport.objects.raw(RsCal1)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RsCal1)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RsCal1)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RsCal1)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)/2
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RsCal1)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)/2
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RsCal1)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RsCal1)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RsCal1)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RsCal1)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RsCal1)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
				elif  slug3 != 'all' and slug2 != 'all':
					datad = RPT_consolidatedreport.objects.raw(RsCs1)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RsCs1)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RsCs1)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RsCs1)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)/2
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RsCs1)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)/2
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RsCs1)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RsCs1) 
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RsCs1)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RsCs1)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RsCs1)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
			RalCal2 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' group by routecode ,shift"%(str(brch),str(slug),str(slug1)) 
			RalCs2 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and routecode = '%s' group by routecode,shift"%(str(brch),str(slug),str(slug1),str(slug2))
			RsCal2 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and routecode = '%s' group by routecode,shift"%(str(brch),str(slug),str(slug1),str(slug2))
			RsCs2 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and centercode ='%s' and routecode = '%s' group by routecode,shift"%(str(brch),str(slug),str(slug1),str(slug3),str(slug2))			
			

			if slug4 == 'Route':
				if slug3 == 'all' and slug2 == 'all':
					datad = RPT_consolidatedreport.objects.raw(RalCal2)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RalCal2)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RalCal2)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RalCal2)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)/2
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RalCal2)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)/2
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RalCal2)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RalCal2)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RalCal2)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RalCal2)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RalCal2)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
				elif slug3 != 'all' and slug2 == 'all':
					datad = RPT_consolidatedreport.objects.raw(RalCs2)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RalCs2)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RalCs2)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RalCs2)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)/2
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RalCs2)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)/2
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RalCs2)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RalCs2)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RalCs2)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RalCs2)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RalCs2)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)

				elif slug3 == 'all' and slug2 != 'all':
					datad = RPT_consolidatedreport.objects.raw(RsCal2)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RsCal2)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RsCal2)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RsCal2)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)/2
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RsCal2)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)/2
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RsCal2)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RsCal2)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RsCal2)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RsCal2)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RsCal2)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
				elif slug3 != 'all' and slug2 != 'all':
					datad = RPT_consolidatedreport.objects.raw(RsCs2)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RsCs2)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RsCs2)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RsCs2)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)/2
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RsCs2)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)/2
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RsCs2)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RsCs2)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RsCs2)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RsCs2)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RsCs2)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)

				slug =datetime.datetime.strptime(slug, '%Y-%m-%d').strftime('%d-%m-%Y')
				print(slug)
				slug1 = datetime.datetime.strptime(slug1, '%Y-%m-%d').strftime('%d-%m-%Y')	
				print(slug1)

			context = {
				'datefrom': slug,
				'dateto': slug1,
				'routecode': slug2,
				'centercode' : slug3,
				'selecting' : slug4,
				'datad' :datad,
				'total_ratesum_detail': total_ratesum_detail,
				'total_ltrssum_detail': total_ltrssum_detail,
				'total_kgssum_detail': total_kgssum_detail,
				'total_pelsum_detail': total_pelsum_detail,
				'total_fatsum_detail': total_fatsum_detail,
				'total_snfsum_detail': total_snfsum_detail,
				'total_afatsum_detail': total_afatsum_detail,
				'total_asnfsum_detail': total_asnfsum_detail,
				'total_gamtsum_detail': total_gamtsum_detail,
				#'name': name,




			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_consolidated.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+""+slug1+""+slug2+"_"+slug3+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		else:
			template = get_template('pdf_consolidated.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			RalCal = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,routecode routecode,qty kgs,ltrs Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,fat Fat,snf Snf,round(sum(ltrrate),5) RateLTR,sum(pel) pel,round(sum(amount),2) gamount from school_daily_data where date between '%s' and '%s' group by centercode,routecode"%(str(slug),str(slug1)) 
			RalCs = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,routecode routecode,qty kgs,ltrs Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,fat Fat,snf Snf,round(sum(ltrrate),5) RateLTR,sum(pel) pel,round(sum(amount),2) gamount from school_daily_data where date between '%s' and '%s' and centercode = '%s' group by centercode,routecode"%(str(slug),str(slug1),str(slug3))
			RsCal = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,routecode routecode,qty kgs,ltrs Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,fat Fat,snf Snf,round(sum(ltrrate),5) RateLTR,sum(pel) pel,round(sum(amount),2) gamount from school_daily_data where date between '%s' and '%s' and routecode = '%s' group by centercode,routecode"%(str(slug),str(slug1),str(slug2))
			RsCs = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,routecode routecode,qty kgs,ltrs Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,fat Fat,snf Snf,round(sum(ltrrate),5) RateLTR,sum(pel) pel,round(sum(amount),2) gamount from school_daily_data where date between '%s' and '%s' and centercode ='%s' and routecode = '%s' group by centercode,routecode"%(str(slug),str(slug1),str(slug3),str(slug2))
		
			if slug4 == 'Date': 
				if slug2 == 'all' and slug3 == 'all':

					datad = RPT_consolidatedreport.objects.raw(RalCal)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
						
				elif  slug3 != 'all' and slug2 == 'all':
					datad = RPT_consolidatedreport.objects.raw(RalCs)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)

				elif slug3 == 'all' and slug2 != 'all':
					datad = RPT_consolidatedreport.objects.raw(RsCal)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
				elif  slug3 != 'all' and slug2 != 'all':
					datad = RPT_consolidatedreport.objects.raw(RsCs)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)

			elif slug4 == 'Center':
				if  slug3 == 'all' and slug2 == 'all':
					datad = RPT_consolidatedreport.objects.raw(RalCal)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
				elif slug3 != 'all' and slug2 == 'all':
					datad = RPT_consolidatedreport.objects.raw(RalCs)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
				elif  slug3 != 'all' and slug2 != 'all':
					datad = RPT_consolidatedreport.objects.raw(RsCal)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
				elif  slug3 != 'all' and slug2 != 'all':
					datad = RPT_consolidatedreport.objects.raw(RsCs)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
			elif slug4 == 'Route':
				if slug3 == 'all' and slug2 == 'all':
					datad = RPT_consolidatedreport.objects.raw(RalCal)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
				elif slug3 != 'all' and slug2 == 'all':
					datad = RPT_consolidatedreport.objects.raw(RalCs)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RalCs)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)

				elif slug3 == 'all' and slug2 != 'all':
					datad = RPT_consolidatedreport.objects.raw(RsCal)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RsCal)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)
				elif slug3 != 'all' and slug2 != 'all':
					datad = RPT_consolidatedreport.objects.raw(RsCs)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RsCs)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)

			context = {
				'datefrom': slug,
				'dateto': slug1,
				'routecode': slug2,
				'centercode' : slug3,
				'selecting' : slug4,
				'datad' :datad,
				'total_ratesum_detail': total_ratesum_detail,
				'total_ltrssum_detail': total_ltrssum_detail,
				'total_kgssum_detail': total_kgssum_detail,
				'total_pelsum_detail': total_pelsum_detail,
				'total_fatsum_detail': total_fatsum_detail,
				'total_snfsum_detail': total_snfsum_detail,
				'total_afatsum_detail': total_afatsum_detail,
				'total_asnfsum_detail': total_asnfsum_detail,
				'total_gamtsum_detail': total_gamtsum_detail,
				#'name': name,




			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_consolidated.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+""+slug1+""+slug2+"_"+slug3+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")


def excel_consolidated(request,slug,slug1,slug2,slug3,slug4):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		#data = RPT_consolidated.objects.filter(date_gte=slug, date_lte=slug1 , selecting=slug , centercode=slug3 , routecode=slug4)
		#Daily_data.objects.filter(date__range=[datefrom, dateto], routecode=routecode)
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="consolidated.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('consolidated', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MMM-YY'

		RalCal = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,routecode routecode,qty kgs,ltrs Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,fat Fat,snf Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' group by routecode,date,shift"%(str(brch),str(slug),str(slug1)) 
		RalCs = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,routecode routecode,qty kgs,ltrs Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,fat Fat,snf Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and centercode = '%s' group by routecode,date,shift"%(str(brch),str(slug),str(slug1),str(slug3))
		RsCal = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,routecode routecode,qty kgs,ltrs Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,fat Fat,snf Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and routecode = '%s' group by routecode,date,shift"%(str(brch),str(slug),str(slug1),str(slug2))
		RsCs = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,routecode routecode,qty kgs,ltrs Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,fat Fat,snf Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and centercode ='%s' and routecode = '%s' group by routecode,date,shift"%(str(brch),str(slug),str(slug1),str(slug3),str(slug2))
		RalCal1 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data  where date between '%s' and '%s' group by centercode,shift "%(str(brch),str(slug),str(slug1)) 
		RalCs1 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and centercode = '%s' group by centercode,shift"%(str(brch),str(slug),str(slug1),str(slug3))
		RsCal1 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and routecode = '%s' group by routecode,shift"%(str(brch),str(slug),str(slug1),str(slug2))
		RsCs1 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and centercode ='%s' and routecode = '%s' group by routecode,shift"%(str(brch),str(slug),str(slug1),str(slug3),str(slug2))			
		RalCal2 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' group by routecode ,shift"%(str(brch),str(slug),str(slug1)) 
		RalCs2 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and routecode = '%s' group by routecode,shift"%(str(brch),str(slug),str(slug1),str(slug2))
		RsCal2 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and routecode = '%s' group by routecode,shift"%(str(brch),str(slug),str(slug1),str(slug2))
		RsCs2 = "select id id,date date,shift Shift,milk_type Milktype,centercode centercode,centername centername,routecode routecode,routename routename,sum(qty) kgs,sum(ltrs) Ltrs,round(avg(fat),2) afat,round(avg(snf),2) asnf,sum(fat) Fat,sum(snf) Snf,round((sum(ltrrate)+sum(pel)),2) RateLTR,round(sum(pel),2) pel,round(sum(amount),2) gamount from %s.school_daily_data where date between '%s' and '%s' and centercode ='%s' and routecode = '%s' group by routecode,shift"%(str(brch),str(slug),str(slug1),str(slug3),str(slug2))			

		columns = ['date/centercode/routecode','Shift','Milktype','kgs','Ltrs','afat','asnf', 'Fat', 'Snf','RateLTR','pel', 'gamount' ]
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		total_kgsall = []
		total_listkgs = []
		total_listamount = []
		total_listfat = []
		total_listltrs = []
		total_kgsall = []
		total_listkgs = []
		# x = datetime.strptime(date, "%d/%m/%Y")
		
		if slug4 == 'Date': 
			if slug2 == 'all' and slug3 == 'all':
				rows = RPT_consolidatedreport.objects.using(brch).raw(RalCal)
				row_num = row_num + 1
				for r in rows:
					ws.write(row_num, 0, r.date, font_date)
					ws.write(row_num, 1, r.Shift, font_style)
					ws.write(row_num, 2, r.Milktype, font_style)
					ws.write(row_num, 3, r.kgs, font_style)
					ws.write(row_num, 4, r.Ltrs, font_style)
					ws.write(row_num, 5, r.afat, font_style)
					ws.write(row_num, 6, r.asnf, font_style)
					ws.write(row_num, 7, r.Fat, font_style)
					ws.write(row_num, 8, r.Snf, font_style)
					ws.write(row_num, 9, r.RateLTR, font_style)
					ws.write(row_num, 10, r.pel, font_style)
					ws.write(row_num, 11, r.gamount, font_style)
					total_kgsall = []
					total_listkgs = []
					total_listamount = []
					total_listfat = []
					total_listltrs = []
					total_kgsall = []
					total_listkgs = []
					total_kgsall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_kgsall:
							total_listkgs.append(i.kgs)
							total_ratesum_detail = round(sum(total_listkgs),2)
					total_listamount = []
					total_amountall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_amountall:
							total_listamount.append(i.Ltrs)
							total_ltrssum_detail = round(sum(total_listamount),4)
					total_listfat = []
					total_fatall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_fatall:
							total_listfat.append(i.afat)
							total_kgssum_detail = round(sum(total_listfat),2)/2
					total_listltrs = []
					total_ltrsall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_ltrsall:
						total_listltrs.append(i.asnf)
						total_pelsum_detail = round(sum(total_listltrs),2)/2
					total_listtotal = []
					total_totalall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_totalall:
							total_listtotal.append(i.Fat)
							total_fatsum_detail = round(sum(total_listtotal),3)
					total_listsnf = []
					total_snfall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_snfall:
							total_listsnf.append(i.Snf)
							total_snfsum_detail = round(sum(total_listsnf),2)
					total_listrate = []
					total_rateall =RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_rateall:
							total_listrate.append(i.RateLTR)
							total_afatsum_detail = round(sum(total_listrate),2)
					total_listasnf = []
					total_asnfall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_asnfall:
							total_listasnf.append(i.pel)
							total_asnfsum_detail = round(sum(total_listasnf),2)
					total_listgamt = []
					total_gamtall = RPT_consolidatedreport.objects.raw(RalCal)
					for i in total_gamtall:
							total_listgamt.append(i.gamount)
							total_gamtsum_detail = sum(total_listgamt)

					row_num = row_num + 1
					
				columns1 = ['Total', '', '','', '','', '','', '','',total_ratesum_detail,total_ltrssum_detail]
			elif  slug3 != 'all' and slug2 == 'all':
				rows = RPT_consolidatedreport.objects.using(brch).raw(RalCs)
				row_num = row_num + 1
				for r in rows:
					ws.write(row_num, 0, r.date, font_date)
					ws.write(row_num, 1, r.Shift, font_style)
					ws.write(row_num, 2, r.Milktype, font_style)
					ws.write(row_num, 3, r.kgs, font_style)
					ws.write(row_num, 4, r.Ltrs, font_style)
					ws.write(row_num, 5, r.afat, font_style)
					ws.write(row_num, 6, r.asnf, font_style)
					ws.write(row_num, 7, r.Fat, font_style)
					ws.write(row_num, 8, r.Snf, font_style)
					ws.write(row_num, 9, r.RateLTR, font_style)
					ws.write(row_num, 10, r.pel, font_style)
					ws.write(row_num, 11, r.gamount, font_style)
					row_num = row_num + 1
				columns1 = ['Total', '', '','', '','', '','', '','' ]			
			elif slug3 == 'all' and slug2 != 'all':
				rows = RPT_consolidatedreport.objects.using(brch).raw(RsCal)
				row_num = row_num + 1
				for r in rows:
					ws.write(row_num, 0, r.date, font_date)
					ws.write(row_num, 1, r.Shift, font_style)
					ws.write(row_num, 2, r.Milktype, font_style)
					ws.write(row_num, 3, r.kgs, font_style)
					ws.write(row_num, 4, r.Ltrs, font_style)
					ws.write(row_num, 5, r.afat, font_style)
					ws.write(row_num, 6, r.asnf, font_style)
					ws.write(row_num, 7, r.Fat, font_style)
					ws.write(row_num, 8, r.Snf, font_style)
					ws.write(row_num, 9, r.RateLTR, font_style)
					ws.write(row_num, 10, r.pel, font_style)
					ws.write(row_num, 11, r.gamount, font_style)
					row_num = row_num + 1
				columns1 = ['Total', '', '','', '','', '','', '','' ]
			elif  slug3 != 'all' and slug2 != 'all':
				rows = RPT_consolidatedreport.objects.using(brch).raw(RsCs)
				row_num = row_num + 1
				for r in rows:
					ws.write(row_num, 0, r.date, font_date)
					ws.write(row_num, 1, r.Shift, font_style)
					ws.write(row_num, 2, r.Milktype, font_style)
					ws.write(row_num, 3, r.kgs, font_style)
					ws.write(row_num, 4, r.Ltrs, font_style)
					ws.write(row_num, 5, r.afat, font_style)
					ws.write(row_num, 6, r.asnf, font_style)
					ws.write(row_num, 7, r.Fat, font_style)
					ws.write(row_num, 8, r.Snf, font_style)
					ws.write(row_num, 9, r.RateLTR, font_style)
					ws.write(row_num, 10, r.pel, font_style)
					ws.write(row_num, 11, r.gamount, font_style)
					row_num = row_num + 1
				columns1 = ['Total', '', '','', '','', '','', '','' ]
					

		elif slug4 == 'Center':
			if  slug3 == 'all' and slug2 == 'all':
				rows = RPT_consolidatedreport.objects.using(brch).raw(RalCal1)
				row_num = row_num + 1
				for r in rows:
					ws.write(row_num, 0, r.centercode, font_style)
					ws.write(row_num, 1, r.Shift, font_style)
					ws.write(row_num, 2, r.Milktype, font_style)
					ws.write(row_num, 3, r.kgs, font_style)
					ws.write(row_num, 4, r.Ltrs, font_style)
					ws.write(row_num, 5, r.afat, font_style)
					ws.write(row_num, 6, r.asnf, font_style)
					ws.write(row_num, 7, r.Fat, font_style)
					ws.write(row_num, 8, r.Snf, font_style)
					ws.write(row_num, 9, r.RateLTR, font_style)
					ws.write(row_num, 10, r.pel, font_style)
					ws.write(row_num, 11, r.gamount, font_style)
					row_num = row_num + 1
				
					
				columns1 = ['Total', '', '','', '','', '','', '','' ]
			
			elif slug3 != 'all' and slug2 == 'all':
				rows = RPT_consolidatedreport.objects.using(brch).raw(RalCs1)
				row_num = row_num + 1
				for r in rows:
					ws.write(row_num, 0, r.centercode, font_style)
					ws.write(row_num, 1, r.Shift, font_style)
					ws.write(row_num, 2, r.Milktype, font_style)
					ws.write(row_num, 3, r.kgs, font_style)
					ws.write(row_num, 4, r.Ltrs, font_style)
					ws.write(row_num, 5, r.afat, font_style)
					ws.write(row_num, 6, r.asnf, font_style)
					ws.write(row_num, 7, r.Fat, font_style)
					ws.write(row_num, 8, r.Snf, font_style)
					ws.write(row_num, 9, r.RateLTR, font_style)
					ws.write(row_num, 10, r.pel, font_style)
					ws.write(row_num, 11, r.gamount, font_style)
					row_num = row_num + 1
				columns1 = ['Total', '', '','', '','', '','', '','' ]
					
			elif  slug3 == 'all' and slug2 != 'all':
				rows = RPT_consolidatedreport.objects.using(brch).raw(RsCal1)
				row_num = row_num + 1
				for r in rows:
					ws.write(row_num, 0, r.centercode, font_style)
					ws.write(row_num, 1, r.Shift, font_style)
					ws.write(row_num, 2, r.Milktype, font_style)
					ws.write(row_num, 3, r.kgs, font_style)
					ws.write(row_num, 4, r.Ltrs, font_style)
					ws.write(row_num, 5, r.afat, font_style)
					ws.write(row_num, 6, r.asnf, font_style)
					ws.write(row_num, 7, r.Fat, font_style)
					ws.write(row_num, 8, r.Snf, font_style)
					ws.write(row_num, 9, r.RateLTR, font_style)
					ws.write(row_num, 10, r.pel, font_style)
					ws.write(row_num, 11, r.gamount, font_style)
					row_num = row_num + 1
				columns1 = ['Total', '', '','', '','', '','', '','' ]
					
			elif  slug3 != 'all' and slug2 != 'all':
				rows = RPT_consolidatedreport.objects.using(brch).raw(RsCs1)
				row_num = row_num + 1
				for r in rows:
					ws.write(row_num, 0, r.centercode, font_style)
					ws.write(row_num, 1, r.Shift, font_style)
					ws.write(row_num, 2, r.Milktype, font_style)
					ws.write(row_num, 3, r.kgs, font_style)
					ws.write(row_num, 4, r.Ltrs, font_style)
					ws.write(row_num, 5, r.afat, font_style)
					ws.write(row_num, 6, r.asnf, font_style)
					ws.write(row_num, 7, r.Fat, font_style)
					ws.write(row_num, 8, r.Snf, font_style)
					ws.write(row_num, 9, r.RateLTR, font_style)
					ws.write(row_num, 10, r.pel, font_style)
					ws.write(row_num, 11, r.gamount, font_style)
					row_num = row_num + 1
				columns1 = ['Total', '', '','', '','', '','', '','' ]
			for col_num in range(len(columns)):
				ws.write(row_num, col_num, columns1[col_num], font_style)
				#ws.write(row_num, 0, row[0], font_date)
				#ws.write(row_num, 1, row[1], font_date)	
		elif slug4 == 'Route':
			if slug3 == 'all' and slug2 == 'all':
				rows = RPT_consolidatedreport.objects.using(brch).raw(RalCal2)
				row_num = row_num + 1
				for r in rows:
					ws.write(row_num, 0, r.routecode, font_style)
					ws.write(row_num, 1, r.Shift, font_style)
					ws.write(row_num, 2, r.Milktype, font_style)
					ws.write(row_num, 3, r.kgs, font_style)
					ws.write(row_num, 4, r.Ltrs, font_style)
					ws.write(row_num, 5, r.afat, font_style)
					ws.write(row_num, 6, r.asnf, font_style)
					ws.write(row_num, 7, r.Fat, font_style)
					ws.write(row_num, 8, r.Snf, font_style)
					ws.write(row_num, 9, r.RateLTR, font_style)
					ws.write(row_num, 10, r.pel, font_style)
					ws.write(row_num, 11, r.gamount, font_style)
					row_num = row_num + 1
				columns1 = ['Total', '', '','', '','', '','', '','' ]
					
			elif slug3 != 'all' and slug2 == 'all':
				rows = RPT_consolidatedreport.objects.using(brch).raw(RalCs2)
				row_num = row_num + 1
				for r in rows:
					ws.write(row_num, 0, r.routecode, font_style)
					ws.write(row_num, 1, r.Shift, font_style)
					ws.write(row_num, 2, r.Milktype, font_style)
					ws.write(row_num, 3, r.kgs, font_style)
					ws.write(row_num, 4, r.Ltrs, font_style)
					ws.write(row_num, 5, r.afat, font_style)
					ws.write(row_num, 6, r.asnf, font_style)
					ws.write(row_num, 7, r.Fat, font_style)
					ws.write(row_num, 8, r.Snf, font_style)
					ws.write(row_num, 9, r.RateLTR, font_style)
					ws.write(row_num, 10, r.pel, font_style)
					ws.write(row_num, 11, r.gamount, font_style)
					row_num = row_num + 1
				columns1 = ['Total', '', '','', '','', '','', '','' ]
					

			elif slug3 == 'all' and slug2 != 'all':
				rows = RPT_consolidatedreport.objects.using(brch).raw(RsCal2)
				row_num = row_num + 1
				for r in rows:
					ws.write(row_num, 0, r.routecode, font_style)
					ws.write(row_num, 1, r.Shift, font_style)
					ws.write(row_num, 2, r.Milktype, font_style)
					ws.write(row_num, 3, r.kgs, font_style)
					ws.write(row_num, 4, r.Ltrs, font_style)
					ws.write(row_num, 5, r.afat, font_style)
					ws.write(row_num, 6, r.asnf, font_style)
					ws.write(row_num, 7, r.Fat, font_style)
					ws.write(row_num, 8, r.Snf, font_style)
					ws.write(row_num, 9, r.RateLTR, font_style)
					ws.write(row_num, 10, r.pel, font_style)
					ws.write(row_num, 11, r.gamount, font_style)
					row_num = row_num + 1
				columns1 = ['Total', '', '','', '','', '','', '','' ]
					
			elif slug3 != 'all' and slug2 != 'all':
				rows = RPT_consolidatedreport.objects.using(brch).raw(RsCs2)
				row_num = row_num + 1
				for r in rows:
					ws.write(row_num, 0, r.routecode, font_style)
					ws.write(row_num, 1, r.Shift, font_style)
					ws.write(row_num, 2, r.Milktype, font_style)
					ws.write(row_num, 3, r.kgs, font_style)
					ws.write(row_num, 4, r.Ltrs, font_style)
					ws.write(row_num, 5, r.afat, font_style)
					ws.write(row_num, 6, r.asnf, font_style)
					ws.write(row_num, 7, r.Fat, font_style)
					ws.write(row_num, 8, r.Snf, font_style)
					ws.write(row_num, 9, r.RateLTR, font_style)
					ws.write(row_num, 10, r.pel, font_style)
					ws.write(row_num, 11, r.gamount, font_style)
					row_num = row_num + 1
				columns1 = ['Total', '', '','', '','', '','', '','' ]
			
		wb.save(response)
		return response
	else:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		#data = RPT_consolidated.objects.filter(date_gte=slug, date_lte=slug1 , selecting=slug , centercode=slug3 , routecode=slug4)
		#Daily_data.objects.filter(date__range=[datefrom, dateto], routecode=routecode)
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="consolidated.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('consolidated', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MMM-YY'
		columns = ['date/centercode/routecode','Shift','Milktype','kgs','Ltrs','afat','asnf', 'Fat', 'Snf','RateLTR','pel', 'gamount' ]
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		
		if slug4 == 'Date': 
			if slug2 == 'all' and slug3 == 'all':
				rows = RPT_consolidatedreport.objects.filter(date__range=[slug, slug1]).distinct().values_list(
				'date','Shift','Milktype','kgs','Ltrs','afat','asnf', 'Fat', 'Snf','RateLTR','pel', 'gamount' )
			elif  slug3 != 'all' and slug2 == 'all':
				rows = RPT_consolidatedreport.objects.filter(date__range=[slug, slug1],routecode=slug2).distinct().values_list(
				'date','Shift','Milktype','kgs','Ltrs','afat','asnf', 'Fat', 'Snf','RateLTR','pel', 'gamount' )
			elif slug3 == 'all' and slug2 != 'all':
				rows = RPT_consolidatedreport.objects.filter(routecode=slug2).distinct().values_list(
				'date','Shift','Milktype','kgs','Ltrs','afat','asnf', 'Fat', 'Snf','RateLTR','pel', 'gamount' )
			elif  slug3 != 'all' and slug2 != 'all':
				rows = RPT_consolidatedreport.objects.filter(routecode=slug2,centercode=slug3).distinct().values_list(
				'date','Shift','Milktype','kgs','Ltrs','afat','asnf', 'Fat', 'Snf','RateLTR','pel', 'gamount' )
					

		elif slug4 == 'Center':
			if  slug3 == 'all' and slug2 == 'all':
				rows = RPT_consolidatedreport.objects.filter().distinct().values_list(
				'centercode','Shift','Milktype','kgs','Ltrs','afat','asnf', 'Fat', 'Snf','RateLTR','pel', 'gamount' )
					
			elif slug3 != 'all' and slug2 == 'all':
				rows = RPT_consolidatedreport.objects.filter(centercode=slug3).distinct().values_list(
				'centercode','Shift','Milktype','kgs','Ltrs','afat','asnf', 'Fat', 'Snf','RateLTR','pel', 'gamount' )
					
			elif  slug3 != 'all' and slug2 != 'all':
				rows = RPT_consolidatedreport.objects.filter(routecode=slug2).distinct().values_list(
				'centercode','Shift','Milktype','kgs','Ltrs','afat','asnf', 'Fat', 'Snf','RateLTR','pel', 'gamount' )
					
			elif  slug3 != 'all' and slug2 != 'all':
				rows = RPT_consolidatedreport.objects.filter(routecode=slug2,centercode=slug3).distinct().values_list(
				'centercode','Shift','Milktype','kgs','Ltrs','afat','asnf', 'Fat', 'Snf','RateLTR','pel', 'gamount' )
					
		elif slug4 == 'Route':
			if slug3 == 'all' and slug2 == 'all':
				rows = RPT_consolidatedreport.objects.filter().distinct().values_list(
				'routecode','Shift','Milktype','kgs','Ltrs','afat','asnf', 'Fat', 'Snf','RateLTR','pel', 'gamount' )
					
			elif slug3 != 'all' and slug2 == 'all':
				rows = RPT_consolidatedreport.objects.filter(centercode=slug3).distinct().values_list(
				'routecode','Shift','Milktype','kgs','Ltrs','afat','asnf', 'Fat', 'Snf','RateLTR','pel', 'gamount' )
					

			elif slug3 == 'all' and slug2 != 'all':
				rows = RPT_consolidatedreport.objects.filter(routecode=slug2).distinct().values_list(
				'routecode','Shift','Milktype','kgs','Ltrs','afat','asnf', 'Fat', 'Snf','RateLTR','pel', 'gamount' )
					
			elif slug3 != 'all' and slug2 != 'all':
				rows = RPT_consolidatedreport.objects.filter(centercode=slug3,routecode=slug2).distinct().values_list(
				'routecode','Shift','Milktype','kgs','Ltrs','afat','asnf', 'Fat', 'Snf','RateLTR','pel', 'gamount' )
						
		
		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
		wb.save(response)
		return response


# Module -Reports - Transcations #4 - Displaying the daywise pdf  report- pdf_daywise.html
# Created by - 2020-9-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Karthik
class GeneratePdfDay(View):
	def get(self, request,slug, slug1, slug2,slug3, *args, **kwargs):
		template = get_template('pdf_daywise.html')
		today = date.today()
		start_of_yr = today.replace(day =1, month=4)
		end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)

		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			first = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from school_daily_data where date between '%s' and '%s' group by date,shift,milk_type"%(str(slug),str(slug1))
			second = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from school_daily_data where date between '%s' and '%s' and milk_type='%s' group by date,shift,milk_type"%(str(slug),str(slug1),str(slug3))
			third = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from school_daily_data where date between '%s' and '%s' and shift = '%s' group by date,shift,milk_type"%(str(slug),str(slug1),str(slug2))
			fourth = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from school_daily_data where date between '%s' and '%s' and milk_type= '%s' and shift = '%s' group by date,shift,milk_type"%(str(slug),str(slug1),str(slug3),str(slug2))

			if slug2 == 'all'and slug3 == 'all':
				data = RPT_Daywisesreport.objects.using(brch).raw(first)
				total_listkgs = []
				total_kgsall = RPT_Daywisesreport.objects.using(brch).raw(first)
				for i in total_kgsall:
					total_listkgs.append(i.sqty)
					total_kgssum_detail = round(sum(total_listkgs),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywisesreport.objects.using(brch).raw(first)
				for i in total_ltrsall:
					total_listltrs.append(i.sltrs)
					total_ltrssum_detail = round(sum(total_listltrs),2)
				total_listfat = []
				total_fatall = RPT_Daywisesreport.objects.using(brch).raw(first)
				for i in total_fatall:
					total_listfat.append(i.kfat)
					total_fatsum_detail = round(sum(total_listfat),2)
				total_listsnf = []
				total_snfall = RPT_Daywisesreport.objects.using(brch).raw(first)
				for i in total_snfall:
					total_listsnf.append(i.ksnf)
					total_snfsum_detail = round(sum(total_listsnf),2)
					#total_snfsum_detail1 = round(total_snfsum_detail)
				total_listafat = []
				total_afatall = RPT_Daywisesreport.objects.using(brch).raw(first)
				for i in total_afatall:
					total_listafat.append(i.afat)
					total_afatsum_detail = round(sum(total_listafat),2)
				total_listasnf = []
				total_asnfall = RPT_Daywisesreport.objects.using(brch).raw(first)
				for i in total_asnfall:
					total_listasnf.append(i.asnf)
					total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywisesreport.objects.using(brch).raw(first)
				for i in total_gamtall:
					total_listgamt.append(i.gamount)
					total_gamtsum_detail = round(sum(total_listgamt),2)
				
				# return HttpResponse(dc)
			elif slug2 == 'all' and slug3 != 'all':
				data = RPT_Daywisesreport.objects.using(brch).raw(second)
				total_listkgs = []
				total_kgsall = RPT_Daywisesreport.objects.using(brch).raw(second)
				for i in total_kgsall:
					total_listkgs.append(i.sqty)
					total_kgssum_detail = round(sum(total_listkgs),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywisesreport.objects.using(brch).raw(second)
				for i in total_ltrsall:
					total_listltrs.append(i.sltrs)
					total_ltrssum_detail = round(sum(total_listltrs),2)
				total_listfat = []
				total_fatall = RPT_Daywisesreport.objects.using(brch).raw(second)
				for i in total_fatall:
					total_listfat.append(i.kfat)
					total_fatsum_detail = round(sum(total_listfat),2)
				total_listsnf = []
				total_snfall = RPT_Daywisesreport.objects.using(brch).raw(second)
				for i in total_snfall:
					total_listsnf.append(i.ksnf)
					total_snfsum_detail = round(sum(total_listsnf),2)
					#total_snfsum_detail1 = round(total_snfsum_detail)
				total_listafat = []
				total_afatall = RPT_Daywisesreport.objects.using(brch).raw(second)
				for i in total_afatall:
					total_listafat.append(i.afat)
					total_afatsum_detail = round(sum(total_listafat),2)
				total_listasnf = []
				total_asnfall = RPT_Daywisesreport.objects.using(brch).raw(second)
				for i in total_asnfall:
					total_listasnf.append(i.asnf)
					total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywisesreport.objects.using(brch).raw(second)
				for i in total_gamtall:
					total_listgamt.append(i.gamount)
					total_gamtsum_detail = round(sum(total_listgamt),2)

			elif slug3 == 'all' and slug2 != 'all':
				data = RPT_Daywisesreport.objects.using(brch).raw(third)
				total_listkgs = []
				total_kgsall = RPT_Daywisesreport.objects.using(brch).raw(third)
				for i in total_kgsall:
					total_listkgs.append(i.sqty)
					total_kgssum_detail = round(sum(total_listkgs),2)
				total_listltrs = []
				total_ltrsall =RPT_Daywisesreport.objects.using(brch).raw(third)
				for i in total_ltrsall:
					total_listltrs.append(i.sltrs)
					total_ltrssum_detail = round(sum(total_listltrs),2)
				total_listfat = []
				total_fatall = RPT_Daywisesreport.objects.using(brch).raw(third)
				for i in total_fatall:
					total_listfat.append(i.kfat)
					total_fatsum_detail = round(sum(total_listfat),2)
				total_listsnf = []
				total_snfall = RPT_Daywisesreport.objects.using(brch).raw(third)
				for i in total_snfall:
					total_listsnf.append(i.ksnf)
					total_snfsum_detail = round(sum(total_listsnf),2)
					#total_snfsum_detail1 = round(total_snfsum_detail)
				total_listafat = []
				total_afatall = RPT_Daywisesreport.objects.using(brch).raw(third)
				for i in total_afatall:
					total_listafat.append(i.afat)
					total_afatsum_detail = round(sum(total_listafat),2)
				total_listasnf = []
				total_asnfall = RPT_Daywisesreport.objects.using(brch).raw(third)
				for i in total_asnfall:
					total_listasnf.append(i.asnf)
					total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywisesreport.objects.using(brch).raw(third)
				for i in total_gamtall:
					total_listgamt.append(i.gamount)
					total_gamtsum_detail = round(sum(total_listgamt),2)
			else:
				data = RPT_Daywisesreport.objects.using(brch).raw(fourth)
				total_listkgs = []
				total_kgsall = RPT_Daywisesreport.objects.using(brch).raw(fourth)
				for i in total_kgsall:
					total_listkgs.append(i.sqty)
					total_kgssum_detail = round(sum(total_listkgs),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywisesreport.objects.using(brch).raw(fourth)
				for i in total_ltrsall:
					total_listltrs.append(i.sltrs)
					total_ltrssum_detail = round(sum(total_listltrs),2)
				total_listfat = []
				total_fatall = RPT_Daywisesreport.objects.using(brch).raw(fourth)
				for i in total_fatall:
					total_listfat.append(i.kfat)
					total_fatsum_detail = round(sum(total_listfat),2)
				total_listsnf = []
				total_snfall = RPT_Daywisesreport.objects.using(brch).raw(fourth)
				for i in total_snfall:
					total_listsnf.append(i.ksnf)
					total_snfsum_detail = round(sum(total_listsnf),2)
				total_listafat = []
				total_afatall = RPT_Daywisesreport.objects.using(brch).raw(fourth)
				for i in total_afatall:
					total_listafat.append(i.afat)
					total_afatsum_detail = round(sum(total_listafat),2)
				total_listasnf = []
				total_asnfall = RPT_Daywisesreport.objects.using(brch).raw(fourth)
				for i in total_asnfall:
					total_listasnf.append(i.asnf)
					total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall =RPT_Daywisesreport.objects.using(brch).raw(fourth)
				for i in total_gamtall:
					total_listgamt.append(i.gamount)
					total_gamtsum_detail = round(sum(total_listgamt),2)
			cursor = connection.cursor()
			branch = "select address,name,code,pin,branch from %s.school_daily_data D ,school_branch B where D.branch=B.name and D.date between '%s' and '%s' "%(str(brch),str(slug),str(slug1))  
					
		   
			cursor.execute(branch)
			branchdata = cursor.fetchall()
			for row in branchdata:
				address=row[0]
				name = row[1]
				pin = row[3]

		else:		
			first = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from school_daily_data where date between '%s' and '%s' group by date,shift,milk_type"%(str(slug),str(slug1))
			second = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from school_daily_data where date between '%s' and '%s' and milk_type='%s' group by date,shift,milk_type"%(str(slug),str(slug1),str(slug3))
			third = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from school_daily_data where date between '%s' and '%s' and shift = '%s' group by date,shift,milk_type"%(str(slug),str(slug1),str(slug2))
			fourth = "select id id,branch branch,date date,shift shift,routecode routecode,centercode centercode,milk_type milk_type,round(fat,2) fat,round(snf,2) snf, round(sum(qty),2) sqty,round(sum(ltrs),3) sltrs, round(avg(fat),3) afat,round(avg(snf),3) asnf,round((sum(qty)*avg(fat))/100) kfat,round((sum(qty)*avg(snf))/100) ksnf, round(sum(amount),2) gamount  from school_daily_data where date between '%s' and '%s' and milk_type= '%s' and shift = '%s' group by date,shift,milk_type"%(str(slug),str(slug1),str(slug3),str(slug2))

			if slug2 == 'all'and slug3 == 'all':
				data = RPT_Daywisesreport.objects.raw(first)
				total_listkgs = []
				total_kgsall = RPT_Daywisesreport.objects.raw(first)
				for i in total_kgsall:
					total_listkgs.append(i.sqty)
					total_kgssum_detail = round(sum(total_listkgs),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywisesreport.objects.raw(first)
				for i in total_ltrsall:
					total_listltrs.append(i.sltrs)
					total_ltrssum_detail = round(sum(total_listltrs),2)
				total_listfat = []
				total_fatall = RPT_Daywisesreport.objects.raw(first)
				for i in total_fatall:
					total_listfat.append(i.kfat)
					total_fatsum_detail = round(sum(total_listfat),2)
				total_listsnf = []
				total_snfall = RPT_Daywisesreport.objects.raw(first)
				for i in total_snfall:
					total_listsnf.append(i.ksnf)
					total_snfsum_detail = round(sum(total_listsnf),2)
					#total_snfsum_detail1 = round(total_snfsum_detail)
				total_listafat = []
				total_afatall = RPT_Daywisesreport.objects.raw(first)
				for i in total_afatall:
					total_listafat.append(i.afat)
					total_afatsum_detail = round(sum(total_listafat),2)
				total_listasnf = []
				total_asnfall = RPT_Daywisesreport.objects.raw(first)
				for i in total_asnfall:
					total_listasnf.append(i.asnf)
					total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywisesreport.objects.raw(first)
				for i in total_gamtall:
					total_listgamt.append(i.gamount)
					total_gamtsum_detail = round(sum(total_listgamt),2)
				
				# return HttpResponse(dc)
			elif slug2 == 'all' and slug3 != 'all':
				data = RPT_Daywisesreport.objects.raw(second)
				total_listkgs = []
				total_kgsall = RPT_Daywisesreport.objects.raw(second)
				for i in total_kgsall:
					total_listkgs.append(i.sqty)
					total_kgssum_detail = round(sum(total_listkgs),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywisesreport.objects.raw(second)
				for i in total_ltrsall:
					total_listltrs.append(i.sltrs)
					total_ltrssum_detail = round(sum(total_listltrs),2)
				total_listfat = []
				total_fatall = RPT_Daywisesreport.objects.raw(second)
				for i in total_fatall:
					total_listfat.append(i.kfat)
					total_fatsum_detail = round(sum(total_listfat),2)
				total_listsnf = []
				total_snfall = RPT_Daywisesreport.objects.raw(second)
				for i in total_snfall:
					total_listsnf.append(i.ksnf)
					total_snfsum_detail = round(sum(total_listsnf),2)
					#total_snfsum_detail1 = round(total_snfsum_detail)
				total_listafat = []
				total_afatall = RPT_Daywisesreport.objects.raw(second)
				for i in total_afatall:
					total_listafat.append(i.afat)
					total_afatsum_detail = round(sum(total_listafat),2)
				total_listasnf = []
				total_asnfall = RPT_Daywisesreport.objects.raw(second)
				for i in total_asnfall:
					total_listasnf.append(i.asnf)
					total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywisesreport.objects.raw(second)
				for i in total_gamtall:
					total_listgamt.append(i.gamount)
					total_gamtsum_detail = round(sum(total_listgamt),2)

			elif slug3 == 'all' and slug2 != 'all':
				data = RPT_Daywisesreport.objects.raw(third)
				total_listkgs = []
				total_kgsall = RPT_Daywisesreport.objects.raw(third)
				for i in total_kgsall:
					total_listkgs.append(i.sqty)
					total_kgssum_detail = round(sum(total_listkgs),2)
				total_listltrs = []
				total_ltrsall =RPT_Daywisesreport.objects.raw(third)
				for i in total_ltrsall:
					total_listltrs.append(i.sltrs)
					total_ltrssum_detail = round(sum(total_listltrs),2)
				total_listfat = []
				total_fatall = RPT_Daywisesreport.objects.raw(third)
				for i in total_fatall:
					total_listfat.append(i.kfat)
					total_fatsum_detail = round(sum(total_listfat),2)
				total_listsnf = []
				total_snfall = RPT_Daywisesreport.objects.raw(third)
				for i in total_snfall:
					total_listsnf.append(i.ksnf)
					total_snfsum_detail = round(sum(total_listsnf),2)
					#total_snfsum_detail1 = round(total_snfsum_detail)
				total_listafat = []
				total_afatall = RPT_Daywisesreport.objects.raw(third)
				for i in total_afatall:
					total_listafat.append(i.afat)
					total_afatsum_detail = round(sum(total_listafat),2)
				total_listasnf = []
				total_asnfall = RPT_Daywisesreport.objects.raw(third)
				for i in total_asnfall:
					total_listasnf.append(i.asnf)
					total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall = RPT_Daywisesreport.objects.raw(third)
				for i in total_gamtall:
					total_listgamt.append(i.gamount)
					total_gamtsum_detail = round(sum(total_listgamt),2)
			else:
				data = RPT_Daywisesreport.objects.raw(fourth)
				total_listkgs = []
				total_kgsall = RPT_Daywisesreport.objects.raw(fourth)
				for i in total_kgsall:
					total_listkgs.append(i.sqty)
					total_kgssum_detail = round(sum(total_listkgs),2)
				total_listltrs = []
				total_ltrsall = RPT_Daywisesreport.objects.raw(fourth)
				for i in total_ltrsall:
					total_listltrs.append(i.sltrs)
					total_ltrssum_detail = round(sum(total_listltrs),2)
				total_listfat = []
				total_fatall = RPT_Daywisesreport.objects.raw(fourth)
				for i in total_fatall:
					total_listfat.append(i.kfat)
					total_fatsum_detail = round(sum(total_listfat),2)
				total_listsnf = []
				total_snfall = RPT_Daywisesreport.objects.raw(fourth)
				for i in total_snfall:
					total_listsnf.append(i.ksnf)
					total_snfsum_detail = round(sum(total_listsnf),2)
				total_listafat = []
				total_afatall = RPT_Daywisesreport.objects.raw(fourth)
				for i in total_afatall:
					total_listafat.append(i.afat)
					total_afatsum_detail = round(sum(total_listafat),2)
				total_listasnf = []
				total_asnfall = RPT_Daywisesreport.objects.raw(fourth)
				for i in total_asnfall:
					total_listasnf.append(i.asnf)
					total_asnfsum_detail = round(sum(total_listasnf),2)
				total_listgamt = []
				total_gamtall =RPT_Daywisesreport.objects.raw(fourth)
				for i in total_gamtall:
					total_listgamt.append(i.gamount)
					total_gamtsum_detail = round(sum(total_listgamt),2)
			cursor = connection.cursor()
			branch = "select address,name,code,pin,branch from school_daily_data D ,school_branch B where D.branch=B.name and D.date between '%s' and '%s' "%(str(slug),str(slug1))  
					
		   
			cursor.execute(branch)
			branchdata = cursor.fetchall()
			for row in branchdata:
				address=row[0]
				name = row[1]
				pin = row[3]
		datefrom1 = datetime.datetime.strptime(slug,'%Y-%m-%d').strftime('%d-%m-%Y')
		dateto1 = datetime.datetime.strptime(slug1,'%Y-%m-%d').strftime('%d-%m-%Y')
	   
		context = {
			'datefrom': slug,
			'dateto': slug1,
			'shift': slug2,
			'milk_type':slug3,
			'data':data,
			'datefrom1':datefrom1,
			'dateto1':dateto1,
			'total_kgssum_detail':total_kgssum_detail,
			'total_ltrssum_detail':total_ltrssum_detail,
			'total_fatsum_detail' :total_fatsum_detail,
			'total_snfsum_detail': total_snfsum_detail,
			'total_afatsum_detail':total_afatsum_detail,
			'total_asnfsum_detail':total_asnfsum_detail,
			'total_gamtsum_detail':total_gamtsum_detail,
			'name':name,


		}
		html = template.render(context)
		pdf = render_to_pdf("pdf_daywise.html",context)
		if pdf:
			response = HttpResponse(pdf,content_type = "application/pdf")
			filename = slug+""+slug1+""+slug2+".pdf"
			content = "inline; filename=%s" %(filename)
			download = request.GET.get("download")
			if download:
				content = "attachment; filename=%s" %(filename)
			response['Content-Disposition'] = content
			return response
		return HttpResponse("Not Found")


class GeneratePdfBank_report(View):
	def get(self, request,slug, *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_bankreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if  slug == 'all':
				data = Bank.objects.using(brch).filter().distinct()
			else:
				data = Bank.objects.using(brch).filter(name=slug).distinct()

		
			context = {
				
				'name':slug,
				'data':data,

			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_bankreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		else:
			template = get_template('pdf_bankreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if  slug == 'all':
				data = Bank.objects.filter().distinct()
			else:
				data = Bank.objects.filter(name=slug).distinct()

		
			context = {
				
				'name':slug,
				'data':data,

			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_bankreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
# Module -Reports - Transcations #5 - Displaying the bankwise pdf  report- pdf_bankwise.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Karthik
#class GeneratePdfBank_wise(View):
#	def get(self, request,slug,slug1,slug2,slug3, *args, **kwargs):
#		try:
#			template = get_template('pdf_bankwise.html')
#			today = date.today()
#			start_of_yr = today.replace(day =1, month=4)
#			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
#			brch = request.user.extendeduser.branch
#			if request.user.extendeduser.branch == brch:
#				calral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)+COALESCE(A.cartage,0)+COALESCE(A.autofine,0)+COALESCE(A.aarrears,0)+COALESCE(A.aothers,0)+COALESCE(A.commission,0)-COALESCE(A.cattlefeed,0)-COALESCE(A.stores,0)-COALESCE(A.medicine,0)-COALESCE(A.stationary,0)-COALESCE(A.emtcharges,0)-COALESCE(A.seed,0)-COALESCE(A.insurance,0)-COALESCE(A.rarrears,0)-COALESCE(A.rothers,0)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' left join school_additions A on C.centre_code = A.centercode and A.date between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug),str(slug1),str(slug),str(slug1))
#				print("kk",calral)
#				csral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)+COALESCE(A.cartage,0)+COALESCE(A.autofine,0)+COALESCE(A.aarrears,0)+COALESCE(A.aothers,0)+COALESCE(A.commission,0)-COALESCE(A.cattlefeed,0)-COALESCE(A.stores,0)-COALESCE(A.medicine,0)-COALESCE(A.stationary,0)-COALESCE(A.emtcharges,0)-COALESCE(A.seed,0)-COALESCE(A.insurance,0)-COALESCE(A.rarrears,0)-COALESCE(A.rothers,0)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.centre_code = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' left join school_additions A on C.centre_code = A.centercode and A.date between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug3),str(slug),str(slug1),str(slug),str(slug1))
#				calrs = "  select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)+COALESCE(A.cartage,0)+COALESCE(A.autofine,0)+COALESCE(A.aarrears,0)+COALESCE(A.aothers,0)+COALESCE(A.commission,0)-COALESCE(A.cattlefeed,0)-COALESCE(A.stores,0)-COALESCE(A.medicine,0)-COALESCE(A.stationary,0)-COALESCE(A.emtcharges,0)-COALESCE(A.seed,0)-COALESCE(A.insurance,0)-COALESCE(A.rarrears,0)-COALESCE(A.rothers,0)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' left join school_additions A on C.centre_code = A.centercode and A.date between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug2),str(slug),str(slug1),str(slug),str(slug1))
#				csrs = "  select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)+COALESCE(A.cartage,0)+COALESCE(A.autofine,0)+COALESCE(A.aarrears,0)+COALESCE(A.aothers,0)+COALESCE(A.commission,0)-COALESCE(A.cattlefeed,0)-COALESCE(A.stores,0)-COALESCE(A.medicine,0)-COALESCE(A.stationary,0)-COALESCE(A.emtcharges,0)-COALESCE(A.seed,0)-COALESCE(A.insurance,0)-COALESCE(A.rarrears,0)-COALESCE(A.rothers,0)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.centre_code = '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' left join school_additions A on C.centre_code = A.centercode and A.date between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug3),str(slug2),str(slug),str(slug1),str(slug),str(slug1))
#				#calral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug),str(slug1))
#				#print(calral)
				#csral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.centre_code = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug3),str(slug),str(slug1))
#				#calrs = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug2),str(slug),str(slug1))
#				#csrs = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s'  and C.centre_code = '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug3),str(slug2),str(slug),str(slug1))
#				if slug2 == 'all' and slug3 == 'all':
#					data = rpt_bankwise.objects.using(brch).raw(calral)
#					total_listgamt = []
#					total_gamtall = rpt_bankwise.objects.using(brch).raw(calral)
#					for i in total_gamtall:
#						total_listgamt.append(i.net)
#						total_gamtsum_detail = round(sum(total_listgamt),3)
#				elif slug2 == 'all' and slug3 != 'all':
#					data = rpt_bankwise.objects.using(brch).raw(csral)
#					total_listgamt = []
#					total_gamtall = rpt_bankwise.objects.using(brch).raw(csral)
#					for i in total_gamtall:
#						total_listgamt.append(i.net)
#						total_gamtsum_detail = round(sum(total_listgamt),3)      
#				elif slug3 == 'all' and slug2 != 'all':
#					data = rpt_bankwise.objects.using(brch).raw(third)
#					total_gamtall = rpt_bankwise.objects.using(brch).raw(third)
#					for i in total_gamtall:
#						total_listgamt.append(i.net)
#						total_gamtsum_detail = round(sum(total_listgamt),3)
#
#				else:
#					data = rpt_bankwise.objects.using(brch).raw(fourth)
#					total_gamtall = rpt_bankwise.objects.using(brch).raw(fourth)
#					for i in total_gamtall:
#						total_listgamt.append(i.net)
#						total_gamtsum_detail = round(sum(total_listgamt),3)
#			else:
#				calral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug),str(slug1))
#				print(calral)
#				csral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.centre_code = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug3),str(slug),str(slug1))
#				calrs = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug2),str(slug),str(slug1))
#				csrs = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s'  and C.centre_code = '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug3),str(slug2),str(slug),str(slug1))
#				if slug2 == 'all' and slug3 == 'all':
#					data = rpt_bankwise.objects.raw(calral)
#					total_listgamt = []
#					total_gamtall = rpt_bankwise.objects.raw(calral)
#					for i in total_gamtall:
#						total_listgamt.append(i.amount)
#						total_gamtsum_detail = round(sum(total_listgamt),3)
#				elif slug2 == 'all' and slug3 != 'all':
#					data = rpt_bankwise.objects.raw(csral)
#					total_listgamt = []
#					total_gamtall = rpt_bankwise.objects.raw(csral)
#					for i in total_gamtall:
#						total_listgamt.append(i.amount)
#						total_gamtsum_detail = round(sum(total_listgamt),3)      
#				elif slug3 == 'all' and slug2 != 'all':
#					data = rpt_bankwise.objects.raw(third)
#					total_gamtall = rpt_bankwise.objects.raw(third)
#					for i in total_gamtall:
#						total_listgamt.append(i.amount)
#						total_gamtsum_detail = round(sum(total_listgamt),3)

#				else:
#					data = rpt_bankwise.objects.raw(fourth)
#					total_gamtall = rpt_bankwise.objects.raw(fourth)
#					for i in total_gamtall:
#						total_listgamt.append(i.amount)
#						total_gamtsum_detail = round(sum(total_listgamt),3)
#
#			datefrom1 = datetime.datetime.strptime(slug,'%Y-%m-%d').strftime('%d-%m-%Y')
#			dateto1 = datetime.datetime.strptime(slug1,'%Y-%m-%d').strftime('%d-%m-%Y')
#			context = {
#				'dateto':slug1,
#				'datefrom':slug,
#				'dateto1':dateto1,
#				'datefrom1':datefrom1,
#				'centercode': slug3,
#				'routecode':slug2,
#				'data':data,
#				'total_gamtsum_detail':total_gamtsum_detail,
#
#			}
#			html = template.render(context)
#			pdf = render_to_pdf("pdf_bankwise.html",context)
#			if pdf:
#				response = HttpResponse(pdf,content_type = "application/pdf")
#				filename = slug+""+slug1+""+slug2+".pdf"
#				content = "inline; filename=%s" %(filename)
#				download = request.GET.get("download")
#				if download:
#					content = "attachment; filename=%s" %(filename)
#				response['Content-Disposition'] = content
#				return response
#			return HttpResponse("Not Found")
#		except Exception as err:
#			
#			if search("local variable",str(err)):
#				messages.error(request,'Some Data Missing')
#
#			elif search("[Errno 5] Input/output error",str(err)):
#				messages.error(request,'Please contact your system Administrator :  +91 7075696768')
#		
#			else:		
#				messages.success(request,'Invalid Data Entry')
#			return render(request,'bank_wise.html',locals())
class GeneratePdfBank_wise(View):
	def get(self, request,slug,slug1,slug2,slug3, *args, **kwargs):
		try:
			template = get_template('pdf_bankwise.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			brch = request.user.extendeduser.branch
			if request.user.extendeduser.branch == brch:
			#	calral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)+COALESCE(A.cartage,0)+COALESCE(A.autofine,0)+COALESCE(A.aarrears,0)+COALESCE(A.aothers,0)+COALESCE(A.commission,0)-COALESCE(A.cattlefeed,0)-COALESCE(A.stores,0)-COALESCE(A.medicine,0)-COALESCE(A.stationary,0)-COALESCE(A.emtcharges,0)-COALESCE(A.seed,0)-COALESCE(A.insurance,0)-COALESCE(A.rarrears,0)-COALESCE(A.rothers,0)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' left join school_additions A on C.centre_code = A.centercode and A.date between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug),str(slug1),str(slug),str(slug1))
			#	print("kk",calral)
			#	csral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)+COALESCE(A.cartage,0)+COALESCE(A.autofine,0)+COALESCE(A.aarrears,0)+COALESCE(A.aothers,0)+COALESCE(A.commission,0)-COALESCE(A.cattlefeed,0)-COALESCE(A.stores,0)-COALESCE(A.medicine,0)-COALESCE(A.stationary,0)-COALESCE(A.emtcharges,0)-COALESCE(A.seed,0)-COALESCE(A.insurance,0)-COALESCE(A.rarrears,0)-COALESCE(A.rothers,0)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.centre_code = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' left join school_additions A on C.centre_code = A.centercode and A.date between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug3),str(slug),str(slug1),str(slug),str(slug1))
			#	calrs = "  select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)+COALESCE(A.cartage,0)+COALESCE(A.autofine,0)+COALESCE(A.aarrears,0)+COALESCE(A.aothers,0)+COALESCE(A.commission,0)-COALESCE(A.cattlefeed,0)-COALESCE(A.stores,0)-COALESCE(A.medicine,0)-COALESCE(A.stationary,0)-COALESCE(A.emtcharges,0)-COALESCE(A.seed,0)-COALESCE(A.insurance,0)-COALESCE(A.rarrears,0)-COALESCE(A.rothers,0)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' left join school_additions A on C.centre_code = A.centercode and A.date between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug2),str(slug),str(slug1),str(slug),str(slug1))
			#	csrs = "  select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)+COALESCE(A.cartage,0)+COALESCE(A.autofine,0)+COALESCE(A.aarrears,0)+COALESCE(A.aothers,0)+COALESCE(A.commission,0)-COALESCE(A.cattlefeed,0)-COALESCE(A.stores,0)-COALESCE(A.medicine,0)-COALESCE(A.stationary,0)-COALESCE(A.emtcharges,0)-COALESCE(A.seed,0)-COALESCE(A.insurance,0)-COALESCE(A.rarrears,0)-COALESCE(A.rothers,0)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.centre_code = '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' left join school_additions A on C.centre_code = A.centercode and A.date between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug3),str(slug2),str(slug),str(slug1),str(slug),str(slug1))
				#calral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug),str(slug1))
				#print(calral)
				#csral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.centre_code = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug3),str(slug),str(slug1))
				#calrs = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug2),str(slug),str(slug1))
				#csrs = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s'  and C.centre_code = '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug3),str(slug2),str(slug),str(slug1))
				if slug2 == 'all' and slug3 == 'all':
					data = rpt_bankwise.objects.using(brch).filter()
					total_listgamt = []
					total_gamtall = rpt_bankwise.objects.using(brch).filter()
					for i in total_gamtall:
						total_listgamt.append(i.amount)
						total_gamtsum_detail = round(sum(total_listgamt),3)
				elif slug2 == 'all' and slug3 != 'all':
					data = rpt_bankwise.objects.using(brch).filter(centre_code =slug3)
					total_listgamt = []
					total_gamtall = rpt_bankwise.objects.using(brch).filter(centre_code =slug3)
					for i in total_gamtall:
						total_listgamt.append(i.amount)
						total_gamtsum_detail = round(sum(total_listgamt),3)      
				elif slug3 == 'all' and slug2 != 'all':
					data = rpt_bankwise.objects.using(brch).filter(route_number =slug2)
					total_listgamt = []
					total_gamtall = rpt_bankwise.objects.using(brch).filter(route_number =slug2)
					for i in total_gamtall:
						total_listgamt.append(i.amount)
						total_gamtsum_detail = round(sum(total_listgamt),3)

				else:
					data = rpt_bankwise.objects.using(brch).filter(route_number =slug2,centre_code=slug3)
					total_listgamt = []
					total_gamtall = rpt_bankwise.objects.using(brch).filter(route_number =slug2,centre_code=slug3)
					for i in total_gamtall:
						total_listgamt.append(i.amount)
						total_gamtsum_detail = round(sum(total_listgamt),3)
			else:
				calral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug),str(slug1))
				print(calral)
				csral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.centre_code = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug3),str(slug),str(slug1))
				calrs = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug2),str(slug),str(slug1))
				csrs = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s'  and C.centre_code = '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug),str(slug1),str(slug3),str(slug2),str(slug),str(slug1))
				if slug2 == 'all' and slug3 == 'all':
					data = rpt_bankwise.objects.raw(calral)
					total_listgamt = []
					total_gamtall = rpt_bankwise.objects.raw(calral)
					for i in total_gamtall:
						total_listgamt.append(i.amount)
						total_gamtsum_detail = round(sum(total_listgamt),3)
				elif slug2 == 'all' and slug3 != 'all':
					data = rpt_bankwise.objects.raw(csral)
					total_listgamt = []
					total_gamtall = rpt_bankwise.objects.raw(csral)
					for i in total_gamtall:
						total_listgamt.append(i.amount)
						total_gamtsum_detail = round(sum(total_listgamt),3)      
				elif slug3 == 'all' and slug2 != 'all':
					data = rpt_bankwise.objects.raw(third)
					total_gamtall = rpt_bankwise.objects.raw(third)
					for i in total_gamtall:
						total_listgamt.append(i.amount)
						total_gamtsum_detail = round(sum(total_listgamt),3)

				else:
					data = rpt_bankwise.objects.raw(fourth)
					total_gamtall = rpt_bankwise.objects.raw(fourth)
					for i in total_gamtall:
						total_listgamt.append(i.amount)
						total_gamtsum_detail = round(sum(total_listgamt),3)

			datefrom1 = datetime.datetime.strptime(slug,'%Y-%m-%d').strftime('%d-%m-%Y')
			dateto1 = datetime.datetime.strptime(slug1,'%Y-%m-%d').strftime('%d-%m-%Y')
			context = {
				'dateto':slug1,
				'datefrom':slug,
				'dateto1':dateto1,
				'datefrom1':datefrom1,
				'centercode': slug3,
				'routecode':slug2,
				'data':data,
				'total_gamtsum_detail':total_gamtsum_detail,

			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_bankwise.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+""+slug1+""+slug2+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		except Exception as err:
			
			if search("local variable",str(err)):
				messages.error(request,'Some Data Missing')

			elif search("[Errno 5] Input/output error",str(err)):
				messages.error(request,'Please contact your system Administrator :  +91 7075696768')
		
			else:		
				messages.success(request,'Invalid Data Entry')
			return render(request,'bank_wise.html',locals())		
		


def users_data(request):
	
	user = User.objects.all()
	group=Group.objects.all()
	# return HttpResponse(end_of_m)
	if request.method == "POST":
		uname =  request.POST["username"]
		groupname=request.POST["groupname"]
		#centercode = request.POST["centercode"]
		#cursor1=connection.cursor()
		#userd="delete from school_usersdata"
		#cursor1.execute(userd)
		#cursor2=connection.cursor()
		#userd1="insert into school_usersdata(username,email,gname,role,isactive,lastlogin,datejoined) select U.username,U.email,G.name,E.role,U.is_active,U.last_login,U.date_joined from auth_user U,auth_group G,school_extendeduser E,auth_user_groups A where U.id=A.user_id and A.group_id=G.id and U.id=E.user_id"
		#cursor2.execute(userd1)

		first =" select U.id id,U.username username,U.email email,G.name gname,E.role role,U.is_active isactive,U.last_login lastlogin,U.date_joined datejoined from auth_user U,auth_group G,school_extendeduser E,auth_user_groups A where U.id=A.user_id and A.group_id=G.id and U.id=E.user_id"
		second =" select U.id id,U.username username,U.email email,G.name gname,E.role role,U.is_active isactive,U.last_login lastlogin,U.date_joined datejoined from auth_user U,auth_group G,school_extendeduser E,auth_user_groups A where U.id=A.user_id and A.group_id=G.id and U.id=E.user_id and G.name= '%s'"%(str(groupname))
		third =" select U.id id,U.username username,U.email email,G.name gname,E.role role,U.is_active isactive,U.last_login lastlogin,U.date_joined datejoined from auth_user U,auth_group G,school_extendeduser E,auth_user_groups A where U.id=A.user_id and A.group_id=G.id and U.id=E.user_id and username = '%s'"%(str(uname))
		fourth =" select U.id id,U.username username,U.email email,G.name gname,E.role role,U.is_active isactive,U.last_login lastlogin,U.date_joined datejoined from auth_user U,auth_group G,school_extendeduser E,auth_user_groups A where U.id=A.user_id and A.group_id=G.id and U.id=E.user_id and G.name = '%s' and username = '%s' "%(str(groupname),str(uname))

		if uname == 'all' and groupname == 'all':
			unn = Usersdata.objects.raw(first)
		elif uname == 'all' and groupname != 'all':
			unn = Usersdata.objects.raw(second)
		elif uname != 'all' and groupname == 'all':
			unn=Usersdata.objects.raw(third)
		else:
			unn=Usersdata.objects.raw(fourth)
	return render(request,'userdata.html',locals())




def groupsdata(request):
	
	group=Group.objects.all()
	# return HttpResponse(end_of_m)
	if request.method == "POST":
		
		groupname=request.POST["groupname"]
		#centercode = request.POST["centercode"]
		#cursor1=connection.cursor()
		#userd="delete from school_groupsdata"
		#cursor1.execute(userd)
		#cursor2=connection.cursor()
		#userd1="insert into school_groupsdata(gname,pername) select G.name,P.name from auth_permission P,auth_group G,auth_group_permissions GP where GP.group_id=G.id and P.id=GP.permission_id"
		#cursor2.execute(userd1)

		first = "select G.id id,G.name gname,P.name pername from auth_permission P,auth_group G,auth_group_permissions GP where GP.group_id=G.id and P.id=GP.permission_id"
		second = "select G.id id,G.name gname,P.name pername from auth_permission P,auth_group G,auth_group_permissions GP where GP.group_id=G.id and P.id=GP.permission_id and G.name = '%s' "%(str(groupname))
		
		if groupname == 'all':
			gn = Groupsdata.objects.raw(first)
		else:
			gn=Groupsdata.objects.raw(second)
	return render(request,'groupdata.html',locals())


def groupsdata1(request):
	
	group=Group.objects.all()
	# return HttpResponse(end_of_m)
	if request.method == "POST":
		
		groupname=request.POST["groupname"]
		#centercode = request.POST["centercode"]
		#cursor1=connection.cursor()
		#userd="delete from school_groupsdata"
		#cursor1.execute(userd)
		#cursor2=connection.cursor()
		#userd1="insert into school_groupsdata(gname,pername) select G.name,P.name from auth_permission P,auth_group G,auth_group_permissions GP where GP.group_id=G.id and P.id=GP.permission_id"
		#cursor2.execute(userd1)
		f = "Can add%"
		f1 = "Can view%"
		f2 = "Can change%"
		f3 = "Can delete%"

		first = "select G.id id,G.name gname,P.name pername from auth_permission P,auth_group G,auth_group_permissions GP where GP.group_id=G.id and P.id=GP.permission_id"
		print(first)
		first1 = "select G.id id,G.name gname,P.name pername from auth_permission P,auth_group G,auth_group_permissions GP where GP.group_id=G.id and P.id=GP.permission_id and P.name like 'Can view%'"
		print(first1)
		first2 = "select G.id id,G.name gname,P.name pername from auth_permission P,auth_group G,auth_group_permissions GP where GP.group_id=G.id and P.id=GP.permission_id and P.name like 'Can change%'"
		print(first2)
		first3 = "select G.id id,G.name gname,P.name pername from auth_permission P,auth_group G,auth_group_permissions GP where GP.group_id=G.id and P.id=GP.permission_id and P.name like 'Can delete%'"
		print(first3)

		second = "select G.id id,G.name gname,P.name pername from auth_permission P,auth_group G,auth_group_permissions GP where GP.group_id=G.id and P.id=GP.permission_id and P.name like 'Can add%'"
		print(second)
		second1 = "select G.id id,G.name gname,P.name pername from auth_permission P,auth_group G,auth_group_permissions GP where GP.group_id=G.id and P.id=GP.permission_id and P.name like 'Can view%' "
		print(second1)
		second2 = "select G.id id,G.name gname,P.name pername from auth_permission P,auth_group G,auth_group_permissions GP where GP.group_id=G.id and P.id=GP.permission_id and P.name like 'Can change%' "
		
		print(second2)
		second3 = "select G.id id,G.name gname,P.name pername from auth_permission P,auth_group G,auth_group_permissions GP where GP.group_id=G.id and P.id=GP.permission_id and P.name like 'Can delete%' "
		print(second3)
		print(5.8)
		if groupname == 'all':
			print(5.3)
			gn = Groupsdata.objects.raw(first)
			print(2.3)
			print(gn)
			#dc=Groupsdata.objects.raw(first1)
			#print(2.1)
			#dc1=Groupsdata.objects.raw(first2)
			#print(2.2)
			#dc2=Groupsdata.objects.raw(first3)
			#print(2.5)
			
		else:
			print(1.5)
			gn=Groupsdata.objects.raw(second)
			#dc1=Groupsdata.objects.filter(gname=groupname,pername__startswith='Can add').distinct()
			dc=Groupsdata.objects.raw(second1)
			dc1=Groupsdata.objects.raw(second2)
			dc2=Groupsdata.objects.raw(second3)
			
	return render(request,'groupdata1.html',locals())
# Module -Reports - masters #3 - Displaying the center_report pdf  report- pdf_centerreport.html
# Created by - 2020-12-14 @ Charan
# Modified by - 2020-12-14 @ Charan 
# Modified by - 2020-12-14 @ Charan
class GeneratePdfCenter_report(View):
	def get(self, request,slug,slug1,slug2, *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_centerreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if slug1 == "all" and slug == "all" and slug2 == "all":
				data=Center.objects.using(brch).filter().distinct()
			elif slug1 != "all" and slug == "all" and slug2 == "all":
				data=Center.objects.using(brch).filter(centre_code=slug1).distinct()
			elif slug1 == "all" and slug != "all" and slug2 == "all":
				data=Center.objects.using(brch).filter(route_number=slug).distinct()
			elif slug1 != "all" and slug != "all" and slug2 == "all":
				data=Center.objects.using(brch).filter(route_number=slug).distinct()
			elif slug1 == "all" and slug == "all" and slug2 == "withdetails":
				data=Center.objects.using(brch).filter().distinct().exclude(bankname='Select').exclude(branch='Select').exclude(ifsc='Select').exclude(bankno='')
			elif slug1 != "all" and slug == "all" and slug2 == "withdetails":
				data=Center.objects.using(brch).filter(centre_code=slug1).distinct().exclude(bankname='Select').exclude(branch='Select').exclude(ifsc='Select').exclude(bankno='')
			elif slug1 == "all" and slug != "all" and slug2 == "withdetails":
				data=Center.objects.using(brch).filter(route_number=slug).distinct().exclude(bankname='Select').exclude(branch='Select').exclude(ifsc='Select').exclude(bankno='')
			elif slug1 != "all" and slug != "all" and slug2 == "withdetails":
				data=Center.objects.using(brch).filter(centre_code=slug1,route_number=slug).distinct().exclude(bankname='Select').exclude(branch='Select').exclude(ifsc='Select').exclude(bankno='')
			elif slug1 == "all" and slug == "all" and slug2 == "withoutdetails":
				data=Center.objects.using(brch).filter(bankname = 'Select').distinct()
			elif slug1 != "all" and slug == "all" and slug2 == "withoutdetails":
				data=Center.objects.using(brch).filter(centre_code=slug1,bankname = 'Select').distinct()
			elif slug1 == "all" and slug != "all" and slug2 == "withoutdetails":
				data=Center.objects.using(brch).filter(route_number=slug,bankname = 'Select').distinct()
			elif slug1 != "all" and slug != "all" and slug2 == "withoutdetails":
				data=Center.objects.using(brch).filter(centre_code=slug1,route_number=slug,bankname = 'Select').distinct()
		
			context = {
				'routecode':slug,
				'centercode': slug1,
				'bankdetails':slug2,
				'data':data,

			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_centerreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		else:
			template = get_template('pdf_centerreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if slug == 'all' and slug1 == 'all':
				data = Center.objects.filter()
				# return HttpResponse(dc)
			elif slug == 'all' and slug1 != 'all':
				data = Center.objects.filter(centre_code = slug1)
			elif slug != 'all' and slug1 == 'all':
				data = Center.objects.filter(route_number = slug)
			else:
				data = Center.objects.filter(route_number = slug,centre_code = slug1 )
		
			context = {
				'routecode':slug,
				'centercode': slug1,
				'data':data,

			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_centerreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")



class GeneratePdfCenter_reportbank(View):
	def get(self, request,slug,slug1, *args, **kwargs):
		template = get_template('pdf_centerreport.html')
		today = date.today()
		start_of_yr = today.replace(day =1, month=4)
		end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
		if slug == 'all' and slug1 == 'all':
			data = Center.objects.filter()
			# return HttpResponse(dc)
		elif slug == 'all' and slug1 != 'all':
			data = Center.objects.filter(centre_code = slug1)
		elif slug != 'all' and slug1 == 'all':
			data = Center.objects.filter(route_number = slug)
		else:
			data = Center.objects.filter(route_number = slug,centre_code = slug1 )
	   
		context = {
			'routecode':slug,
			'centercode': slug1,
			'data':data,

		}
		html = template.render(context)
		pdf = render_to_pdf("pdf_centerreportbank.html",context)
		if pdf:
			response = HttpResponse(pdf,content_type = "application/pdf")
			filename = slug+".pdf"
			content = "inline; filename=%s" %(filename)
			download = request.GET.get("download")
			if download:
				content = "attachment; filename=%s" %(filename)
			response['Content-Disposition'] = content
			return response
		return HttpResponse("Not Found")

class GeneratePdfBranch_report(View):
	def get(self, request,slug, *args, **kwargs):
		template = get_template('pdf_branchreport.html')
		today = date.today()
		start_of_yr = today.replace(day =1, month=4)
		end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
		if slug == 'all':
			data = Branch.objects.filter()
			# return HttpResponse(dc)
		else:
			data = Branch.objects.filter(code = slug)
	   
		context = {
			
			'branchcode': slug,
			'data':data,

		}
		html = template.render(context)
		pdf = render_to_pdf("pdf_branchreport.html",context)
		if pdf:
			response = HttpResponse(pdf,content_type = "application/pdf")
			filename = slug+".pdf"
			content = "inline; filename=%s" %(filename)
			download = request.GET.get("download")
			if download:
				content = "attachment; filename=%s" %(filename)
			response['Content-Disposition'] = content
			return response
		return HttpResponse("Not Found")

class GeneratePdfRoute_report(View):
	def get(self, request,slug, *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_routereport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if slug == 'all':
				data = Route.objects.using(brch).filter()
				# return HttpResponse(dc)
			else:
				data = Route.objects.using(brch).filter(Route_number = slug)
		
			context = {
				
				'routecode': slug,
				'data':data,

			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_routereport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		else:
			template = get_template('pdf_routereport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if slug == 'all':
				data = Route.objects.filter()
				# return HttpResponse(dc)
			else:
				data = Route.objects.filter(Route_number = slug)
		
			context = {
				
				'routecode': slug,
				'data':data,

			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_routereport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")

class GeneratePdfAdditions_report(View):
	def get(self, request,slug, *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_additionsreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if slug == 'all':
				data = Additions.objects.using(brch).filter()
				# return HttpResponse(dc)
			else:
				data = Additions.objects.using(brch).filter(centercode = slug)
		   
			context = {
				
				'centercode': slug,
				'data':data,

			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_additionsreport.html",context)
			if pdf:
				#r = requests.post('http://httpbin.org/post', data=a.encode('utf-8')) 
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		else:
			template = get_template('pdf_supervisorreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if slug == 'all':
				data = Supervisor.objects.filter()
				# return HttpResponse(dc)
			else:
				data = Supervisor.objects.filter(code = slug)
		   
			context = {
				
				'supervisorcode': slug,
				'data':data,

			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_supervisorreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")



class GeneratePdfSupervisor_report(View):
	def get(self, request,slug, *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_supervisorreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if slug == 'all':
				data = Supervisor.objects.using(brch).filter()
				# return HttpResponse(dc)
			else:
				data = Supervisor.objects.using(brch).filter(code = slug)
		   
			context = {
				
				'supervisorcode': slug,
				'data':data,

			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_supervisorreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		else:
			template = get_template('pdf_supervisorreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if slug == 'all':
				data = Supervisor.objects.filter()
				# return HttpResponse(dc)
			else:
				data = Supervisor.objects.filter(code = slug)
		   
			context = {
				
				'supervisorcode': slug,
				'data':data,

			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_supervisorreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
class GeneratePdfAgent_report(View):
	def get(self, request,slug, *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_agentreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if slug == 'all':
				data = Agent.objects.using(brch).filter()
				# return HttpResponse(dc)
			else:
				data = Agent.objects.using(brch).filter(code = slug)
		   
			context = {
				
				'agentcode': slug,
				'data':data,

			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_agentreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		else:
			template = get_template('pdf_agentreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if slug == 'all':
				data = Agent.objects.filter()
				# return HttpResponse(dc)
			else:
				data = Agent.objects.filter(code = slug)
		   
			context = {
				
				'agentcode': slug,
				'data':data,

			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_agentreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
class GeneratePdfDepartment_report(View):
	def get(self, request,slug, *args, **kwargs):
		template = get_template('pdf_departmentreport.html')
		today = date.today()
		start_of_yr = today.replace(day =1, month=4)
		end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
		if slug == 'all':
			data = Department.objects.filter()
			# return HttpResponse(dc)
		else:
			data = Department.objects.filter(dcode = slug)
	   
		context = {
			
			'departmentcode': slug,
			'data':data,

		}
		html = template.render(context)
		pdf = render_to_pdf("pdf_departmentreport.html",context)
		if pdf:
			response = HttpResponse(pdf,content_type = "application/pdf")
			filename = slug+".pdf"
			content = "inline; filename=%s" %(filename)
			download = request.GET.get("download")
			if download:
				content = "attachment; filename=%s" %(filename)
			response['Content-Disposition'] = content
			return response
		return HttpResponse("Not Found")

class GeneratePdfRole_report(View):
	def get(self, request,slug, *args, **kwargs):
		template = get_template('pdf_rolereport.html')
		today = date.today()
		start_of_yr = today.replace(day =1, month=4)
		end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
		if slug == 'all':
			data = Role.objects.filter()
			# return HttpResponse(dc)
		else:
			data = Role.objects.filter(rcode = slug)
	   
		context = {
			
			'role': slug,
			'data':data,

		}
		html = template.render(context)
		pdf = render_to_pdf("pdf_rolereport.html",context)
		if pdf:
			response = HttpResponse(pdf,content_type = "application/pdf")
			filename = slug+".pdf"
			content = "inline; filename=%s" %(filename)
			download = request.GET.get("download")
			if download:
				content = "attachment; filename=%s" %(filename)
			response['Content-Disposition'] = content
			return response
		return HttpResponse("Not Found")


class GeneratePdfOffice_report(View):
	def get(self, request,slug, *args, **kwargs):
		template = get_template('pdf_officereport.html')
		today = date.today()
		start_of_yr = today.replace(day =1, month=4)
		end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
		if slug == 'all':
			data = Office.objects.filter()
			# return HttpResponse(dc)
		else:
			data = Office.objects.filter(ocode = slug)
	   
		context = {
			
			'officecode': slug,
			'data':data,

		}
		html = template.render(context)
		pdf = render_to_pdf("pdf_officereport.html",context)
		if pdf:
			response = HttpResponse(pdf,content_type = "application/pdf")
			filename = slug+".pdf"
			content = "inline; filename=%s" %(filename)
			download = request.GET.get("download")
			if download:
				content = "attachment; filename=%s" %(filename)
			response['Content-Disposition'] = content
			return response
		return HttpResponse("Not Found")

	
class GeneratePdfVillage_report(View):
	def get(self, request,slug, *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_villagereport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if slug == 'all':
				data = Village.objects.using(brch).filter()
				# return HttpResponse(dc)
			else:
				data = Village.objects.using(brch).filter(code = slug)
		
			context = {
				
				'villagecode': slug,
				'data':data,

			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_villagereport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		else:
			template = get_template('pdf_villagereport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if slug == 'all':
				data = Village.objects.filter()
				# return HttpResponse(dc)
			else:
				data = Village.objects.filter(code = slug)
		
			context = {
				
				'villagecode': slug,
				'data':data,

			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_villagereport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")

class GeneratePdfMilktype_report(View):
	def get(self, request,slug, *args, **kwargs):
		template = get_template('pdf_milktypereport.html')
		today = date.today()
		start_of_yr = today.replace(day =1, month=4)
		end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
		if slug == 'all':
			data = Milktype.objects.filter()
			# return HttpResponse(dc)
		else:
			data = Milktype.objects.filter(code = slug)
	
		context = {
			
			'milktypecode': slug,
			'data':data,

		}
		html = template.render(context)
		pdf = render_to_pdf("pdf_milktypereport.html",context)
		if pdf:
			response = HttpResponse(pdf,content_type = "application/pdf")
			filename = slug+".pdf"
			content = "inline; filename=%s" %(filename)
			download = request.GET.get("download")
			if download:
				content = "attachment; filename=%s" %(filename)
			response['Content-Disposition'] = content
			return response
		return HttpResponse("Not Found")

class GeneratePdfUserdata_report(View):
	def get(self, request,slug,slug1, *args, **kwargs):
		template = get_template('pdf_userreport.html')
		today = date.today()
		start_of_yr = today.replace(day =1, month=4)
		end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
		first =" select U.id id,U.username username,U.email email,G.name gname,E.role role,U.is_active isactive,U.last_login lastlogin,U.date_joined datejoined from auth_user U,auth_group G,school_extendeduser E,auth_user_groups A where U.id=A.user_id and A.group_id=G.id and U.id=E.user_id"
		second =" select U.id id,U.username username,U.email email,G.name gname,E.role role,U.is_active isactive,U.last_login lastlogin,U.date_joined datejoined from auth_user U,auth_group G,school_extendeduser E,auth_user_groups A where U.id=A.user_id and A.group_id=G.id and U.id=E.user_id and G.name= '%s'"%(str(slug1))
		third =" select U.id id,U.username username,U.email email,G.name gname,E.role role,U.is_active isactive,U.last_login lastlogin,U.date_joined datejoined from auth_user U,auth_group G,school_extendeduser E,auth_user_groups A where U.id=A.user_id and A.group_id=G.id and U.id=E.user_id and username = '%s'"%(str(slug))
		fourth =" select U.id id,U.username username,U.email email,G.name gname,E.role role,U.is_active isactive,U.last_login lastlogin,U.date_joined datejoined from auth_user U,auth_group G,school_extendeduser E,auth_user_groups A where U.id=A.user_id and A.group_id=G.id and U.id=E.user_id and G.name = '%s' and username = '%s' "%(str(slug1),str(slug))
		if slug == 'all' and slug1 == 'all':
			data = Usersdata.objects.raw(first)
			# return HttpResponse(dc)
		elif slug == 'all' and slug1 != 'all':
			data = Usersdata.objects.raw(second)
		elif slug != 'all' and slug1 == 'all':
			data = Usersdata.objects.raw(third)
		else:
			data = Usersdata.objects.raw(fourth)
	   
		context = {
			'groupname': slug1,
			'uname': slug,
			
			'data':data,

		}
		html = template.render(context)
		pdf = render_to_pdf("pdf_userreport.html",context)
		if pdf:
			response = HttpResponse(pdf,content_type = "application/pdf")
			filename = slug+".pdf"
			content = "inline; filename=%s" %(filename)
			download = request.GET.get("download")
			if download:
				content = "attachment; filename=%s" %(filename)
			response['Content-Disposition'] = content
			return response
		return HttpResponse("Not Found")


class GeneratePdfCategory_report(View):
	def get(self, request,slug, *args, **kwargs):
		template = get_template('pdf_categoryreport.html')
		today = date.today()
		start_of_yr = today.replace(day =1, month=4)
		end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
		if slug == 'all':
			data = Category.objects.filter()
			# return HttpResponse(dc)
		else:
			data = Category.objects.filter(code = slug)
	
		context = {
			
			'categorycode': slug,
			'data':data,

		}
		html = template.render(context)
		pdf = render_to_pdf("pdf_categoryreport.html",context)
		if pdf:
			response = HttpResponse(pdf,content_type = "application/pdf")
			filename = slug+".pdf"
			content = "inline; filename=%s" %(filename)
			download = request.GET.get("download")
			if download:
				content = "attachment; filename=%s" %(filename)
			response['Content-Disposition'] = content
			return response
		return HttpResponse("Not Found")
		


class GeneratePdfFormula_report(View):
	def get(self, request,slug, *args, **kwargs):
		template = get_template('pdf_formulareport.html')
		today = date.today()
		start_of_yr = today.replace(day =1, month=4)
		end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
		if slug == 'all':
			data = Formulae.objects.filter()
			# return HttpResponse(dc)
		else:
			data = Formulae.objects.filter(name = slug)
	
		context = {
			
			'formulaename': slug,
			'data':data,

		}
		html = template.render(context)
		pdf = render_to_pdf("pdf_formulareport.html",context)
		if pdf:
			response = HttpResponse(pdf,content_type = "application/pdf")
			filename = slug+".pdf"
			content = "inline; filename=%s" %(filename)
			download = request.GET.get("download")
			if download:
				content = "attachment; filename=%s" %(filename)
			response['Content-Disposition'] = content
			return response
		return HttpResponse("Not Found")
		
class GeneratePdfBmCenter_report(View):
	def get(self, request,slug,slug1,slug2,slug3,slug4, *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_bmcenterreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			first = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			print(first)
			second = "select M.id id, centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			third = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and centercode = '%s' "%(str(slug3),str(slug4),str(slug1))
			fourth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s' and centercode = '%s' "%(str(slug3),str(slug4),str(slug2),str(slug1))
			fifth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			sixth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			seventh = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			eigth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			if slug == 'all' and slug1 == 'all' and slug2 == 'all' :
				data = rpt_bufallomilk.objects.using(brch).raw(first)
			elif slug == 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_bufallomilk.objects.using(brch).raw(second)
			elif slug == 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_bufallomilk.objects.using(brch).raw(third)
			elif slug == 'all' and slug1 != 'all'and slug2 != 'all' :
				data = rpt_bufallomilk.objects.raw(fourth)
			elif slug != 'all' and slug1 == 'all'and slug2 == 'all' :
				data = rpt_bufallomilk.objects.using(brch).raw(first)
			elif slug != 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_bufallomilk.objects.raw(second)
			elif slug != 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_bufallomilk.objects.using(brch).raw(third)
				# return HttpResponse(dc)
			else:
				data = rpt_bufallomilk.objects.using(brch).raw(fourth)

			slug3 =datetime.datetime.strptime(slug3, '%Y-%m-%d').strftime('%d-%m-%Y')
			print(slug3)
			slug4 = datetime.datetime.strptime(slug4, '%Y-%m-%d').strftime('%d-%m-%Y')	
			print(slug4)


			context = {
				'routecode':slug,
				'centercode': slug1,
				'milktype':slug2,
				'data':data,
				'datefrom':slug3,
				'dateto':slug4,
				
			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_bmcenterreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+"_"+slug1+"_"+slug2+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		else:
			template = get_template('pdf_bmcenterreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			first = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			print(first)
			second = "select M.id id, centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			third = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and centercode = '%s' "%(str(slug3),str(slug4),str(slug1))
			fourth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s' and centercode = '%s' "%(str(slug3),str(slug4),str(slug2),str(slug1))
			fifth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			sixth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			seventh = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			eigth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			if slug == 'all' and slug1 == 'all' and slug2 == 'all' :
				data = rpt_bufallomilk.objects.raw(first)
			elif slug == 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_bufallomilk.objects.raw(second)
			elif slug == 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_bufallomilk.objects.raw(third)
			elif slug == 'all' and slug1 != 'all'and slug2 != 'all' :
				data = rpt_bufallomilk.objects.raw(fourth)
			elif slug != 'all' and slug1 == 'all'and slug2 == 'all' :
				data = rpt_bufallomilk.objects.raw(first)
			elif slug != 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_bufallomilk.objects.raw(second)
			elif slug != 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_bufallomilk.objects.raw(third)
				# return HttpResponse(dc)
			else:
				data = rpt_bufallomilk.objects.raw(fourth)

			slug3 =datetime.datetime.strptime(slug3, '%Y-%m-%d').strftime('%d-%m-%Y')
			print(slug3)
			slug4 = datetime.datetime.strptime(slug4, '%Y-%m-%d').strftime('%d-%m-%Y')	
			print(slug4)

			context = {
				'routecode':slug,
				'centercode': slug1,
				'milktype':slug2,
				'data':data,
				'datefrom':slug3,
				'dateto':slug4,
				
			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_bmcenterreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+"_"+slug1+"_"+slug2+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")

class GeneratePdfBmCategory_report(View):
	def get(self, request,slug,slug1,slug2,slug3,slug4, *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_bmcategoryreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)

			first = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			second = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s' and C.milk_type = '%s' "%(str(slug3),str(slug4),str(slug2))
			third = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			fourth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'  and C.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			fifth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			sixth= "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'  and C.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			seventh = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			eigth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'  and C.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			if slug == 'all' and slug1 == 'all' and slug2 == 'all' :
				data =rpt_bufallomilk.objects.using(brch).raw(first)
			elif slug == 'all' and slug1 == 'all'and slug2 != 'all' :
				data =rpt_bufallomilk.objects.using(brch).raw(second)
			elif slug == 'all' and slug1 != 'all'and slug2 == 'all' :
				data =rpt_bufallomilk.objects.using(brch).raw(third)
			elif slug == 'all' and slug1 != 'all'and slug2 != 'all' :
				data =rpt_bufallomilk.objects.using(brch).raw(fourth)
			elif slug != 'all' and slug1 == 'all'and slug2 == 'all' :
				data =rpt_bufallomilk.objects.using(brch).raw(fifth)
			elif slug != 'all' and slug1 == 'all'and slug2 != 'all' :
				data =rpt_bufallomilk.objects.using(brch).raw(sixth)
			elif slug != 'all' and slug1 != 'all'and slug2 == 'all' :
				data =rpt_bufallomilk.objects.using(brch).raw(seventh)
				# return HttpResponse(dc)
			else:
				data =rpt_bufallomilk.objects.using(brch).raw(eigth)
				# return HttpResponse(dc)
			
			slug3 =datetime.datetime.strptime(slug3, '%Y-%m-%d').strftime('%d-%m-%Y')
			print(slug3)
			slug4 = datetime.datetime.strptime(slug4, '%Y-%m-%d').strftime('%d-%m-%Y')	
			print(slug4)

		

			context = {
				'routecode':slug,
				'centercode': slug1,
				'milktype':slug2,
				'datefrom':slug3,
				'dateto':slug4,
				'data':data,
				
			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_bmcategoryreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+"_"+slug1+"_"+slug2+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		else:
			template = get_template('pdf_bmcategoryreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)

			first = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			second = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s' and C.milk_type = '%s' "%(str(slug3),str(slug4),str(slug2))
			third = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			fourth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'  and C.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			fifth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			sixth= "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'  and C.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			seventh = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			eigth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'  and C.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			if slug == 'all' and slug1 == 'all' and slug2 == 'all' :
				data =rpt_bufallomilk.objects.raw(first)
			elif slug == 'all' and slug1 == 'all'and slug2 != 'all' :
				data =rpt_bufallomilk.objects.raw(second)
			elif slug == 'all' and slug1 != 'all'and slug2 == 'all' :
				data =rpt_bufallomilk.objects.raw(third)
			elif slug == 'all' and slug1 != 'all'and slug2 != 'all' :
				data =rpt_bufallomilk.objects.raw(fourth)
			elif slug != 'all' and slug1 == 'all'and slug2 == 'all' :
				data =rpt_bufallomilk.objects.raw(fifth)
			elif slug != 'all' and slug1 == 'all'and slug2 != 'all' :
				data =rpt_bufallomilk.objects.raw(sixth)
			elif slug != 'all' and slug1 != 'all'and slug2 == 'all' :
				data =rpt_bufallomilk.objects.raw(seventh)
				# return HttpResponse(dc)
			else:
				data =rpt_bufallomilk.objects.raw(eigth)
				# return HttpResponse(dc)
			
			slug3 =datetime.datetime.strptime(slug3, '%Y-%m-%d').strftime('%d-%m-%Y')
			print(slug3)
			slug4 = datetime.datetime.strptime(slug4, '%Y-%m-%d').strftime('%d-%m-%Y')	
			print(slug4)
		

			context = {
				'routecode':slug,
				'centercode': slug1,
				'milktype':slug2,
				'datefrom':slug3,
				'dateto':slug4,
				'data':data,
				
			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_bmcategoryreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+"_"+slug1+"_"+slug2+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")

class GeneratePdfBmRoute_report(View):
	def get(self, request,slug,slug1,slug2,slug3,slug4, *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_bmroutereport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)

			first = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			second = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			third = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			fourth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			fifth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' "%(str(slug3),str(slug4),str(slug))
			sixth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' and B.milk_type = '%s' "%(str(slug3),str(slug4),str(slug),str(slug2))
			seventh = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' "%(str(slug3),str(slug4),str(slug))
			eigth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' and B.milk_type = '%s'"%(str(slug3),str(slug4),str(slug),str(slug2))
			if slug == 'all' and slug1 == 'all' and slug2 == 'all' :
				data = rpt_bufallomilk.objects.using(brch).raw(first)
			elif slug == 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_bufallomilk.objects.using(brch).raw(second)
			elif slug == 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_bufallomilk.objects.using(brch).raw(third)
			elif slug == 'all' and slug1 != 'all'and slug2 != 'all' :
				data = rpt_bufallomilk.objects.using(brch).raw(fourth)
			elif slug != 'all' and slug1 == 'all'and slug2 == 'all' :
				data = rpt_bufallomilk.objects.using(brch).raw(fifth)
			elif slug != 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_bufallomilk.objects.using(brch).raw(sixth)
			elif slug != 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_bufallomilk.objects.using(brch).raw(seventh)
				# return HttpResponse(dc)
			else:
				data = rpt_bufallomilk.objects.using(brch).raw(eigth)

			slug3 =datetime.datetime.strptime(slug3, '%Y-%m-%d').strftime('%d-%m-%Y')
			print(slug3)
			slug4 = datetime.datetime.strptime(slug4, '%Y-%m-%d').strftime('%d-%m-%Y')	
			print(slug4)
			
			context = {
				'routecode':slug,
				'centercode': slug1,
				'milktype':slug2,
				'datefrom':slug3,
				'dateto':slug4,
				'data':data,
				
			}
			
			html = template.render(context)
			pdf = render_to_pdf("pdf_bmroutereport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+"_"+slug1+"_"+slug2+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		else:
			template = get_template('pdf_bmroutereport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)

			first = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			second = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			third = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			fourth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			fifth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' "%(str(slug3),str(slug4),str(slug))
			sixth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' and B.milk_type = '%s' "%(str(slug3),str(slug4),str(slug),str(slug2))
			seventh = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' "%(str(slug3),str(slug4),str(slug))
			eigth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' and B.milk_type = '%s'"%(str(slug3),str(slug4),str(slug),str(slug2))
			if slug == 'all' and slug1 == 'all' and slug2 == 'all' :
				data = rpt_bufallomilk.objects.raw(first)
			elif slug == 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_bufallomilk.objects.raw(second)
			elif slug == 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_bufallomilk.objects.raw(third)
			elif slug == 'all' and slug1 != 'all'and slug2 != 'all' :
				data = rpt_bufallomilk.objects.raw(fourth)
			elif slug != 'all' and slug1 == 'all'and slug2 == 'all' :
				data = rpt_bufallomilk.objects.raw(fifth)
			elif slug != 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_bufallomilk.objects.raw(sixth)
			elif slug != 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_bufallomilk.objects.raw(seventh)
				# return HttpResponse(dc)
			else:
				data = rpt_bufallomilk.objects.raw(eigth)

			slug3 =datetime.datetime.strptime(slug3, '%Y-%m-%d').strftime('%d-%m-%Y')
			print(slug3)
			slug4 = datetime.datetime.strptime(slug4, '%Y-%m-%d').strftime('%d-%m-%Y')	
			print(slug4)
			
			context = {
				'routecode':slug,
				'centercode': slug1,
				'milktype':slug2,
				'datefrom':slug3,
				'dateto':slug4,
				'data':data,
				
			}
			
			html = template.render(context)
			pdf = render_to_pdf("pdf_bmroutereport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+"_"+slug1+"_"+slug2+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")


class GeneratePdfCmCenter_report(View):
	def get(self, request,slug,slug1,slug2,slug3,slug4, *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_cmcenterreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)

			first = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			second = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			third = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and centercode = '%s' "%(str(slug3),str(slug4),str(slug1))
			fourth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s' and centercode = '%s' "%(str(slug3),str(slug4),str(slug2),str(slug1))
			fifth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			sixth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s' "%(str(slug3),str(slug4),str(slug2))
			seventh = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and centercode = '%s' "%(str(slug3),str(slug4),str(slug1))
			eigth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'  D.milk_type = '%s' and centercode = '%s'"%(str(slug3),str(slug4),str(slug2),str(slug1))
			if slug == 'all' and slug1 == 'all' and slug2 == 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(first)
			elif slug == 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(second)
			elif slug == 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(third)
			elif slug == 'all' and slug1 != 'all'and slug2 != 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(fourth)
			elif slug != 'all' and slug1 == 'all'and slug2 == 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(fifth)
			elif slug != 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(sixth)
			elif slug != 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(seventh)
				# return HttpResponse(dc)
			else:
				data = rpt_cowmilk.objects.using(brch).raw(eigth)

			slug3 =datetime.datetime.strptime(slug3, '%Y-%m-%d').strftime('%d-%m-%Y')
			print(slug3)
			slug4 = datetime.datetime.strptime(slug4, '%Y-%m-%d').strftime('%d-%m-%Y')	
			print(slug4)
			
			
			context = {
				'routecode':slug,
				'centercode':slug1,
				'milktype':slug2,
				'datefrom':slug3,
				'dateto':slug4,
				'data':data,
			
			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_cmcenterreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+"_"+slug1+"_"+slug2+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		else:
			template = get_template('pdf_cmcenterreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)

			first = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			second = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			third = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and centercode = '%s' "%(str(slug3),str(slug4),str(slug1))
			fourth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s' and centercode = '%s' "%(str(slug3),str(slug4),str(slug2),str(slug1))
			fifth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			sixth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s' "%(str(slug3),str(slug4),str(slug2))
			seventh = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and centercode = '%s' "%(str(slug3),str(slug4),str(slug1))
			eigth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'  D.milk_type = '%s' and centercode = '%s'"%(str(slug3),str(slug4),str(slug2),str(slug1))
			if slug == 'all' and slug1 == 'all' and slug2 == 'all' :
				data = rpt_cowmilk.objects.raw(first)
			elif slug == 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_cowmilk.objects.raw(second)
			elif slug == 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_cowmilk.objects.raw(third)
			elif slug == 'all' and slug1 != 'all'and slug2 != 'all' :
				data = rpt_cowmilk.objects.raw(fourth)
			elif slug != 'all' and slug1 == 'all'and slug2 == 'all' :
				data = rpt_cowmilk.objects.raw(fifth)
			elif slug != 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_cowmilk.objects.raw(sixth)
			elif slug != 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_cowmilk.objects.raw(seventh)
				# return HttpResponse(dc)
			else:
				data = rpt_cowmilk.objects.raw(eigth)

			
			slug3 =datetime.datetime.strptime(slug3, '%Y-%m-%d').strftime('%d-%m-%Y')
			print(slug3)
			slug4 = datetime.datetime.strptime(slug4, '%Y-%m-%d').strftime('%d-%m-%Y')	
			print(slug4)
			
			
			
			context = {
				'routecode':slug,
				'centercode':slug1,
				'milktype':slug2,
				'datefrom':slug3,
				'dateto':slug4,
				'data':data,
			
			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_cmcenterreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+"_"+slug1+"_"+slug2+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")


class GeneratePdfCmCategory_report(View):
	def get(self, request,slug,slug1,slug2,slug3,slug4, *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_cmcategoryreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)

			first = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			second = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s' and C.milk_type = '%s' "%(str(slug3),str(slug4),str(slug2))
			third = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			fourth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'and C.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			fifth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			sixth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'and C.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			seventh = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			eigth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s' and C.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			if slug == 'all' and slug1 == 'all' and slug2 == 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(first)
			elif slug == 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(second)
			elif slug == 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(third)
			elif slug == 'all' and slug1 != 'all'and slug2 != 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(fourth)
			elif slug != 'all' and slug1 == 'all'and slug2 == 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(fifth)
			elif slug != 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(sixth)
			elif slug != 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(seventh)
				# return HttpResponse(dc)
			else:
				data = rpt_cowmilk.objects.using(brch).raw(eigth)
			
			slug3 =datetime.datetime.strptime(slug3, '%Y-%m-%d').strftime('%d-%m-%Y')
			print(slug3)
			slug4 = datetime.datetime.strptime(slug4, '%Y-%m-%d').strftime('%d-%m-%Y')	
			print(slug4)
			
			
			context = {
				'routecode':slug,
				'centercode':slug1,
				'milktype':slug2,
				'datefrom':slug3,
				'dateto':slug4,
				'data':data,
			
			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_cmcategoryreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+"_"+slug1+"_"+slug2+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		else:
			template = get_template('pdf_cmcategoryreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)

			first = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			second = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s' and C.milk_type = '%s' "%(str(slug3),str(slug4),str(slug2))
			third = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			fourth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'and C.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			fifth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			sixth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'and C.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			seventh = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			eigth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s' and C.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			if slug == 'all' and slug1 == 'all' and slug2 == 'all' :
				data = rpt_cowmilk.objects.raw(first)
			elif slug == 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_cowmilk.objects.raw(second)
			elif slug == 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_cowmilk.objects.raw(third)
			elif slug == 'all' and slug1 != 'all'and slug2 != 'all' :
				data = rpt_cowmilk.objects.raw(fourth)
			elif slug != 'all' and slug1 == 'all'and slug2 == 'all' :
				data = rpt_cowmilk.objects.raw(fifth)
			elif slug != 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_cowmilk.objects.raw(sixth)
			elif slug != 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_cowmilk.objects.raw(seventh)
				# return HttpResponse(dc)
			else:
				data = rpt_cowmilk.objects.raw(eigth)
			
			slug3 =datetime.datetime.strptime(slug3, '%Y-%m-%d').strftime('%d-%m-%Y')
			print(slug3)
			slug4 = datetime.datetime.strptime(slug4, '%Y-%m-%d').strftime('%d-%m-%Y')	
			print(slug4)
			
			
			
			context = {
				'routecode':slug,
				'centercode':slug1,
				'milktype':slug2,
				'datefrom':slug3,
				'dateto':slug4,
				'data':data,
			
			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_cmcategoryreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+"_"+slug1+"_"+slug2+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")



class GeneratePdfCmRoute_report(View):
	def get(self, request,slug,slug1,slug2,slug3,slug4, *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_cmroutereport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)

			first = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			second = "select  B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			third = "select  B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			fourth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			fifth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s'"%(str(slug3),str(slug4),str(slug))
			sixth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'and Routecode = '%s' and B.milk_type = '%s'"%(str(slug3),str(slug4),str(slug),str(slug2))
			seventh = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s'"%(str(slug3),str(slug4),str(slug))
			eigth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' and B.milk_type = '%s'"%(str(slug3),str(slug4),str(slug),str(slug2))
			if slug == 'all' and slug1 == 'all' and slug2 == 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(first)
			elif slug == 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(second)
			elif slug == 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(third)
			elif slug == 'all' and slug1 != 'all'and slug2 != 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(fourth)
			elif slug != 'all' and slug1 == 'all'and slug2 == 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(fifth)
			elif slug != 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(sixth)
			elif slug != 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_cowmilk.objects.using(brch).raw(seventh)
				# return HttpResponse(dc)
			else:
				data = rpt_cowmilk.objects.using(brch).raw(eigth)
	
			slug3 =datetime.datetime.strptime(slug3, '%Y-%m-%d').strftime('%d-%m-%Y')
			print(slug3)
			slug4 = datetime.datetime.strptime(slug4, '%Y-%m-%d').strftime('%d-%m-%Y')	
			print(slug4)
			
			
			
			
			context = {
				'routecode':slug,
				'centercode':slug1,
				'milktype':slug2,
				'data':data,
				'datefrom':slug3,
				'dateto':slug4,
				
			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_cmroutereport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+"_"+slug1+"_"+slug2+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		else:
			template = get_template('pdf_cmroutereport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)

			first = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			second = "select  B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			third = "select  B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(slug3),str(slug4))
			fourth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(slug3),str(slug4),str(slug2))
			fifth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s'"%(str(slug3),str(slug4),str(slug))
			sixth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'and Routecode = '%s' and B.milk_type = '%s'"%(str(slug3),str(slug4),str(slug),str(slug2))
			seventh = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s'"%(str(slug3),str(slug4),str(slug))
			eigth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' and B.milk_type = '%s'"%(str(slug3),str(slug4),str(slug),str(slug2))
			if slug == 'all' and slug1 == 'all' and slug2 == 'all' :
				data = rpt_cowmilk.objects.raw(first)
			elif slug == 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_cowmilk.objects.raw(second)
			elif slug == 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_cowmilk.objects.raw(third)
			elif slug == 'all' and slug1 != 'all'and slug2 != 'all' :
				data = rpt_cowmilk.objects.raw(fourth)
			elif slug != 'all' and slug1 == 'all'and slug2 == 'all' :
				data = rpt_cowmilk.objects.raw(fifth)
			elif slug != 'all' and slug1 == 'all'and slug2 != 'all' :
				data = rpt_cowmilk.objects.raw(sixth)
			elif slug != 'all' and slug1 != 'all'and slug2 == 'all' :
				data = rpt_cowmilk.objects.raw(seventh)
				# return HttpResponse(dc)
			else:
				data = rpt_cowmilk.objects.raw(eigth)
	
			slug3 =datetime.datetime.strptime(slug3, '%Y-%m-%d').strftime('%d-%m-%Y')
			print(slug3)
			slug4 = datetime.datetime.strptime(slug4, '%Y-%m-%d').strftime('%d-%m-%Y')	
			print(slug4)
			
			
			
			context = {
				'routecode':slug,
				'centercode':slug1,
				'milktype':slug2,
				'data':data,
				'datefrom':slug3,
				'dateto':slug4,
				
			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_cmroutereport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+"_"+slug1+"_"+slug2+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")


class GeneratePdf_date(View):
	def get(self, request,slug, slug1, slug2, *args, **kwargs):
		template = get_template('pdf_download_date.html')
		board = Dashboard.objects.filter(expenses_details=slug, date__gte=slug1, date__lte=slug2)
		# return HttpResponse(board)
		total_listrec = []
		total_listpay = []
		total_recall = Dashboard.objects.filter(expenses_details=slug, date__gte=slug1, date__lte=slug2)
		for i in total_recall:
			total_listrec.append(i.receviable)
			total_recsum = sum(total_listrec)
			total_r = sum(total_listrec)
		total_payall = Dashboard.objects.filter(expenses_details=slug, date__gte=slug1, date__lte=slug2)
		for j in total_payall:
			total_listpay.append(j.payment)
			total_paysum = sum(total_listpay)
			total_p = sum(total_listpay)
			# diff_total = total_recsum - total_paysum
		if total_recsum >  total_paysum:
			tr = total_recsum - total_paysum
			total_paysum = total_paysum + tr
			# return HttpResponse("tr {{tr}}")
			tp = 0.0
			total_sum = total_paysum

		elif total_paysum > total_recsum:
			tp = total_paysum - total_recsum
			total_recsum = total_recsum + tp
			tr = 0.0
			total_sum = total_recsum
		context = {
			'board': board,
			'slug1':slug1,
			'slug2':slug2,
			'total_sum': total_sum,
			'total_recsum': total_recsum,
			 'total_paysum':total_paysum,
			 'total_r':total_r,
			 'total_p':total_p,
			 'tp': tp,
			 'tr': tr,

		}
		html = template.render(context)
		pdf = render_to_pdf("pdf_download_date.html",context)
		if pdf:
			response = HttpResponse(pdf,content_type = "application/pdf")
			filename = slug+"_"+slug1+"_"+slug2+".pdf"
			content = "inline; filename=%s" %(filename)
			download = request.GET.get("download")
			if download:
				content = "attachment; filename=%s" %(filename)
			response['Content-Disposition'] = content
			return response
		return HttpResponse("Not Found")
def excel_downloaduser(request,slug,slug1):
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day=1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	data = Usersdata.objects.filter()
   
	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="userreport.xls"'
	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('user', cell_overwrite_ok=True)
	row_num = 0
	font_style = xlwt.XFStyle()
	font_style.font.bold = True
	font_date = xlwt.XFStyle()
	#font_date.num_format_str = 'D-MMM-YY'
	columns = ['Username','Email','Group','Role','isActive','lastlogin','DateJoined']
	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style)
	font_style = xlwt.XFStyle()
	# x = datetime.strptime(date, "%d/%m/%Y")
	if slug == 'all':
		rows = Usersdata.objects.filter().values_list( 'username','email','gname','role','isactive','lastlogin','datejoined' )
	else:
		rows = Usersdata.objects.filter(username = slug).values_list( 'username','email','gname','role','isactive','lastlogin','datejoined')
	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
			ws.write(row_num, 0, row[0], font_date)
	wb.save(response)
	return response


def excel_download(request, slug):
	today = date.today()
	start_of_yr = today.replace(day=1, month=4)
	end_of_yr = start_of_yr + relativedelta(months=11, days=31) - timedelta(days=1)
	board = Dashboard.objects.filter(expenses_details=slug, date__gte=start_of_yr, date__lte=end_of_yr)
	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="users.xls"'
	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users', cell_overwrite_ok=True)
	row_num = 0
	font_style = xlwt.XFStyle()
	font_style.font.bold = True
	font_date = xlwt.XFStyle()
	font_date.num_format_str = 'D-MMM-YY'
	columns = ['date', 'expenses_details', 'description', 'heads', 'receviable', 'payment']
	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style)
	font_style = xlwt.XFStyle()
	# x = datetime.strptime(date, "%d/%m/%Y")
	rows = Dashboard.objects.filter(expenses_details=slug, date__gte=start_of_yr, date__lte=end_of_yr).values_list(
		'date', 'expenses_details', 'description', 'heads', 'receviable', 'payment')
	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
			ws.write(row_num, 0, row[0], font_date)
	wb.save(response)
	return response

# Module -Reports - Transcations #1 - Displaying the dailydata excel  report
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Karthik
def excel_download1(request,slug,slug1,slug2,slug3):
	today = date.today()
	start_of_yr = today.replace(day=1, month=4)
	end_of_yr = start_of_yr + relativedelta(months=11, days=31) - timedelta(days=1)
	#board = Daily_data.objects.filter( date_gte=start_of_yr, date_lte=end_of_yr)
	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="dailydata.xls"'
	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Dailydata', cell_overwrite_ok=True)
	row_num = 0
	font_style = xlwt.XFStyle()
	font_style.font.bold = True
	font_date = xlwt.XFStyle()
	font_date.num_format_str = 'D-MM-YYYY'
	columns = ['Date', 'Shift','Routecode','Routename','Center Code	','Center Name', 'Milk type', 'KGS','LTRS', 'FAT', 'SNF','Rate\Ltr','TSRate','P&I Rate', 'P&I Amt','GrossAmount']
	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style)
	font_style = xlwt.XFStyle()
	# x = datetime.strptime(date, "%d/%m/%Y")
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:

		if slug2 == 'all' and slug3 == 'all':
			rows = rpt_dailydata.objects.using(brch).filter( date__gte=slug, date__lte=slug1).values_list(
				'date', 'shift','routecode','routename','centercode','centername', 'milk_type', 'qty','ltrs', 'fat', 'snf','ltrrate','tsrate', 'comm','pel','net'
			)
			total_listkgs = []
			total_listltrs = []
			total_listfat = []
			total_listsnf = []
			total_listfat1 = []
			total_listsnf1 = []
			total_listrate = []
			total_listrate1 = []
			total_listtsrate = []
			total_listtsrate1 = []
			#total_listamount = []
			total_listpel = []
			total_listcomm = []
			total_listcomm1 = []
			total_listtotal = []
			total_sall = rpt_dailydata.objects.using(brch).filter( date__gte=slug, date__lte=slug1).distinct()
			total_sallcount = rpt_dailydata.objects.using(brch).filter( date__gte=slug, date__lte=slug1).distinct().count()
			for i in total_sall:
				total_listkgs.append(i.qty)
				total_kgssum_detail = round(sum(total_listkgs),2)
				total_listltrs.append(i.ltrs)
				total_ltrssum_detail = round(sum(total_listltrs),2)
				total_listfat.append(i.fat)
				total_fatsum_detail1 = round(sum(total_listfat),2)
				total_fatsum_detail = total_fatsum_detail1/total_sallcount
				total_listsnf.append(i.snf)
				total_snfsum_detail1 = round(sum(total_listsnf),2)
				total_snfsum_detail = total_snfsum_detail1/total_sallcount
				total_listrate.append(i.ltrrate)
				total_ratesum_detail1 = round(sum(total_listrate),2)
				total_ratesum_detail = total_ratesum_detail1/total_sallcount
				total_listtsrate.append(i.tsrate)
				total_tsratesum_detail1 = round(sum(total_listtsrate),2)
				total_tsratesum_detail = total_tsratesum_detail1/total_sallcount
				#total_listamount.append(i.amount)
				#total_amountsum_detail = round(sum(total_listamount),2)
				total_listpel.append(i.pel)
				total_pelsum_detail = round(sum(total_listpel),2)
				total_listcomm.append(i.comm)
				total_commsum_detail1 = round(sum(total_listcomm),2)
				total_commsum_detail = total_commsum_detail1/total_sallcount
				total_listtotal.append(i.net)
				total_totalsum_detail = round(sum(total_listtotal),2)
	   
		elif slug2 == 'all' and slug3 != 'all':
			rows = rpt_dailydata.objects.using(brch).filter( date__gte=slug, date__lte=slug1,centercode=slug3).values_list(
			'date', 'shift','routecode','routename','centercode','centername', 'milk_type', 'qty','ltrs', 'fat', 'snf','ltrrate','tsrate', 'comm','pel','net')
			total_listkgs = []
			total_listltrs = []
			total_listfat = []
			total_listsnf = []
			total_listfat1 = []
			total_listsnf1 = []
			total_listrate = []
			total_listrate1 = []
			total_listtsrate = []
			total_listtsrate1 = []
			#total_listamount = []
			total_listpel = []
			total_listcomm = []
			total_listcomm1 = []
			total_listtotal = []
			total_sall = rpt_dailydata.objects.using(brch).filter( date__gte=slug, date__lte=slug1).distinct()
			total_sallcount = rpt_dailydata.objects.using(brch).filter( date__gte=slug, date__lte=slug1).distinct().count()
			for i in total_sall:
				total_listkgs.append(i.qty)
				total_kgssum_detail = round(sum(total_listkgs),2)
				total_listltrs.append(i.ltrs)
				total_ltrssum_detail = round(sum(total_listltrs),2)
				total_listfat.append(i.fat)
				total_fatsum_detail1 = round(sum(total_listfat),2)
				total_fatsum_detail = total_fatsum_detail1/total_sallcount
				total_listsnf.append(i.snf)
				total_snfsum_detail1 = round(sum(total_listsnf),2)
				total_snfsum_detail = total_snfsum_detail1/total_sallcount
				total_listrate.append(i.ltrrate)
				total_ratesum_detail1 = round(sum(total_listrate),2)
				total_ratesum_detail = total_ratesum_detail1/total_sallcount
				total_listtsrate.append(i.tsrate)
				total_tsratesum_detail1 = round(sum(total_listtsrate),2)
				total_tsratesum_detail = total_tsratesum_detail1/total_sallcount
				#total_listamount.append(i.amount)
				#total_amountsum_detail = round(sum(total_listamount),2)
				total_listpel.append(i.pel)
				total_pelsum_detail = round(sum(total_listpel),2)
				total_listcomm.append(i.comm)
				total_commsum_detail1 = round(sum(total_listcomm),2)
				total_commsum_detail = total_commsum_detail1/total_sallcount
				total_listtotal.append(i.net)
				total_totalsum_detail = round(sum(total_listtotal),2)
		elif slug3 == 'all' and slug2 != 'all':
			rows = rpt_dailydata.objects.using(brch).filter( date__gte=slug, date__lte=slug1,routecode=slug2).values_list(
			'date', 'shift','routecode','routename','centercode','centername', 'milk_type', 'qty','ltrs', 'fat', 'snf','ltrrate','tsrate', 'comm','pel','net')
			total_listkgs = []
			total_listltrs = []
			total_listfat = []
			total_listsnf = []
			total_listfat1 = []
			total_listsnf1 = []
			total_listrate = []
			total_listrate1 = []
			total_listtsrate = []
			total_listtsrate1 = []
			#total_listamount = []
			total_listpel = []
			total_listcomm = []
			total_listcomm1 = []
			total_listtotal = []
			total_sall = rpt_dailydata.objects.using(brch).filter(date__gte=slug, date__lte=slug1).distinct()
			total_sallcount = rpt_dailydata.objects.using(brch).filter(date__gte=slug, date__lte=slug1).distinct().count()
			for i in total_sall:
				total_listkgs.append(i.qty)
				total_kgssum_detail = round(sum(total_listkgs),2)
				total_listltrs.append(i.ltrs)
				total_ltrssum_detail = round(sum(total_listltrs),2)
				total_listfat.append(i.fat)
				total_fatsum_detail1 = round(sum(total_listfat),2)
				total_fatsum_detail = total_fatsum_detail1/total_sallcount
				total_listsnf.append(i.snf)
				total_snfsum_detail1 = round(sum(total_listsnf),2)
				total_snfsum_detail = total_snfsum_detail1/total_sallcount
				total_listrate.append(i.ltrrate)
				total_ratesum_detail1 = round(sum(total_listrate),2)
				total_ratesum_detail = total_ratesum_detail1/total_sallcount
				total_listtsrate.append(i.tsrate)
				total_tsratesum_detail1 = round(sum(total_listtsrate),2)
				total_tsratesum_detail = total_tsratesum_detail1/total_sallcount
				#total_listamount.append(i.amount)
				#total_amountsum_detail = round(sum(total_listamount),2)
				total_listpel.append(i.pel)
				total_pelsum_detail = round(sum(total_listpel),2)
				total_listcomm.append(i.comm)
				total_commsum_detail1 = round(sum(total_listcomm),2)
				total_commsum_detail = total_commsum_detail1/total_sallcount
				total_listtotal.append(i.net)
				total_totalsum_detail = round(sum(total_listtotal),2)
		else:
			rows = rpt_dailydata.objects.using(brch).filter( date__gte=slug, date__lte=slug1,routecode=slug2,centercode=slug3).values_list(
			'date', 'shift','routecode','routename','centercode','centername', 'milk_type', 'qty','ltrs', 'fat', 'snf','ltrrate','tsrate', 'comm','pel','net')
			total_listkgs = []
			total_listltrs = []
			total_listfat = []
			total_listsnf = []
			total_listfat1 = []
			total_listsnf1 = []
			total_listrate = []
			total_listrate1 = []
			total_listtsrate = []
			total_listtsrate1 = []
			#total_listamount = []
			total_listpel = []
			total_listcomm = []
			total_listcomm1 = []
			total_listtotal = []
			total_sall = rpt_dailydata.objects.using(brch).filter( date__gte=slug, date__lte=slug1).distinct()
			total_sallcount = rpt_dailydata.objects.using(brch).filter( date__gte=slug, date__lte=slug1).distinct().count()
			for i in total_sall:
				total_listkgs.append(i.qty)
				total_kgssum_detail = round(sum(total_listkgs),2)
				total_listltrs.append(i.ltrs)
				total_ltrssum_detail = round(sum(total_listltrs),2)
				total_listfat.append(i.fat)
				total_fatsum_detail1 = round(sum(total_listfat),2)
				total_fatsum_detail = total_fatsum_detail1/total_sallcount
				total_listsnf.append(i.snf)
				total_snfsum_detail1 = round(sum(total_listsnf),2)
				total_snfsum_detail = total_snfsum_detail1/total_sallcount
				total_listrate.append(i.ltrrate)
				total_ratesum_detail1 = round(sum(total_listrate),2)
				total_ratesum_detail = total_ratesum_detail1/total_sallcount
				total_listtsrate.append(i.tsrate)
				total_tsratesum_detail1 = round(sum(total_listtsrate),2)
				total_tsratesum_detail = total_tsratesum_detail1/total_sallcount
				#total_listamount.append(i.amount)
				#total_amountsum_detail = round(sum(total_listamount),2)
				total_listpel.append(i.pel)
				total_pelsum_detail = round(sum(total_listpel),2)
				total_listcomm.append(i.comm)
				total_commsum_detail1 = round(sum(total_listcomm),2)
				total_commsum_detail = total_commsum_detail1/total_sallcount
				total_listtotal.append(i.net)
				total_totalsum_detail = round(sum(total_listtotal),2)

	else:
		if slug2 == 'all' and slug3 == 'all':
			rows = rpt_dailydata.objects.filter( date__gte=slug, date__lte=slug1).values_list(
			'date', 'shift','routecode','routename','centercode','centername', 'milk_type', 'qty','ltrs', 'fat', 'snf','ltrrate', 'comm','pel','net')
	   
		elif slug2 == 'all' and slug3 != 'all':
			rows = rpt_dailydata.objects.filter( date__gte=slug, date__lte=slug1,centercode=slug3).values_list(
			'date', 'shift','routecode','routename','centercode','centername', 'milk_type', 'qty','ltrs', 'fat', 'snf','ltrrate', 'comm','pel','net')
		elif slug3 == 'all' and slug2 != 'all':
			rows = rpt_dailydata.objects.filter( date__gte=slug, date__lte=slug1,routecode=slug2).values_list(
			'date', 'shift','routecode','routename','centercode','centername', 'milk_type', 'qty','ltrs', 'fat', 'snf','ltrrate', 'comm','pel','net')
		else:
			rows = rpt_dailydata.objects.filter( date__gte=slug, date__lte=slug1,routecode=slug2,centercode=slug3).values_list(
			'date', 'shift','routecode','routename','centercode','centername', 'milk_type', 'qty','ltrs', 'fat', 'snf','ltrrate', 'comm','pel','net')
	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
			ws.write(row_num, 0, row[0], font_date)
			#ws.write(row_num,10, float(row[8])-float(row[9]))


	rows_end = len(rows)		
	print(rows_end)


	columns1 = ['Total', '', '','', '','', '', total_kgssum_detail, total_ltrssum_detail, total_fatsum_detail, total_snfsum_detail, total_ratesum_detail, total_tsratesum_detail,total_commsum_detail, total_pelsum_detail,total_totalsum_detail]

	for col_num in range(len(columns1)):
		ws.write(rows_end+1, col_num, columns1[col_num], font_style)
	font_style = xlwt.XFStyle()

	wb.save(response)
	return response
	# Module -Reports - masters #1 - Displaying the bankreport excel  report
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Karthik
def excel_download2(request,slug):
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day=1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
   # data = Center.objects.filter(route_number=routecode)
	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="bankdata.xls"'
	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('bankdata', cell_overwrite_ok=True)
	row_num = 0
	font_style = xlwt.XFStyle()
	font_style.font.bold = True
   # font_date = xlwt.XFStyle()
   # font_date.num_format_str = 'D-MMM-YY'
	#columns = ['Routecode','Supervisor','Center code','Center Name','Agent Name','Contact No','Account no','Bank name','Branch/IFSC','Net Amount']
	columns = ['Bankname','Bank fullname','Branch','IfscCode']
	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style)
	font_style = xlwt.XFStyle()
	# x = datetime.strptime(date, "%d/%m/%Y")
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		if slug == 'all':
			rows =  Bank.objects.using(brch).filter().values_list(
				#'route_number','supervisor','centre_code','name','agent_name','mobile','bankno','bankname','branch')
				'name','fullname','branch','ifsc')
		else:
			rows =  Bank.objects.using(brch).filter(name=slug).values_list(
				#'route_number','supervisor','centre_code','name','agent_name','mobile','bankno','bankname','branch')
				'name','fullname','branch','ifsc')
	else:
		if slug == 'all':
			rows =  Bank.objects.filter().values_list(
				#'route_number','supervisor','centre_code','name','agent_name','mobile','bankno','bankname','branch')
				'name','fullname','branch','ifsc')
		else:
			rows =  Bank.objects.filter(name=slug).values_list(
				#'route_number','supervisor','centre_code','name','agent_name','mobile','bankno','bankname','branch')
				'name','fullname','branch','ifsc')

	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
			#ws.write(row_num, 0, row[0], font_date)
	wb.save(response)
	return response
# Module -Reports - Transcations #2 - Displaying the centerwise excel  report
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Karthik
def excel_download3(request):
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day=1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	data = Daily_data.objects.filter( date__gte=start_of_m, date__lte=end_of_m)
	#Daily_data.objects.filter(date__range=[datefrom, dateto], routecode=routecode)
	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="centerwise.xls"'
	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('centerwise', cell_overwrite_ok=True)
	row_num = 0
	font_style = xlwt.XFStyle()
	font_style.font.bold = True
	font_date = xlwt.XFStyle()
	font_date.num_format_str = 'D-MMM-YY'
	columns = ['Center code', 'milk type', 'Route', 'Mobile Number', 'Account Number', 'Bank Name', 'Branch']
	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style)
	font_style = xlwt.XFStyle()
	# x = datetime.strptime(date, "%d/%m/%Y")
	rows = Center.objects.filter( date__gte=start_of_m, date__lte=end_of_m).values_list(
		'centre_code','milk_type', 'routecode', 'mobile', 'bankno','bankname', 'branch')
	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
			ws.write(row_num, 0, row[0], font_date)
	wb.save(response)
	return response

# Module -Reports - Transcations #3 - Displaying the milkbill excel  report
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Karthik
def excel_download4(request,slug,slug1,slug2,slug3):
	try:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		#data = Daily_data.objects.filter( date__gte=slug, date__lte=slug1,routecode=slug2,centercode=slug3)
		#Daily_data.objects.filter(date__range=[datefrom, dateto], routecode=routecode)
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="milkbill.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('milk bill', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MMM-YY'
		columns = ['Date', 'Shift', 'Milk type', 'KGS','LTRS', 'FAT', 'SNF','Rate\Ltr', 'Amount', 'P&I EXP','Total' ]
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		if slug2 == 'all' and slug3 == 'all':
			rows = Daily_data.objects.filter( date__gte=slug, date_lte=slug1).values_list(
			'date', 'shift', 'milk_type', 'qty','ltrs', 'fat', 'snf', 'ltrrate','amount','pel','net')
			total_listkgs = []
			total_listltrs = []
			total_listfat = []
			total_listsnf = []
			total_listrate = []
			total_listamount = []
			total_listpel = []
			total_listtotal = []
			total_sall = Daily_data.objects.filter(date__gte=slug, date_lte=slug1).distinct()
			for i in total_sall:
				total_listkgs.append(i.qty)
				total_kgssum_detail = round(sum(total_listkgs),2)
				total_listltrs.append(i.ltrs)
				total_ltrssum_detail = round(sum(total_listltrs),2)
				total_listfat.append(i.fat)
				total_fatsum_detail = round(sum(total_listfat),2)
				total_listsnf.append(i.snf)
				total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate.append(i.ltrrate)
				total_ratesum_detail = round(sum(total_listrate),2)
				total_listamount.append(i.amount)
				total_amountsum_detail = round(sum(total_listamount),2)
				total_listpel.append(i.pel)
				total_pelsum_detail = round(sum(total_listpel),2)
				total_listtotal.append(i.net)
				total_totalsum_detail = round(sum(total_listtotal),2)
	   
		elif slug2 == 'all' and slug3 != 'all':
			rows = Daily_data.objects.filter( date__gte=slug, date_lte=slug1,centercode=slug3).values_list(
			'date', 'shift', 'milk_type', 'qty','ltrs', 'fat', 'snf', 'ltrrate','amount','pel','net')
			total_listkgs = []
			total_listltrs = []
			total_listfat = []
			total_listsnf = []
			total_listrate = []
			total_listamount = []
			total_listpel = []
			total_listtotal = []
			total_sall = Daily_data.objects.filter(date__gte=slug, date_lte=slug1,centercode=slug3).distinct()
			for i in total_sall:
				total_listkgs.append(i.qty)
				total_kgssum_detail = round(sum(total_listkgs),2)
				total_listltrs.append(i.ltrs)
				total_ltrssum_detail = round(sum(total_listltrs),2)
				total_listfat.append(i.fat)
				total_fatsum_detail = round(sum(total_listfat),2)
				total_listsnf.append(i.snf)
				total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate.append(i.ltrrate)
				total_ratesum_detail = round(sum(total_listrate),2)
				total_listamount.append(i.amount)
				total_amountsum_detail = round(sum(total_listamount),2)
				total_listpel.append(i.pel)
				total_pelsum_detail = round(sum(total_listpel),2)
				total_listtotal.append(i.net)
				total_totalsum_detail = round(sum(total_listtotal),2)
		elif slug3 == 'all' and slug2 != 'all':
			rows = Daily_data.objects.filter( date__gte=slug, date_lte=slug1,routecode=slug2).values_list(
			'date', 'shift', 'milk_type', 'qty','ltrs', 'fat', 'snf', 'ltrrate','amount','pel','net')
			total_listkgs = []
			total_listltrs = []
			total_listfat = []
			total_listsnf = []
			total_listrate = []
			total_listamount = []
			total_listpel = []
			total_listtotal = []
			total_sall = Daily_data.objects.filter(date__gte=slug, date_lte=slug1,routecode=slug2).distinct()
			for i in total_sall:
				total_listkgs.append(i.qty)
				total_kgssum_detail = round(sum(total_listkgs),2)
				total_listltrs.append(i.ltrs)
				total_ltrssum_detail = round(sum(total_listltrs),2)
				total_listfat.append(i.fat)
				total_fatsum_detail = round(sum(total_listfat),2)
				total_listsnf.append(i.snf)
				total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate.append(i.ltrrate)
				total_ratesum_detail = round(sum(total_listrate),2)
				total_listamount.append(i.amount)
				total_amountsum_detail = round(sum(total_listamount),2)
				total_listpel.append(i.pel)
				total_pelsum_detail = round(sum(total_listpel),2)
				total_listtotal.append(i.net)
				total_totalsum_detail = round(sum(total_listtotal),2)
		else:
			rows = Daily_data.objects.filter( date__gte=slug, date_lte=slug1,routecode=slug2,centercode=slug3).values_list(
			'date', 'shift', 'milk_type', 'qty','ltrs', 'fat', 'snf', 'ltrrate','amount','pel','net')
			total_listkgs = []
			total_listltrs = []
			total_listfat = []
			total_listsnf = []
			total_listrate = []
			total_listamount = []
			total_listpel = []
			total_listtotal = []
			total_sall = Daily_data.objects.filter(date__gte=slug, date_lte=slug1,routecode=slug2,centercode=slug3).distinct()
			for i in total_sall:
				total_listkgs.append(i.qty)
				total_kgssum_detail = round(sum(total_listkgs),2)
				total_listltrs.append(i.ltrs)
				total_ltrssum_detail = round(sum(total_listltrs),2)
				total_listfat.append(i.fat)
				total_fatsum_detail = round(sum(total_listfat),2)
				total_listsnf.append(i.snf)
				total_snfsum_detail = round(sum(total_listsnf),2)
				total_listrate.append(i.ltrrate)
				total_ratesum_detail = round(sum(total_listrate),2)
				total_listamount.append(i.amount)
				total_amountsum_detail = round(sum(total_listamount),2)
				total_listpel.append(i.pel)
				total_pelsum_detail = round(sum(total_listpel),2)
				total_listtotal.append(i.net)
				total_totalsum_detail = round(sum(total_listtotal),2)
				#columns = ['Date', 'Shift', 'Milk type', 'KGS','LTRS', 'FAT', 'SNF','Rate\Ltr', 'Amount', 'P&I EXP','Total' ]
			#for col_num in range(len(columns)):
			 #   ws.write(row_num, col_num, columns[col_num], font_style)
			#font_style = xlwt.XFStyle()
		
		#total_listkgs = []
		#total_listltrs = []
		#total_listfat = []
		#total_listsnf = []
		#total_listrate = []
		#total_listamount = []
		#total_listpel = []
		#total_listtotal = []
		#total_sall = Daily_data.objects.filter(date__gte=slug, date_lte=slug1).distinct()
		#for i in total_sall:
	#		total_listkgs.append(i.qty)
	#		total_kgssum_detail = round(sum(total_listkgs),2)
	#		total_listltrs.append(i.ltrs)
	#		total_ltrssum_detail = round(sum(total_listltrs),2)
	#		total_listfat.append(i.fat)
	#		total_fatsum_detail = round(sum(total_listfat),2)
	#		total_listsnf.append(i.snf)
	#		total_snfsum_detail = round(sum(total_listsnf),2)
	#		total_listrate.append(i.ltrrate)
	#		total_ratesum_detail = round(sum(total_listrate),2)
	#		total_listamount.append(i.amount)
	#		total_amountsum_detail = round(sum(total_listamount),2)
	#		total_listpel.append(i.pel)
	#		total_pelsum_detail = round(sum(total_listpel),2)
	#		total_listtotal.append(i.net)
	#		total_totalsum_detail = round(sum(total_listtotal),2)
	#
		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
				#ws.write(row_num,11, float(row[8])-float(row[9]))
				
		rows_end = len(rows)		
		print(rows_end)


		columns1 = ['Total', '', '', total_kgssum_detail, total_ltrssum_detail, total_fatsum_detail, total_snfsum_detail, total_ratesum_detail, total_amountsum_detail, total_pelsum_detail, total_totalsum_detail ]

		for col_num in range(len(columns)):
			ws.write(rows_end+1, col_num, columns1[col_num], font_style)
		font_style = xlwt.XFStyle()
		


		wb.save(response)
		return response

	except Exception as err:
		messages.error(request,"Under Construction")
		return render(request,'milkbill.html',locals())

def excel_download5(request,slug,slug1,slug2,slug3):
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day=1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	data = RPT_Daywisesreport.objects.filter( date__gte=slug, date__lte=slug1)
	#Daily_data.objects.filter(date__range=[datefrom, dateto], routecode=routecode)
	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="daywise.xls"'
	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('day_wise', cell_overwrite_ok=True)
	row_num = 0
	font_style = xlwt.XFStyle()
	font_style.font.bold = True
	font_date = xlwt.XFStyle()
	font_date.num_format_str = 'D-MMM-YY'
	columns = ['Date', 'Shift', 'Milk type', 'QtyKGS','QtyLTRS','FAT(KG)','SNF(KG)', 'AvgFAT', 'AvgSNF', 'Gross Amount' ]
	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style)
	font_style = xlwt.XFStyle()
	# x = datetime.strptime(date, "%d/%m/%Y")
	if slug2 == 'all' and slug3 == 'all':
		rows = RPT_Daywisesreport.objects.filter( date__gte=slug, date__lte=slug1).values_list(
		'date', 'shift', 'milk_type', 'sqty','sltrs', 'kfat', 'ksnf','afat','asnf', 'gamount')
		total_listkgs = []
		total_listltrs = []
		total_listfat = []
		total_listsnf = []
		total_listafat = []
		total_listasnf = []
		total_listgamt = []
		total_sall = RPT_Daywisesreport.objects.filter(date__gte=slug, date__lte=slug1).distinct()
		for i in total_sall:
			total_listkgs.append(i.sqty)
			total_kgssum_detail = round(sum(total_listkgs),2)
			total_listltrs.append(i.sltrs)
			total_ltrssum_detail = round(sum(total_listltrs),2)
			total_listfat.append(i.kfat)
			total_fatsum_detail = round(sum(total_listfat),2)
			total_listsnf.append(i.ksnf)
			total_snfsum_detail = round(sum(total_listsnf),2)
			total_listafat.append(i.afat)
			total_afatsum_detail = round(sum(total_listafat),2)
			total_listasnf.append(i.asnf)
			total_asnfsum_detail = round(sum(total_listasnf),2)
			total_listgamt.append(i.gamount)
			total_amountsum_detail = round(sum(total_listgamt),2)
			#total_listtotal.append(i.net)
			#total_totalsum_detail = round(sum(total_listtotal),2)
	elif slug2 == 'all' and slug3 != 'all':
		rows = RPT_Daywisesreport.objects.filter( date__gte=slug, date__lte=slug1,milk_type=slug3).values_list(
		'date', 'shift', 'milk_type', 'sqty','sltrs', 'kfat', 'ksnf','afat','asnf', 'gamount')
		total_listkgs = []
		total_listltrs = []
		total_listfat = []
		total_listsnf = []
		total_listafat = []
		total_listasnf = []
		total_listgamt = []
		total_sall = RPT_Daywisesreport.objects.filter(date__gte=slug, date__lte=slug1,milk_type=slug3).distinct()
		for i in total_sall:
			total_listkgs.append(i.sqty)
			total_kgssum_detail = round(sum(total_listkgs),2)
			total_listltrs.append(i.sltrs)
			total_ltrssum_detail = round(sum(total_listltrs),2)
			total_listfat.append(i.kfat)
			total_fatsum_detail = round(sum(total_listfat),2)
			total_listsnf.append(i.ksnf)
			total_snfsum_detail = round(sum(total_listsnf),2)
			total_listafat.append(i.afat)
			total_afatsum_detail = round(sum(total_listafat),2)
			total_listasnf.append(i.asnf)
			total_asnfsum_detail = round(sum(total_listasnf),2)
			total_listgamt.append(i.gamount)
			total_amountsum_detail = round(sum(total_listgamt),2)
	elif slug3 == 'all' and slug2 != 'all':
		rows = RPT_Daywisesreport.objects.filter( date__gte=slug, date__lte=slug1,shift=slug2).values_list(
		'date', 'shift', 'milk_type', 'sqty','sltrs', 'kfat', 'ksnf','afat','asnf', 'gamount')
		total_listkgs = []
		total_listltrs = []
		total_listfat = []
		total_listsnf = []
		total_listafat = []
		total_listasnf = []
		total_listgamt = []
		total_sall = RPT_Daywisesreport.objects.filter(date__gte=slug, date__lte=slug1,shift=slug2).distinct()
		for i in total_sall:
			total_listkgs.append(i.sqty)
			total_kgssum_detail = round(sum(total_listkgs),2)
			total_listltrs.append(i.sltrs)
			total_ltrssum_detail = round(sum(total_listltrs),2)
			total_listfat.append(i.kfat)
			total_fatsum_detail = round(sum(total_listfat),2)
			total_listsnf.append(i.ksnf)
			total_snfsum_detail = round(sum(total_listsnf),2)
			total_listafat.append(i.afat)
			total_afatsum_detail = round(sum(total_listafat),2)
			total_listasnf.append(i.asnf)
			total_asnfsum_detail = round(sum(total_listasnf),2)
			total_listgamt.append(i.gamount)
			total_amountsum_detail = round(sum(total_listgamt),2)
	else:
		rows = RPT_Daywisesreport.objects.filter( date__gte=slug, date__lte=slug1,milk_type=slug3,shift=slug2).values_list(
		'date', 'shift', 'milk_type', 'sqty','sltrs', 'kfat', 'ksnf','afat','asnf', 'gamount')
		total_listkgs = []
		total_listltrs = []
		total_listfat = []
		total_listsnf = []
		total_listafat = []
		total_listasnf = []
		total_listgamt = []
		total_sall = RPT_Daywisesreport.objects.filter(date__gte=slug, date__lte=slug1,milk_type=slug3,shift=slug2).distinct()
		for i in total_sall:
			total_listkgs.append(i.sqty)
			total_kgssum_detail = round(sum(total_listkgs),2)
			total_listltrs.append(i.sltrs)
			total_ltrssum_detail = round(sum(total_listltrs),2)
			total_listfat.append(i.kfat)
			total_fatsum_detail = round(sum(total_listfat),2)
			total_listsnf.append(i.ksnf)
			total_snfsum_detail = round(sum(total_listsnf),2)
			total_listafat.append(i.afat)
			total_afatsum_detail = round(sum(total_listafat),2)
			total_listasnf.append(i.asnf)
			total_asnfsum_detail = round(sum(total_listasnf),2)
			total_listgamt.append(i.gamount)
			total_amountsum_detail = round(sum(total_listgamt),2)

	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
			ws.write(row_num, 0, row[0], font_date)
			#ws.write(row_num,10, float(row[8])-float(row[9]))


	rows_end = len(rows)		
	print(rows_end)


	columns1 = ['Total', '', '', total_kgssum_detail, total_ltrssum_detail, total_fatsum_detail, total_snfsum_detail, total_afatsum_detail, total_asnfsum_detail, total_amountsum_detail]

	for col_num in range(len(columns)):
		ws.write(rows_end+1, col_num, columns1[col_num], font_style)
	font_style = xlwt.XFStyle()

	wb.save(response)
	return response

def excel_downloadbank6(request,slug,slug1,slug2,slug3):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="bankabstract.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('bankwise', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True

		calral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug2),str(slug3),str(slug2),str(slug3))
		csral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.centre_code = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug2),str(slug3),str(slug1),str(slug2),str(slug3))
		calrs = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug2),str(slug3),str(slug),str(slug2),str(slug3))
		csrs = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s'  and C.centre_code = '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug2),str(slug3),str(slug1),str(slug),str(slug2),str(slug3))
		columns = ['Routecode','Supervisor','Center code','Center Name','Contact No','Agent Name','Account no','Bank name','Branch','IFSC','Net Amount']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		total_net_amount = 0
		if slug == 'all' and slug1 == 'all':
			rows = rpt_bankwise.objects.using(brch).raw(calral)
			row_num = row_num + 1
			for r in rows:
				ws.write(row_num, 0, r.route_number, font_style)
				ws.write(row_num, 1, r.supervisor, font_style)
				ws.write(row_num, 2, r.centre_code, font_style)
				ws.write(row_num, 3, r.name, font_style)
				ws.write(row_num, 4, r.mobile, font_style)
				ws.write(row_num, 5, r.agent_name, font_style)
				ws.write(row_num, 6, r.bankno, font_style)
				ws.write(row_num, 7, r.bankname, font_style)
				ws.write(row_num, 8, r.branch, font_style)
				ws.write(row_num, 9, r.ifsc, font_style)
				ws.write(row_num, 10, r.net, font_style)
				total_net_amount = total_net_amount + r.net;
				row_num = row_num + 1
			columns1 = ['Total', '', '','', '','', '','', '','', total_net_amount ]
		elif slug == 'all' and slug1 != 'all':
			rows = rpt_bankwise.objects.using(brch).raw(csral)
			row_num = row_num + 1
			for r in rows:
				ws.write(row_num, 0, r.route_number, font_style)
				ws.write(row_num, 1, r.supervisor, font_style)
				ws.write(row_num, 2, r.centre_code, font_style)
				ws.write(row_num, 3, r.name, font_style)
				ws.write(row_num, 4, r.mobile, font_style)
				ws.write(row_num, 5, r.agent_name, font_style)
				ws.write(row_num, 6, r.bankno, font_style)
				ws.write(row_num, 7, r.bankname, font_style)
				ws.write(row_num, 8, r.branch, font_style)
				ws.write(row_num, 9, r.ifsc, font_style)
				ws.write(row_num, 10, r.net, font_style)
				total_net_amount = total_net_amount + r.net;
				row_num = row_num + 1
			columns1 = ['Total', '', '','', '','', '','', '','', total_net_amount ]
		elif slug1 == 'all' and slug != 'all': 
			rows = rpt_bankwise.objects.using(brch).raw(calrs)
			row_num = row_num + 1
			for r in rows:
				ws.write(row_num, 0, r.route_number, font_style)
				ws.write(row_num, 1, r.supervisor, font_style)
				ws.write(row_num, 2, r.centre_code, font_style)
				ws.write(row_num, 3, r.name, font_style)
				ws.write(row_num, 4, r.mobile, font_style)
				ws.write(row_num, 5, r.agent_name, font_style)
				ws.write(row_num, 6, r.bankno, font_style)
				ws.write(row_num, 7, r.bankname, font_style)
				ws.write(row_num, 8, r.branch, font_style)
				ws.write(row_num, 9, r.ifsc, font_style)
				ws.write(row_num, 10, r.net, font_style)
				total_net_amount = total_net_amount + r.net;
				row_num = row_num + 1
			columns1 = ['Total', '', '','', '','', '','', '','', total_net_amount ]
		else:
			rows = rpt_bankwise.objects.using(brch).raw(csrs)
			row_num = row_num + 1
			for r in rows:
				ws.write(row_num, 0, r.route_number, font_style)
				ws.write(row_num, 1, r.supervisor, font_style)
				ws.write(row_num, 2, r.centre_code, font_style)
				ws.write(row_num, 3, r.name, font_style)
				ws.write(row_num, 4, r.mobile, font_style)
				ws.write(row_num, 5, r.agent_name, font_style)
				ws.write(row_num, 6, r.bankno, font_style)
				ws.write(row_num, 7, r.bankname, font_style)
				ws.write(row_num, 8, r.branch, font_style)
				ws.write(row_num, 9, r.ifsc, font_style)
				ws.write(row_num, 10, r.net, font_style)
				total_net_amount = total_net_amount + r.net;
				row_num = row_num + 1
			columns1 = ['Total', '', '','', '','', '','', '','', total_net_amount ]
			for col_num in range(len(columns)):
				ws.write(row_num, col_num, columns1[col_num], font_style)
	wb.save(response)
	return response




def excel_download6(request,slug,slug1,slug2,slug3):
	#try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			#data = Daily_data.objects.filter( date_gte=start_of_m, date_lte=end_of_m)
			response = HttpResponse(content_type='application/ms-excel')
			response['Content-Disposition'] = 'attachment; filename="bankabstract.xls"'
			wb = xlwt.Workbook(encoding='utf-8')
			ws = wb.add_sheet('bankwise', cell_overwrite_ok=True)
			row_num = 0
			font_style = xlwt.XFStyle()
			font_style.font.bold = True
			#font_date = xlwt.XFStyle()
			#font_date.num_format_str = 'D-MMM-YY'
			
			cursor = connection.cursor()
						
			directQ ="delete from %s.school_rpt_excel_bankwise"%(str(brch))
			cursor.execute(directQ)
			cursor1 = connection.cursor() 
			cursor2 = connection.cursor() 
			cursor3 = connection.cursor()      
			
			QUERY12 ="insert into %s.school_rpt_excel_bankwise(route_number,supervisor,centre_code,name,mobile,agent_name,bankno,ddate,bankname,branch,ifsc,amount) select route_number,supervisor,centre_code,name,mobile,agent_name,bankno,D.date,bankname,C.branch,ifsc,round(sum(D.net),3)  from %s.school_center C, %s.school_daily_data D where centre_code = D.centercode and D.date between '%s' and '%s' group by D.centercode"%(str(brch),str(brch),str(brch),str(slug2),str(slug3))
			additionupdate = "update %s.school_rpt_excel_bankwise B,%s.school_additions A set B.amount = B.amount+COALESCE(A.cartage,0)+COALESCE(A.autofine,0)+COALESCE(A.aarrears,0)+COALESCE(A.aothers,0)+COALESCE(A.commission,0)-COALESCE(A.cattlefeed,0)-COALESCE(A.stores,0)-COALESCE(A.medicine,0)-COALESCE(A.stationary,0)-COALESCE(A.emtcharges,0)-COALESCE(A.seed,0)-COALESCE(A.insurance,0)-COALESCE(A.rarrears,0)-COALESCE(A.rothers,0) where B.centre_code = A.centercode and A.date between '%s'and '%s' "%(str(brch),str(brch),str(slug2),str(slug3))
			loanupdate = "update %s.school_rpt_excel_bankwise B,%s.school_loanbillsdata L set B.amount = B.amount-COALESCE(L.installment_amt,0) where B.centre_code= L.centercode and L.idate between '%s' and '%s' "%(str(brch),str(brch),str(slug2),str(slug3))
			print(QUERY12)
			print(additionupdate)
			print(loanupdate)
			cursor1.execute(QUERY12) 
			cursor1.execute(additionupdate)
			cursor1.execute(loanupdate)
			


			#calral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug2),str(slug3),str(slug2),str(slug3))
			#print(calral)
			#csral = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.centre_code = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug2),str(slug3),str(slug1),str(slug2),str(slug3))
			#calrs = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C  join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug2),str(slug3),str(slug),str(slug2),str(slug3))
			#csrs = " select  C.id id,route_number route_number,supervisor supervisor,centre_code centre_code,name name,mobile mobile,agent_name agent_name,bankno bankno,D.date ddate,bankname bankname,C.branch branch,ifsc ifsc,round(sum(D.net),3) amount,COALESCE(L.installment_amt,0) lamount,round(COALESCE((sum(D.net)-COALESCE(L.installment_amt,0)),0),3) net  from school_center C join school_daily_data D on C.centre_code = D.centercode and D.date between '%s' and '%s'  and C.centre_code = '%s' and C.route_number = '%s' left join school_loanbillsdata L on C.centre_code = L.centercode and L.idate between '%s' and '%s' group by D.centercode"%(str(slug2),str(slug3),str(slug1),str(slug),str(slug2),str(slug3))
			columns = ['Routecode','Supervisor','Center code','Center Name','Contact No','Agent Name','Account no','Bank name','Branch','IFSC','Net Amount']
			for col_num in range(len(columns)):
				ws.write(row_num, col_num, columns[col_num], font_style)
			font_style = xlwt.XFStyle()
			# x = datetime.strptime(date, "%d/%m/%Y")
			total_gamtsum_detail = 0
			if slug == 'all' and slug1 == 'all':
				rows = rpt_bankwise.objects.using(brch).filter(ddate__range = [slug2,slug3]).values_list(
				'route_number','supervisor','centre_code','name','mobile','agent_name','bankno','bankname','branch','ifsc','amount')
				total_listgamt = []
				total_sall = rpt_bankwise.objects.using(brch).filter(ddate__range=[slug2, slug3]).distinct()
				for i in total_sall:
					total_listgamt.append(i.amount)
					total_gamtsum_detail = round(sum(total_listgamt),2)

				#rows = (route_number,amount,total_gamtsum_detail)
			elif slug == 'all' and slug1 != 'all':
				rows = rpt_bankwise.objects.using(brch).filter(ddate__range=[slug2, slug3],centre_code = slug1).values_list(
				'route_number','supervisor','centre_code','name','mobile','agent_name','bankno','bankname','branch','ifsc','amount')
				total_listgamt = []
				total_sall = rpt_bankwise.objects.using(brch).filter(ddate__range=[slug2, slug3],centre_code = slug1).distinct()
				for i in total_sall:
					total_listgamt.append(i.amount)
					total_gamtsum_detail = round(sum(total_listgamt),2)


			elif slug1 == 'all' and slug != 'all': 
				rows = rpt_bankwise.objects.using(brch).filter(ddate__range=[slug2, slug3],route_number = slug).values_list(
				'route_number','supervisor','centre_code','name','mobile','agent_name','bankno','bankname','branch','ifsc','amount')

				total_listgamt = []
				total_sall = rpt_bankwise.objects.using(brch).filter(ddate__range=[slug2, slug3],route_number = slug).distinct()
				for i in total_sall:
					total_listgamt.append(i.amount)
					total_gamtsum_detail = round(sum(total_listgamt),2)

			else:
				rows = rpt_bankwise.objects.using(brch).filter(ddate__range=[slug2, slug3],route_number = slug,centre_code = slug1).values_list(
				'route_number','supervisor','centre_code','name','mobile','agent_name','bankno','bankname','branch','ifsc','amount')
				total_listgamt = []
				total_sall = rpt_bankwise.objects.using(brch).filter(ddate__range=[slug2, slug3],route_number = slug,centre_code = slug1).distinct()
				for i in total_sall:
					total_listgamt.append(i.amount)
					total_gamtsum_detail = round(sum(total_listgamt),2)
			
			#rows =[route_number,'total']
			for row in rows:
				row_num += 1
				for col_num in range(len(row)):
					ws.write(row_num, col_num, row[col_num], font_style)
					#ws.write(row_num, 0, row[0], font_date)

			rows_end = len(rows)		
			print(rows_end)


			columns1 = ['Total', '', '','', '','', '','', '','', total_gamtsum_detail ]

			for col_num in range(len(columns)):
				ws.write(rows_end+1, col_num, columns1[col_num], font_style)
			font_style = xlwt.XFStyle()

			wb.save(response)
			return response
	#except Exception as err:
	#	messages.error(request,"Under Construction")
	#	return render(request,'bank_wise.html',locals())

def excel_download7(request):
	today = date.today()
	start_of_yr = today.replace(day=1, month=4)
	end_of_yr = start_of_yr + relativedelta(months=11, days=31) - timedelta(days=1)
	board = Cloan.objects.filter( date__gte=start_of_yr, date__lte=end_of_yr)
	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="dailydata.xls"'
	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Dailydata', cell_overwrite_ok=True)
	row_num = 0
	font_style = xlwt.XFStyle()
	font_style.font.bold = True
	font_date = xlwt.XFStyle()
	font_date.num_format_str = 'D-MMM-YY'
	columns = ['Date', 'Shift','Center code ', 'Milk type', 'KGS', 'FAT', 'SNF','Amount','LTRS','Rate\Ltr' ]
	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style)
	font_style = xlwt.XFStyle()
	# x = datetime.strptime(date, "%d/%m/%Y")\\\\\\\\\\
	rows = Daily_data.objects.filter( date__gte=start_of_yr, date__lte=end_of_yr).values_list(
		'date', 'shift','centercode', 'milk_type', 'qty', 'fat', 'snf', 'amount','ltrs','ltrrate')
	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
			ws.write(row_num, 0, row[0], font_date)
	wb.save(response)
	return response

# Module -Reports - masters #3 - Displaying the center_report excel  report
# Created by - 2020-12-14 @ Charan
# Modified by - 2020-12-14 @ Charan 
# Modified by - 2020-12-14 @ Charan
def excel_downloadcenter(request,slug,slug1,slug2):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		data = Center.objects.using(brch).filter()
	
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="centerreport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('center', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		#font_date.num_format_str = 'D-MMM-YY'
		columns = ['Code','Name','Mobile','Email','Formula','Route','Category','Milk Type','Agent','Supervisor','Village',
					'Address','CM Comm','CM Cartage','BM Comm','BM Cartage','Fat Machine in Use','Distance','Photo','Bank Account No',
					'Bank Name','IFSC Code','Branch']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		if slug == "all" and slug1 == "all" and slug2 == "all":
			rows = Center.objects.using(brch).filter().values_list(
				'centre_code','name','mobile','Email','Formula','route_number','category','milk_type','agent_name','supervisor','village_name',
				'address','CM_comm_amount','CM_Cartage_amount','BM_comm_amount','BM_Cartage_amount','Fat','Distance',
				'Document','bankno','bankname','ifsc','branch')
		elif slug1 != "all" and slug == "all" and slug2 == "all":
			rows = Center.objects.using(brch).filter(centre_code=slug1).values_list(
				'centre_code','name','mobile','Email','Formula','route_number','category','milk_type','agent_name','supervisor','village_name',
				'address','CM_comm_amount','CM_Cartage_amount','BM_comm_amount','BM_Cartage_amount','Fat','Distance',
				'Document','bankno','bankname','ifsc','branch')
		elif slug1 == "all" and slug != "all" and slug2 == "all":
			rows = Center.objects.using(brch).filter(route_number=slug).values_list(
				'centre_code','name','mobile','Email','Formula','route_number','category','milk_type','agent_name','supervisor','village_name',
				'address','CM_comm_amount','CM_Cartage_amount','BM_comm_amount','BM_Cartage_amount','Fat','Distance',
				'Document','bankno','bankname','ifsc','branch')
		elif slug1 != "all" and slug != "all" and slug2 == "all":
			rows = Center.objects.using(brch).filter(centre_code=slug1,route_number=slug).values_list(
				'centre_code','name','mobile','Email','Formula','route_number','category','milk_type','agent_name','supervisor','village_name',
				'address','CM_comm_amount','CM_Cartage_amount','BM_comm_amount','BM_Cartage_amount','Fat','Distance',
				'Document','bankno','bankname','ifsc','branch')
		elif slug1 == "all" and slug == "all" and slug2 == "withdetails":
			rows = Center.objects.using(brch).filter().distinct().exclude(bankname='Select').exclude(branch='Select').exclude(ifsc='Select').exclude(bankno='').values_list(
				'centre_code','name','mobile','Email','Formula','route_number','category','milk_type','agent_name','supervisor','village_name',
				'address','CM_comm_amount','CM_Cartage_amount','BM_comm_amount','BM_Cartage_amount','Fat','Distance',
				'Document','bankno','bankname','ifsc','branch')
		elif slug1 != "all" and slug == "all" and slug2 == "withdetails":
			rows = Center.objects.using(brch).filter(centre_code=slug1).distinct().exclude(bankname='Select').exclude(branch='Select').exclude(ifsc='Select').exclude(bankno='').values_list(
				'centre_code','name','mobile','Email','Formula','route_number','category','milk_type','agent_name','supervisor','village_name',
				'address','CM_comm_amount','CM_Cartage_amount','BM_comm_amount','BM_Cartage_amount','Fat','Distance',
				'Document','bankno','bankname','ifsc','branch')
		elif slug1 == "all" and slug != "all" and slug2 == "withdetails":
			rows = Center.objects.using(brch).filter(route_number=slug).distinct().exclude(bankname='Select').exclude(branch='Select').exclude(ifsc='Select').exclude(bankno='').values_list(
				'centre_code','name','mobile','Email','Formula','route_number','category','milk_type','agent_name','supervisor','village_name',
				'address','CM_comm_amount','CM_Cartage_amount','BM_comm_amount','BM_Cartage_amount','Fat','Distance',
				'Document','bankno','bankname','ifsc','branch')
		elif slug1 != "all" and slug != "all" and slug2 == "withdetails":
			rows = Center.objects.using(brch).filter(route_number=slug,centre_code=slug1).distinct().exclude(bankname='Select').exclude(branch='Select').exclude(ifsc='Select').exclude(bankno='').values_list(
				'centre_code','name','mobile','Email','Formula','route_number','category','milk_type','agent_name','supervisor','village_name',
				'address','CM_comm_amount','CM_Cartage_amount','BM_comm_amount','BM_Cartage_amount','Fat','Distance',
				'Document','bankno','bankname','ifsc','branch')
		elif slug1 == "all" and slug == "all" and slug2 == "withoutdetails":
			rows = Center.objects.using(brch).filter(bankname = 'Select').distinct().values_list(
				'centre_code','name','mobile','Email','Formula','route_number','category','milk_type','agent_name','supervisor','village_name',
				'address','CM_comm_amount','CM_Cartage_amount','BM_comm_amount','BM_Cartage_amount','Fat','Distance',
				'Document','bankno','bankname','ifsc','branch')
		elif slug1 != "all" and slug == "all" and slug2 == "withoutdetails":
			rows = Center.objects.using(brch).filter(centre_code=slug1,bankname = 'Select').distinct().values_list(
				'centre_code','name','mobile','Email','Formula','route_number','category','milk_type','agent_name','supervisor','village_name',
				'address','CM_comm_amount','CM_Cartage_amount','BM_comm_amount','BM_Cartage_amount','Fat','Distance',
				'Document','bankno','bankname','ifsc','branch')
		elif slug1 == "all" and slug != "all" and slug2 == "withoutdetails":
			rows = Center.objects.using(brch).filter(route_number=slug,bankname='Select').distinct().values_list(
				'centre_code','name','mobile','Email','Formula','route_number','category','milk_type','agent_name','supervisor','village_name',
				'address','CM_comm_amount','CM_Cartage_amount','BM_comm_amount','BM_Cartage_amount','Fat','Distance',
				'Document','bankno','bankname','ifsc','branch')
		elif slug1 != "all" and slug != "all" and slug2 == "withoutdetails":
			rows = Center.objects.using(brch).filter(route_number=slug,centre_code=slug1,bankname = 'Select').distinct().values_list(
				'centre_code','name','mobile','Email','Formula','route_number','category','milk_type','agent_name','supervisor','village_name',
				'address','CM_comm_amount','CM_Cartage_amount','BM_comm_amount','BM_Cartage_amount','Fat','Distance',
				'Document','bankno','bankname','ifsc','branch')

		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
		wb.save(response)
		return response
	else:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		data = Center.objects.filter()
	
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="centerreport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('center', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		#font_date.num_format_str = 'D-MMM-YY'
		columns = ['Code','Name','Mobile','Email','Formula','Route','Category','Milk Type','Agent','Supervisor','Village',
					'Address','CM Comm','CM Cartage','BM Comm','BM Cartage','Fat Machine in Use','Distance','Photo','Bank Account No',
					'Bank Name','IFSC Code','Branch']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		if slug == 'all' and slug1 == 'all':
			rows = Center.objects.filter().values_list(
				'centre_code','name','mobile','Email','Formula','route_number','category','milk_type','agent_name','supervisor','village_name',
				'address','CM_comm_amount','CM_Cartage_amount','BM_comm_amount','BM_Cartage_amount','Fat','Distance',
				'Document','bankno','bankname','ifsc','branch')
		elif slug == 'all' and slug1 != 'all':
			rows = Center.objects.filter(centre_code=slug1).values_list(
				'centre_code','name','mobile','Email','Formula','route_number','category','milk_type','agent_name','supervisor','village_name',
				'address','CM_comm_amount','CM_Cartage_amount','BM_comm_amount','BM_Cartage_amount','Fat','Distance',
				'Document','bankno','bankname','ifsc','branch')
		elif slug != 'all' and slug1 == 'all':
			rows = Center.objects.filter(route_number=slug).values_list(
				'centre_code','name','mobile','Email','Formula','route_number','category','milk_type','agent_name','supervisor','village_name',
				'address','CM_comm_amount','CM_Cartage_amount','BM_comm_amount','BM_Cartage_amount','Fat','Distance',
				'Document','bankno','bankname','ifsc','branch')
		else:    
			rows = Center.objects.filter(route_number=slug,centre_code=slug1).values_list(
				'centre_code','name','mobile','Email','Formula','route_number','category','milk_type','agent_name','supervisor','village_name',
				'address','CM_comm_amount','CM_Cartage_amount','BM_comm_amount','BM_Cartage_amount','Fat','Distance',
				'Document','bankno','bankname','ifsc','branch')
		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
		wb.save(response)
		return response


def excel_downloadcenterbank(request,slug,slug1):
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day=1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	data = Center.objects.filter()
   
	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="centerreportbank.xls"'
	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('center', cell_overwrite_ok=True)
	row_num = 0
	font_style = xlwt.XFStyle()
	font_style.font.bold = True
	font_date = xlwt.XFStyle()
	#font_date.num_format_str = 'D-MMM-YY'
	columns = ['Code','Name','Agent','Route','Milk Type','Mobile','Email']
	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style)
	font_style = xlwt.XFStyle()
	# x = datetime.strptime(date, "%d/%m/%Y")
	if slug == 'all' and slug1 == 'all':
		rows = Center.objects.filter().values_list(
			 'centre_code','name','agent_name','route_number','milk_type','mobile','Email')
	elif slug == 'all' and slug1 != 'all':
		 rows = Center.objects.filter(centre_code=slug1).values_list(
			 'centre_code','name','agent_name','route_number','milk_type','mobile','Email')
	elif slug != 'all' and slug1 == 'all':
		 rows = Center.objects.filter(route_number=slug).values_list(
			 'centre_code','name','agent_name','route_number','milk_type','mobile','Email')
	else:    
		 rows = Center.objects.filter(route_number=slug,centre_code=slug1).values_list(
			 'centre_code','name','agent_name','route_number','milk_type','mobile','Email')
	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
			ws.write(row_num, 0, row[0], font_date)
	wb.save(response)
	return response


def excel_downloadbranch(request,slug):
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day=1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	data = Branch.objects.filter()
   
	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="branchreport.xls"'
	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('branch', cell_overwrite_ok=True)
	row_num = 0
	font_style = xlwt.XFStyle()
	font_style.font.bold = True
	font_date = xlwt.XFStyle()
	font_date.num_format_str = 'D-MMM-YY'
	columns = ['Branch Code', 'Branch Name', 'Contact No','Email','Address','Pic Code']
	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style)
	font_style = xlwt.XFStyle()
	# x = datetime.strptime(date, "%d/%m/%Y")
	if slug == 'all':
		rows = Branch.objects.filter().values_list( 'code','name','contno','email','address','pin' )
	else:
		rows = Branch.objects.filter(code = slug).values_list( 'code','name','contno','email','address','pin' ) 
	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
			ws.write(row_num, 0, row[0], font_date)
	wb.save(response)
	return response

def excel_downloadroute(request,slug):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		data = Route.objects.using(brch).filter()
	
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="routereport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('route', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MM-YYYY'
		columns = ['start date','End Date','Route Code','Route Name','isActive']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		if slug == 'all':
			rows = Route.objects.using(brch).filter().values_list('date_from','date_to','Route_number','Route_name','active', )
		else:
			rows = Route.objects.using(brch).filter(Route_number = slug).values_list('date_from','date_to','Route_number','Route_name','active', )
		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
				ws.write(row_num, 1, row[1], font_date)
		wb.save(response)
		return response
	else:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		data = Route.objects.filter()
	
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="routereport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('route', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MM-YYYY'
		columns = ['start date','End Date','Route Code','Route Name','isActive']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		if slug == 'all':
			rows = Route.objects.using(brch).filter().values_list('date_from','date_to','Route_number','Route_name','active', )
		else:
			rows = Route.objects.using(brch).filter(Route_number = slug).values_list('date_from','date_to','Route_number','Route_name','active', )
		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
				ws.write(row_num, 1, row[1], font_date)
		wb.save(response)
		return response

def excel_downloadadditionsreport(request,slug):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		data = Route.objects.using(brch).filter()
	
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="additionsreport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('route', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MM-YYYY'
		columns = ['centercode','cartage','autofine','aarrears','aothers',  'commission','cattlefeed','stores',
                        'medicine', 'stationary', 'emtcharges',  'seed', 'insurance', 'rarrears', 'rothers' ]
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		if slug == 'all':
			rows = Additions.objects.using(brch).filter().values_list('centercode','cartage','autofine','aarrears','aothers',  'commission','cattlefeed','stores',
                        'medicine', 'stationary', 'emtcharges',  'seed', 'insurance', 'rarrears', 'rothers' )
		else:
			rows = Additions.objects.using(brch).filter(centercode = slug).values_list('centercode','cartage','autofine','aarrears','aothers',  'commission','cattlefeed','stores',
                        'medicine', 'stationary', 'emtcharges',  'seed', 'insurance', 'rarrears', 'rothers' )
		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				#ws.write(row_num, 0, row[0], font_date)
				#ws.write(row_num, 1, row[1], font_date)
		wb.save(response)
		return response
	else:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		data = Route.objects.filter()
	
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="routereport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('route', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MM-YYYY'
		columns = ['start date','End Date','Route Code','Route Name','isActive']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		if slug == 'all':
			rows = Route.objects.using(brch).filter().values_list('date_from','date_to','Route_number','Route_name','active', )
		else:
			rows = Route.objects.using(brch).filter(Route_number = slug).values_list('date_from','date_to','Route_number','Route_name','active', )
		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
				ws.write(row_num, 1, row[1], font_date)
		wb.save(response)
		return response

def excel_downloadsupervisor(request,slug):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		data = Supervisor.objects.filter()
	   
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="supervisorreport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('supervisor', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		#font_date.num_format_str = 'D-MMM-YY'
		columns = ['Supervisor Code','Supervisor Name','Route 1','Route2','Route3']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		if slug == 'all':
			rows = Supervisor.objects.using(brch).filter().values_list( 'code','name','Route_attached','Route_attached1','Route_attached2' )
		else:
			rows = Supervisor.objects.using(brch).filter(code = slug).values_list( 'code','name','Route_attached','Route_attached1','Route_attached2' )
		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
		wb.save(response)
		return response
	else:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		data = Supervisor.objects.filter()
	   
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="supervisorreport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('supervisor', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		#font_date.num_format_str = 'D-MMM-YY'
		columns = ['Supervisor Code','Supervisor Name','Route 1','Route2','Route3']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		if slug == 'all':
			rows = Supervisor.objects.filter().values_list( 'code','name','Route_attached','Route_attached1','Route_attached2' )
		else:
			rows = Supervisor.objects.filter(code = slug).values_list( 'code','name','Route_attached','Route_attached1','Route_attached2' )
		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
		wb.save(response)
		return response
def excel_downloadagent(request,slug):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		data = Agent.objects.filter()
	   
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="agentreport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('agent', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		#font_date.num_format_str = 'D-MMM-YY'
		columns = ['Agent Code','Agent Name','Route 1','Route2','Route3']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		if slug == 'all':
			rows = Agent.objects.using(brch).filter().values_list( 'code','name','Route_attached','Route_attached1','Route_attached2' )
		else:
			rows = Agent.objects.using(brch).filter(code = slug).values_list( 'code','name','Route_attached','Route_attached1','Route_attached2')
		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
		wb.save(response)
		return response
	else:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		data = Agent.objects.filter()
	   
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="agentreport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('agent', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		#font_date.num_format_str = 'D-MMM-YY'
		columns = ['Agent Code','Agent Name','Route 1','Route2','Route3']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		if slug == 'all':
			rows = Agent.objects.filter().values_list( 'code','name','Route_attached','Route_attached1','Route_attached2' )
		else:
			rows = Agent.objects.filter(code = slug).values_list( 'code','name','Route_attached','Route_attached1','Route_attached2')
		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
		wb.save(response)
		return response
def excel_downloaddepartment(request,slug):
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day=1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	data = Department.objects.filter()
   
	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="departmentreport.xls"'
	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('department', cell_overwrite_ok=True)
	row_num = 0
	font_style = xlwt.XFStyle()
	font_style.font.bold = True
	font_date = xlwt.XFStyle()
	font_date.num_format_str = 'D-MMM-YY'
	columns = ['Department Code','Department Name']
	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style)
	font_style = xlwt.XFStyle()
	# x = datetime.strptime(date, "%d/%m/%Y")
	if slug == 'all':
		rows = Department.objects.filter().values_list( 'dcode','dname')
	else:
		rows = Department.objects.filter(dcode = slug).values_list( 'dcode','dname')
	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
			ws.write(row_num, 0, row[0], font_date)
	wb.save(response)
	return response

def excel_downloadrole(request,slug):
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day=1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	data = Role.objects.filter()
   
	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="rolereport.xls"'
	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('role', cell_overwrite_ok=True)
	row_num = 0
	font_style = xlwt.XFStyle()
	font_style.font.bold = True
	font_date = xlwt.XFStyle()
	font_date.num_format_str = 'D-MMM-YY'
	columns = ['Role Code','Role Name',]
	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style)
	font_style = xlwt.XFStyle()
	# x = datetime.strptime(date, "%d/%m/%Y")
	if slug == 'all':
		rows = Role.objects.filter().values_list( 'rcode','rname' )
	else:
		rows = Role.objects.filter(rcode = slug).values_list( 'rcode','rname' )
	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
			ws.write(row_num, 0, row[0], font_date)
	wb.save(response)
	return response

def excel_downloadoffice(request,slug):
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day=1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	data = Office.objects.filter()
   
	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="officereport.xls"'
	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('office', cell_overwrite_ok=True)
	row_num = 0
	font_style = xlwt.XFStyle()
	font_style.font.bold = True
	font_date = xlwt.XFStyle()
	font_date.num_format_str = 'D-MMM-YY'
	columns = ['Office Code','Office Name']
	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style)
	font_style = xlwt.XFStyle()
	# x = datetime.strptime(date, "%d/%m/%Y")
	if slug == 'all':
		rows = Office.objects.filter().values_list( 'ocode','oname')
	else:
		rows = Office.objects.filter(ocode=slug).values_list( 'ocode','oname')
	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
			ws.write(row_num, 0, row[0], font_date)
	wb.save(response)
	return response

def excel_downloadvillage(request,slug):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		data = Village.objects.using(brch).filter()
	
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="villagereport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('agent', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		#font_date.num_format_str = 'D-MMM-YY'
		columns = ['Village Code','Village Name','Route Code']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		if slug == 'all':
			rows = Village.objects.using(brch).filter().values_list('code','name','Route_attached' )
		else:
			rows = Village.objects.using(brch).filter(code=slug).values_list('code','name','Route_attached' )
		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
		wb.save(response)
		return response
	else:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		data = Village.objects.filter()
	
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="villagereport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('agent', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		#font_date.num_format_str = 'D-MMM-YY'
		columns = ['Village Code','Village Name','Route Code']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		if slug == 'all':
			rows = Village.objects.filter().values_list('code','name','Route_attached' )
		else:
			rows = Village.objects.filter(code=slug).values_list('code','name','Route_attached' )
		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
		wb.save(response)
		return response


def excel_downloadmilktype(request,slug):
	
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day=1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	data = Milktype.objects.filter()

	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="milktypereport.xls"'
	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('milktype', cell_overwrite_ok=True)
	row_num = 0
	font_style = xlwt.XFStyle()
	font_style.font.bold = True
	font_date = xlwt.XFStyle()
	font_date.num_format_str = 'D-MMM-YY'
	columns = ['MilkType','Description']
	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style)
	font_style = xlwt.XFStyle()
	# x = datetime.strptime(date, "%d/%m/%Y")
	if slug == 'all':
		rows = Milktype.objects.filter().values_list( 'code','name')
	else:
		rows = Milktype.objects.filter(code = slug).values_list( 'code','name')
	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
			ws.write(row_num, 0, row[0], font_date)
	wb.save(response)
	return response
	

def excel_downloadcategory(request,slug):
	
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day=1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	data = Category.objects.filter()

	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="categoryreport.xls"'
	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('category', cell_overwrite_ok=True)
	row_num = 0
	font_style = xlwt.XFStyle()
	font_style.font.bold = True
	font_date = xlwt.XFStyle()
	font_date.num_format_str = 'D-MMM-YY'
	columns = ['Category Code','Category Name']
	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style)
	font_style = xlwt.XFStyle()
	# x = datetime.strptime(date, "%d/%m/%Y")
	if slug == 'all':
		rows = Category.objects.filter().values_list( 'code','name')
	else:
		rows = Category.objects.filter(code = slug).values_list( 'code','name')
	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
			ws.write(row_num, 0, row[0], font_date)
	wb.save(response)
	return response
	


def excel_downloadformula(request,slug):
	
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day=1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	data = Formulae.objects.filter()

	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="formulareport.xls"'
	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('formula', cell_overwrite_ok=True)
	row_num = 0
	font_style = xlwt.XFStyle()
	font_style.font.bold = True
	font_date = xlwt.XFStyle()
	font_date.num_format_str = 'D-MMM-YY'
	columns = ['Formula','Description']
	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style)
	font_style = xlwt.XFStyle()
	# x = datetime.strptime(date, "%d/%m/%Y")
	if slug == 'all':
		rows = Formulae.objects.filter().values_list('name','desc' )
	else:
		rows = Formulae.objects.filter(name = slug).values_list('name','desc' )
	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
			ws.write(row_num, 0, row[0], font_date)
	wb.save(response)
	return response
	
def excel_downloadbmcenter(request,slug,slug1,slug2,slug3,slug4):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		data = BufalloMilkCenter.objects.filter()
	
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="bufallomilkcenterreport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('bmcenter', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MM-YYYY'

		first = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		print(first)
		second = "select M.id id, centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s'"%(str(slug),str(slug1),str(slug4))
		third = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and centercode = '%s' "%(str(slug),str(slug1),str(slug3))
		fourth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s' and centercode = '%s' "%(str(slug),str(slug1),str(slug4),str(slug3))
		fifth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		sixth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		seventh = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		eigth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		columns =  [ 'Date From','Date To','Centercode','Rate calc','Commision Type','Milktype','MinFat','MaxFat','MinSnf','MaxSnf','TSRate','Fixed Value','Snf Value','Snf Deduction','Fat From','FatTo','Penalty In Rs','Deduction Calculation','Premium','Amount','SourMilk','Curd','Min Rate','Sourmilkrate'
		]
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		
		if slug2 == 'all' and slug3 == 'all' and slug4 == 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(first)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.centercode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 == 'all' and slug3 == 'all' and slug4 != 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(second)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.centercode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 == 'all' and slug3 != 'all' and slug4 == 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(third)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.centercode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 == 'all' and slug3 != 'all' and slug4 != 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(fourth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.centercode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 != 'all' and slug3 == 'all' and slug4 == 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(fifth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.centercode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 != 'all' and slug3 == 'all' and slug4 != 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(sixth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.centercode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 != 'all' and slug3 != 'all' and slug4 == 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(seventh)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.centercode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		else:
			rows = rpt_bufallomilk.objects.using(brch).raw(eigth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.centercode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
			for col_num in range(len(columns)):
				ws.write(row_num, col_num, columns[col_num], font_style)
				ws.write(row_num, 0, columns[0], font_date)
				ws.write(row_num, 1, columns[1], font_date)
	wb.save(response)
	return response

def excel_downloadbmcategory(request,slug,slug1,slug2,slug3,slug4):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		data = BufalloMilkCenter.objects.filter()
	
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="bufallomilkcategoryreport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('bmcategory', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MM-YYYY'

		first = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		second = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s' and C.milk_type = '%s' "%(str(slug),str(slug1),str(slug4))
		third = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		fourth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'  and C.milk_type = '%s'"%(str(slug),str(slug1),str(slug4))
		fifth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		sixth= "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'  and C.milk_type = '%s'"%(str(slug),str(slug1),str(slug4))
		seventh = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		eigth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'  and C.milk_type = '%s'"%(str(slug),str(slug1),str(slug4))
		columns =  [ 'Date From','Date To','Category','Rate calc','Commision Type','Milktype','MinFat','MaxFat','MinSnf','MaxSnf','TSRate','Fixed Value','Snf Value','Snf Deduction','Fat From','FatTo','Penalty In Rs','Deduction Calculation','Premium','Amount','SourMilk','Curd','Min Rate','Sourmilkrate'
		]
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		
		if slug2 == 'all' and slug3 == 'all' and slug4 == 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(first)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.category, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 == 'all' and slug3 == 'all' and slug4 != 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(second)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.category, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 == 'all' and slug3 != 'all' and slug4 == 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(third)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.category, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 == 'all' and slug3 != 'all' and slug4 != 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(fourth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.category, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 != 'all' and slug3 == 'all' and slug4 == 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(fifth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.category, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 != 'all' and slug3 == 'all' and slug4 != 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(sixth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.category, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 != 'all' and slug3 != 'all' and slug4 == 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(seventh)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.category, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		else:
			rows = rpt_bufallomilk.objects.using(brch).raw(eigth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.category, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
			for col_num in range(len(columns)):
				ws.write(row_num, col_num, columns[col_num], font_style)
				ws.write(row_num, 0, columns[0], font_date)
				ws.write(row_num, 1, columns[1], font_date)
	wb.save(response)
	return response

def excel_downloadbmroute(request,slug,slug1,slug2,slug3,slug4):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		data = BufalloMilkCenter.objects.filter()
	
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="bufallomilkroutereport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('bmroute', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MM-YYYY'

		first = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		second = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(slug),str(slug1),str(slug4))
		third = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		fourth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(slug),str(slug1),str(slug4))
		fifth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' "%(str(slug),str(slug1),str(slug2))
		sixth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' and B.milk_type = '%s' "%(str(slug),str(slug1),str(slug2),str(slug4))
		seventh = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' "%(str(slug),str(slug1),str(slug2))
		eigth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' and B.milk_type = '%s'"%(str(slug),str(slug1),str(slug2),str(slug4))
		columns =  [ 'Date From','Date To','Routecode','Rate calc','Commision Type','Milktype','MinFat','MaxFat','MinSnf','MaxSnf','TSRate','Fixed Value','Snf Value','Snf Deduction','Fat From','FatTo','Penalty In Rs','Deduction Calculation','Premium','Amount','SourMilk','Curd','Min Rate','Sourmilkrate'
		]
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		
		if slug2 == 'all' and slug3 == 'all' and slug4 == 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(first)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.Routecode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 == 'all' and slug3 == 'all' and slug4 != 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(second)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.Routecode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 == 'all' and slug3 != 'all' and slug4 == 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(third)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.Routecode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 == 'all' and slug3 != 'all' and slug4 != 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(fourth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.Routecode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 != 'all' and slug3 == 'all' and slug4 == 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(fifth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.Routecode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 != 'all' and slug3 == 'all' and slug4 != 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(sixth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.Routecode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 != 'all' and slug3 != 'all' and slug4 == 'all' :
			rows = rpt_bufallomilk.objects.using(brch).raw(seventh)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.Routecode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		else:
			rows = rpt_bufallomilk.objects.using(brch).raw(eigth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.Routecode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
			for col_num in range(len(columns)):
				ws.write(row_num, col_num, columns[col_num], font_style)
				ws.write(row_num, 0, columns[0], font_date)
				ws.write(row_num, 1, columns[1], font_date)
	wb.save(response)
	return response

def excel_downloadcmcenter(request,slug,slug1,slug2,slug3,slug4):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		data = BufalloMilkCenter.objects.filter()
	
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="cowmilkcenterreport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('cmcenter', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MM-YYYY'

		first = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		print(first)
		second = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s'"%(str(slug),str(slug1),str(slug4))
		third = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and centercode = '%s' "%(str(slug),str(slug1),str(slug3))
		fourth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s' and centercode = '%s' "%(str(slug),str(slug1),str(slug4),str(slug3))
		fifth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		sixth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s' "%(str(slug),str(slug1),str(slug4))
		seventh = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and centercode = '%s' "%(str(slug),str(slug1),str(slug3))
		eigth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'  D.milk_type = '%s' and centercode = '%s'"%(str(slug),str(slug1),str(slug4),str(slug3))
		columns =  [ 'Date From','Date To','Centercode','Rate calc','Commision Type','Milktype','MinFat','MaxFat','MinSnf','MaxSnf','TSRate','Fixed Value','Snf Value','Snf Deduction','Fat From','FatTo','Penalty In Rs','Deduction Calculation','Premium','Amount','SourMilk','Curd','Min Rate','Sourmilkrate'
		]
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		
		if slug2 == 'all' and slug3 == 'all' and slug4 == 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(first)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.centercode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 == 'all' and slug3 == 'all' and slug4 != 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(second)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.centercode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 == 'all' and slug3 != 'all' and slug4 == 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(third)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.centercode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 == 'all' and slug3 != 'all' and slug4 != 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(fourth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.centercode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 != 'all' and slug3 == 'all' and slug4 == 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(fifth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.centercode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 != 'all' and slug3 == 'all' and slug4 != 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(sixth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.centercode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 != 'all' and slug3 != 'all' and slug4 == 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(seventh)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.centercode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		else:
			rows = rpt_cowmilk.objects.using(brch).raw(eigth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.centercode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
			for col_num in range(len(columns)):
				ws.write(row_num, col_num, columns[col_num], font_style)
				ws.write(row_num, 0, columns[0], font_date)
				ws.write(row_num, 1, columns[1], font_date)
	wb.save(response)
	return response


def excel_downloadcmcategory(request,slug,slug1,slug2,slug3,slug4):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		data = BufalloMilkCenter.objects.filter()
	
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="cowmilkcategoryreport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('cmcategory', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MM-YYYY'

		first = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		print(first)
		second = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s' and C.milk_type = '%s' "%(str(slug),str(slug1),str(slug4))
		third = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		fourth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'and C.milk_type = '%s'"%(str(slug),str(slug1),str(slug4))
		fifth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		sixth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'and C.milk_type = '%s'"%(str(slug),str(slug1),str(slug4))
		seventh = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		eigth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s' and C.milk_type = '%s'"%(str(slug),str(slug1),str(slug4))		
		columns =  [ 'Date From','Date To','Category','Rate calc','Commision Type','Milktype','MinFat','MaxFat','MinSnf','MaxSnf','TSRate','Fixed Value','Snf Value','Snf Deduction','Fat From','FatTo','Penalty In Rs','Deduction Calculation','Premium','Amount','SourMilk','Curd','Min Rate','Sourmilkrate'
		]
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		
		if slug2 == 'all' and slug3 == 'all' and slug4 == 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(first)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.category, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 == 'all' and slug3 == 'all' and slug4 != 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(second)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.category, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 == 'all' and slug3 != 'all' and slug4 == 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(third)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.category, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 == 'all' and slug3 != 'all' and slug4 != 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(fourth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.category, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 != 'all' and slug3 == 'all' and slug4 == 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(fifth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.category, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 != 'all' and slug3 == 'all' and slug4 != 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(sixth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.category, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 != 'all' and slug3 != 'all' and slug4 == 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(seventh)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.category, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		else:
			rows = rpt_cowmilk.objects.using(brch).raw(eigth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.category, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
			for col_num in range(len(columns)):
				ws.write(row_num, col_num, columns[col_num], font_style)
				ws.write(row_num, 0, columns[0], font_date)
				ws.write(row_num, 1, columns[1], font_date)
	wb.save(response)
	return response

def excel_downloadcmroute(request,slug,slug1,slug2,slug3,slug4):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		data = BufalloMilkCenter.objects.filter()
	
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="cowmilkroutereport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('cmroute', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MM-YYYY'

		first = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		second = "select  B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(slug),str(slug1),str(slug4))
		third = "select  B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(slug),str(slug1))
		fourth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(slug),str(slug1),str(slug4))
		fifth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s'"%(str(slug),str(slug1),str(slug2))
		sixth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'and Routecode = '%s' and B.milk_type = '%s'"%(str(slug),str(slug1),str(slug2),str(slug4))
		seventh = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s'"%(str(slug),str(slug1),str(slug2))
		eigth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' and B.milk_type = '%s'"%(str(slug),str(slug1),str(slug2),str(slug4))

		columns =  [ 'Date From','Date To','Routecode','Rate calc','Commision Type','Milktype','MinFat','MaxFat','MinSnf','MaxSnf','TSRate','Fixed Value','Snf Value','Snf Deduction','Fat From','FatTo','Penalty In Rs','Deduction Calculation','Premium','Amount','SourMilk','Curd','Min Rate','Sourmilkrate'
		]
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		
		if slug2 == 'all' and slug3 == 'all' and slug4 == 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(first)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.Routecode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 == 'all' and slug3 == 'all' and slug4 != 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(second)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.Routecode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 == 'all' and slug3 != 'all' and slug4 == 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(third)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.Routecode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 == 'all' and slug3 != 'all' and slug4 != 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(fourth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.Routecode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 != 'all' and slug3 == 'all' and slug4 == 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(fifth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.Routecode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 != 'all' and slug3 == 'all' and slug4 != 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(sixth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.Routecode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		elif slug2 != 'all' and slug3 != 'all' and slug4 == 'all' :
			rows = rpt_cowmilk.objects.using(brch).raw(seventh)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.Routecode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
		else:
			rows = rpt_cowmilk.objects.using(brch).raw(eigth)
			row_num = row_num+1
			for r in rows:
				ws.write(row_num, 0, r.from_date, font_date)
				ws.write(row_num, 1, r.to_date, font_date)
				ws.write(row_num, 2, r.Routecode, font_style)
				ws.write(row_num, 3, r.rate_calculation, font_style)
				ws.write(row_num, 4, r.commission_type, font_style)
				ws.write(row_num, 5, r.milk_type, font_style)
				ws.write(row_num, 6, r.min_fat, font_style)
				ws.write(row_num, 7, r.max_fat, font_style)
				ws.write(row_num, 8, r.min_SNF, font_style)
				ws.write(row_num, 9, r.max_SNF, font_style)
				ws.write(row_num, 10, r.tsrate, font_style)
				ws.write(row_num, 11, r.fixed_value, font_style)
				ws.write(row_num, 12, r.snf_value, font_style)
				ws.write(row_num, 13, r.snf_deduction, font_style)
				ws.write(row_num, 14, r.tsrate, font_style)
				ws.write(row_num, 15, r.fat_from, font_style)
				ws.write(row_num, 16, r.fat_to, font_style)
				ws.write(row_num, 17, r.penalty_in_RS, font_style)
				ws.write(row_num, 18, r.deduction_calculation, font_style)
				ws.write(row_num, 19, r.premium, font_style)
				ws.write(row_num, 20, r.amount, font_style)
				ws.write(row_num, 21, r.sour_milk, font_style)
				ws.write(row_num, 22, r.curd, font_style)
				ws.write(row_num, 23, r.min_rate, font_style)
				ws.write(row_num, 24, r.sour_milkrate, font_style)
				row_num = row_num + 1
			for col_num in range(len(columns)):
				ws.write(row_num, col_num, columns[col_num], font_style)
				ws.write(row_num, 0, columns[0], font_date)
				ws.write(row_num, 1, columns[1], font_date)
	wb.save(response)
	return response
	
def excel_milkcollection(request,slug,slug1,slug2,slug3,slug4):
	#try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			today = date.today()
			t_m = datetime.datetime.now().month
			start_of_m = today.replace(day=1, month=t_m)
			end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
			#data = Daily_data.objects.filter( date_gte=start_of_m, date_lte=end_of_m)
			response = HttpResponse(content_type='application/ms-excel')
			response['Content-Disposition'] = 'attachment; filename="milkcollectionreport.xls"'
			wb = xlwt.Workbook(encoding='utf-8')
			ws = wb.add_sheet('milkcollection', cell_overwrite_ok=True)
			row_num = 0
			font_style = xlwt.XFStyle()
			font_style.font.bold = True
			font_date = xlwt.XFStyle()
			font_date.num_format_str = 'D-MM-YYYY'

			cursor = connection.cursor()
						
			directQ ="delete from %s.school_rpt_consolidatedreport"%(str(brch))
			cursor.execute(directQ)
			cursor1 = connection.cursor() 
			cursor2 = connection.cursor() 
			if slug4 == "Branch":
				milkbranch = "insert into %s.school_rpt_consolidatedreport(date,Shift,Milktype,centercode,branch,centername,routecode,routename,kgs,Ltrs,Fat,Snf,afat,asnf,gamount,net,RateLtr,tsrate,ltrtsrate,kgtsrate,pel) select date,shift,milk_type,centercode,branch,centername,routecode,routename,round(sum(qty),2),round(sum(ltrs),2),round(sum(fat),2),round(sum(snf),2),round(avg(fat),2),round(avg(snf),2),round(sum(amount),2),round((sum(amount)+sum(pel)),2),round(ltrrate,2),tsrate,round(avg(tsrate),2),round((avg(tsrate)*1.03),2),round(sum(pel),2) from %s.school_daily_data D where branch = D.branch and D.date between '%s' and '%s' group by D.branch "%(str(brch),str(brch),str(slug),str(slug1))
				a = " select count(distinct branch)  from %s.school_rpt_consolidatedreport "%(str(brch)) 
			elif slug4 == "Date":
				milkbranch = "insert into %s.school_rpt_consolidatedreport(date,Shift,Milktype,centercode,branch,centername,routecode,routename,kgs,Ltrs,Fat,Snf,afat,asnf,gamount,net,RateLtr,tsrate,ltrtsrate,kgtsrate,pel) select date,shift,milk_type,centercode,branch,centername,routecode,routename,round(sum(qty),2),round(sum(ltrs),2),round(sum(fat),2),round(sum(snf),2),round(avg(fat),2),round(avg(snf),2),round(sum(amount),2),round((sum(amount)+sum(pel)),2),round(ltrrate,2),tsrate,round(avg(tsrate),2),round((avg(tsrate)*1.03),2),round(sum(pel),2) from %s.school_daily_data D where date = D.date and D.date between '%s' and '%s' group by D.date "%(str(brch),str(brch),str(slug),str(slug1))
				a = " select count(distinct date)  from %s.school_rpt_consolidatedreport "%(str(brch))
			elif slug4 == "Center":
				milkbranch = "insert into %s.school_rpt_consolidatedreport(date,Shift,Milktype,centercode,branch,centername,routecode,routename,kgs,Ltrs,Fat,Snf,afat,asnf,gamount,net,RateLtr,tsrate,ltrtsrate,kgtsrate,pel) select date,shift,milk_type,centercode,branch,centername,routecode,routename,round(sum(qty),2),round(sum(ltrs),2),round(sum(fat),2),round(sum(snf),2),round(avg(fat),2),round(avg(snf),2),round(sum(amount),2),round((sum(amount)+sum(pel)),2),round(ltrrate,2),tsrate,round(avg(tsrate),2),round((avg(tsrate)*1.03),2),round(sum(pel),2) from %s.school_daily_data D where centercode = D.centercode and D.date between '%s' and '%s' group by D.centercode "%(str(brch),str(brch),str(slug),str(slug1))
				a = " select count(distinct centercode)  from %s.school_rpt_consolidatedreport "%(str(brch)) 
			elif slug4 == "Route":
				milkbranch = "insert into %s.school_rpt_consolidatedreport(date,Shift,Milktype,centercode,branch,centername,routecode,routename,kgs,Ltrs,Fat,Snf,afat,asnf,gamount,net,RateLtr,tsrate,ltrtsrate,kgtsrate,pel) select date,shift,milk_type,centercode,branch,centername,routecode,routename,round(sum(qty),2),round(sum(ltrs),2),round(sum(fat),2),round(sum(snf),2),round(avg(fat),2),round(avg(snf),2),round(sum(amount),2),round((sum(amount)+sum(pel)),2),round(ltrrate,2),tsrate,round(avg(tsrate),2),round((avg(tsrate)*1.03),2),round(sum(pel),2) from %s.school_daily_data D where routecode = D.routecode and D.date between '%s' and '%s' group by D.routecode "%(str(brch),str(brch),str(slug),str(slug1))
				a = " select count(distinct routecode)  from %s.school_rpt_consolidatedreport "%(str(brch)) 
			print(milkbranch)
			cursor1.execute(milkbranch) 
			print('@4021',a)
			cursor2.execute(a)
			datacount2 = cursor2.fetchall()
			for row in datacount2:
				valuescount2=row[0]

			
			columns = ['Date','Branch','Shift','MilkType','Centercode','Centername','Routecode','Routename','Qty(Kgs)','Qty(Ltrs)','Fat','Snf','Avg Fat','Avg Snf','Gross Amount','RateLtr','Tsrate','LtrTsRate','KgTsrate','Pel']
			for col_num in range(len(columns)):
				ws.write(row_num, col_num, columns[col_num], font_style)
			font_style = xlwt.XFStyle()
			
			total_kgssum_detail = 0
			total_ltrssum_detail = 0
			total_afatsum_detail1 = 0
			total_asnfsum_detail1 = 0
			total_fatsum_detail = 0
			total_snfsum_detail = 0
			total_ratesum_detail = 0
			total_pelsum_detail = 0
			total_gamtsum_detail = 0
			total_tsrate_detail = 0
			total_ltrtsrate_detail = 0
			total_kgtsrate_detail = 0
			total_netamount_detail = 0
			if slug2 == 'all' and slug3 == 'all':
				rows = RPT_consolidatedreport.objects.using(brch).filter(date__range = [slug,slug1]).values_list(
				'date','branch','Shift','Milktype','centercode','centername','routecode','routename','kgs','Ltrs','Fat','Snf','afat','asnf','gamount','RateLTR','tsrate','ltrtsrate','kgtsrate','pel')
				total_listkgs = []
				total_listgamt = []
				total_listfat = []
				total_listltrs = []
				total_listsnf = []
				total_listafat = []
				total_listasnf = []
				total_listrate =[]
				total_listpel = []
				total_tsrate = []
				total_ltrtsrate = []
				total_netamount = []
				total_kgtsrate = []
				total_kgsall = RPT_consolidatedreport.objects.using(brch).filter(date__range=[slug, slug]).distinct()
				valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(date__range = [slug,slug1]).distinct().count()
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listltrs),4)
						total_listafat.append(i.afat)
						total_afatsum_detail = round(sum(total_listafat),2)
						total_afatsum_detail1 = total_afatsum_detail/valuescount2
						total_listasnf.append(i.asnf)
						total_asnfsum_detail = round(sum(total_listasnf),2)
						total_asnfsum_detail1 = total_asnfsum_detail/valuescount2
						total_listfat.append(i.Fat)
						total_fatsum_detail = round(sum(total_listfat),3)
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
						total_listrate.append(i.RateLTR)
						total_ratesum_detail = round(sum(total_listrate),2)/valuescount2
						total_listpel.append(i.pel)
						total_pelsum_detail = round(sum(total_listpel),2)
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
						total_tsrate.append(i.tsrate)
						total_tsrate_detail = round(sum(total_tsrate),2)/valuescount2
						total_ltrtsrate.append(i.ltrtsrate)
						total_ltrtsrate_detail = round(sum(total_ltrtsrate),2)/valuescount2
						total_kgtsrate.append(i.kgtsrate)
						total_kgtsrate_detail = round(sum(total_kgtsrate),2)/valuescount2
						total_netamount.append(i.net)
						total_netamount_detail = round(sum(total_netamount),2)
			elif slug2 == 'all' and slug3 != 'all':
				rows = RPT_consolidatedreport.objects.using(brch).filter(centercode = slug3).values_list(
				'date','branch','Shift','Milktype','centercode','centername','routecode','routename','kgs','Ltrs','Fat','Snf','afat','asnf','gamount','RateLTR','tsrate','ltrtsrate','kgtsrate','pel')
				total_listkgs = []
				total_listgamt = []
				total_listfat = []
				total_listltrs = []
				total_listsnf = []
				total_listafat = []
				total_listasnf = []
				total_listrate =[]
				total_listpel = []
				total_tsrate = []
				total_ltrtsrate = []
				total_netamount = []
				total_kgtsrate = []
				total_kgsall = RPT_consolidatedreport.objects.using(brch).filter(centercode = slug3).distinct()
				valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3).distinct().count()
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listltrs),4)
						total_listafat.append(i.afat)
						total_afatsum_detail = round(sum(total_listafat),2)
						total_afatsum_detail1 = total_afatsum_detail/valuescount2
						total_listasnf.append(i.asnf)
						total_asnfsum_detail = round(sum(total_listasnf),2)
						total_asnfsum_detail1 = total_asnfsum_detail/valuescount2
						total_listfat.append(i.Fat)
						total_fatsum_detail = round(sum(total_listfat),3)
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
						total_listrate.append(i.RateLTR)
						total_ratesum_detail = round(sum(total_listrate),2)/valuescount2
						total_listpel.append(i.pel)
						total_pelsum_detail = round(sum(total_listpel),2)
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
						total_tsrate.append(i.tsrate)
						total_tsrate_detail = round(sum(total_tsrate),2)/valuescount2
						total_ltrtsrate.append(i.ltrtsrate)
						total_ltrtsrate_detail = round(sum(total_ltrtsrate),2)/valuescount2
						total_kgtsrate.append(i.kgtsrate)
						total_kgtsrate_detail = round(sum(total_kgtsrate),2)/valuescount2
						total_netamount.append(i.net)
						total_netamount_detail = round(sum(total_netamount),2)		
			elif slug2 != 'all' and slug3 == 'all': 
				rows = RPT_consolidatedreport.objects.using(brch).filter(routecode=slug2).values_list(
				'date','branch','Shift','Milktype','centercode','centername','routecode','routename','kgs','Ltrs','Fat','Snf','afat','asnf','gamount','RateLTR','tsrate','ltrtsrate','kgtsrate','pel')
				
				total_listkgs = []
				total_listgamt = []
				total_listfat = []
				total_listltrs = []
				total_listsnf = []
				total_listafat = []
				total_listasnf = []
				total_listrate =[]
				total_listpel = []
				total_tsrate = []
				total_ltrtsrate = []
				total_netamount = []
				total_kgtsrate = []
				total_kgsall = RPT_consolidatedreport.objects.using(brch).filter(routecode = slug2).distinct()
				valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(routecode=slug2).distinct().count()
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listltrs),4)
						total_listafat.append(i.afat)
						total_afatsum_detail = round(sum(total_listafat),2)
						total_afatsum_detail1 = total_afatsum_detail/valuescount2
						total_listasnf.append(i.asnf)
						total_asnfsum_detail = round(sum(total_listasnf),2)
						total_asnfsum_detail1 = total_asnfsum_detail/valuescount2
						total_listfat.append(i.Fat)
						total_fatsum_detail = round(sum(total_listfat),3)
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
						total_listrate.append(i.RateLTR)
						total_ratesum_detail = round(sum(total_listrate),2)/valuescount2
						total_listpel.append(i.pel)
						total_pelsum_detail = round(sum(total_listpel),2)
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
						total_tsrate.append(i.tsrate)
						total_tsrate_detail = round(sum(total_tsrate),2)/valuescount2
						total_ltrtsrate.append(i.ltrtsrate)
						total_ltrtsrate_detail = round(sum(total_ltrtsrate),2)/valuescount2
						total_kgtsrate.append(i.kgtsrate)
						total_kgtsrate_detail = round(sum(total_kgtsrate),2)/valuescount2
						total_netamount.append(i.net)
						total_netamount_detail = round(sum(total_netamount),2)			
			else:
				rows = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3,routecode=slug2).values_list(
				'date','branch','Shift','Milktype','centercode','centername','routecode','routename','kgs','Ltrs','Fat','Snf','afat','asnf','gamount','RateLTR','tsrate','ltrtsrate','kgtsrate','pel')
				total_listkgs = []
				total_listgamt = []
				total_listfat = []
				total_listltrs = []
				total_listsnf = []
				total_listafat = []
				total_listasnf = []
				total_listrate =[]
				total_listpel = []
				total_tsrate = []
				total_ltrtsrate = []
				total_netamount = []
				total_kgtsrate = []
				total_kgsall = RPT_consolidatedreport.objects.using(brch).filter(centercode = slug3,routecode=slug2).distinct()
				valuescount2 = RPT_consolidatedreport.objects.using(brch).filter(centercode=slug3,routecode=slug2).distinct().count()
				for i in total_kgsall:
						total_listkgs.append(i.kgs)
						total_kgssum_detail = round(sum(total_listkgs),2)
						total_listltrs.append(i.Ltrs)
						total_ltrssum_detail = round(sum(total_listltrs),4)
						total_listafat.append(i.afat)
						total_afatsum_detail = round(sum(total_listafat),2)
						total_afatsum_detail1 = total_afatsum_detail/valuescount2
						total_listasnf.append(i.asnf)
						total_asnfsum_detail = round(sum(total_listasnf),2)
						total_asnfsum_detail1 = total_asnfsum_detail/valuescount2
						total_listfat.append(i.Fat)
						total_fatsum_detail = round(sum(total_listfat),3)
						total_listsnf.append(i.Snf)
						total_snfsum_detail = round(sum(total_listsnf),2)
						total_listrate.append(i.RateLTR)
						total_ratesum_detail = round(sum(total_listrate),2)/valuescount2
						total_listpel.append(i.pel)
						total_pelsum_detail = round(sum(total_listpel),2)
						total_listgamt.append(i.gamount)
						total_gamtsum_detail = sum(total_listgamt)
						total_tsrate.append(i.tsrate)
						total_tsrate_detail = round(sum(total_tsrate),2)/valuescount2
						total_ltrtsrate.append(i.ltrtsrate)
						total_ltrtsrate_detail = round(sum(total_ltrtsrate),2)/valuescount2
						total_kgtsrate.append(i.kgtsrate)
						total_kgtsrate_detail = round(sum(total_kgtsrate),2)/valuescount2
						total_netamount.append(i.net)
						total_netamount_detail = round(sum(total_netamount),2)			
			
			for row in rows:
				row_num += 1
				for col_num in range(len(row)):
					ws.write(row_num, col_num, row[col_num], font_style)
					ws.write(row_num, 0, row[0], font_date)
					ws.write(row_num, 1, row[1], font_date)
			
			rows_end = len(rows)		
			print(rows_end)


			columns1 = ['Total', '','','', '','', '','',total_kgssum_detail ,total_ltrssum_detail ,total_fatsum_detail ,total_snfsum_detail,total_afatsum_detail1 ,total_asnfsum_detail1 ,total_gamtsum_detail ,total_ratesum_detail ,total_tsrate_detail ,total_ltrtsrate_detail ,total_kgtsrate_detail ,total_pelsum_detail ]

			for col_num in range(len(columns)):
				ws.write(rows_end+1, col_num, columns1[col_num], font_style)
			font_style = xlwt.XFStyle()

			wb.save(response)
			return response


def excel_download_date(request, slug, slug1, slug2, *args, **kwargs):
	today = date.today()
	board = Dashboard.objects.filter(expenses_details=slug, date__gte=slug1, date__lte=slug2)
	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="users.xls"'
	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users', cell_overwrite_ok=True)
	row_num = 0
	font_style = xlwt.XFStyle()
	font_style.font.bold = True
	font_date = xlwt.XFStyle()
	font_date.num_format_str = 'D-MM-YY'  # DD-MMM-YY
	style_vh_center = xlwt.easyxf('align: vert centre, horiz centre;''font: colour green, bold True;')
	# ws.write(0, 0, font_style)
	columns = ['date', 'expenses_details', 'description', 'heads', 'receviable', 'payment']
	for col_num in range(len(columns)):
		# ws.write_merge(0, 0,0, 10, "heading for excel \n hello world", style_vh_center)
		ws.write_merge(0, 0, 0, 10, "heading2 for excel \n hello world", style_vh_center)
	for col_num in range(len(columns)):
		row_num = 2
		ws.write(row_num, col_num, columns[col_num], font_style)
	font_style = xlwt.XFStyle()
	rows = Dashboard.objects.filter(expenses_details=slug, date__gte=slug1, date__lte=slug2).values_list('date','expenses_details','description','heads','receviable','payment')
	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
			ws.write(row_num, 0, row[0], font_date)

	wb.save(response)
	return response


def excel_download_date1(request, slug, slug1, slug2, *args, **kwargs):
	today = date.today()
	board = Daily_data.objects.filter(routecode=slug, datefrom=slug1, dateto=slug2)
	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="dailydata.xls"'
	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('dailydata', cell_overwrite_ok=True)
	row_num = 0
	font_style = xlwt.XFStyle()
	font_style.font.bold = True
	font_date = xlwt.XFStyle()
	font_date.num_format_str = 'D-MM-YY'  # DD-MMM-YY
	style_vh_center = xlwt.easyxf('align: vert centre, horiz centre;''font: colour green, bold True;')
	# ws.write(0, 0, font_style)
	columns = ['Date', 'Shift', 'Center code', 'Milk type', 'KGS', 'FAT', 'SNF', 'Amount', 'LTRS', 'Rate\Ltr']
	for col_num in range(len(columns)):
		# ws.write_merge(0, 0,0, 10, "heading for excel \n hello world", style_vh_center)
		ws.write_merge(0, 0, 0, 10, "heading2 for excel \n hello world", style_vh_center)
	for col_num in range(len(columns)):
		row_num = 2
		ws.write(row_num, col_num, columns[col_num], font_style)
	font_style = xlwt.XFStyle()
	rows = Daily_data.objects.filter(routecode=slug, datefrom=slug1, dateto=slug2).values_list('date', 'shift_loc',
																							   'centercode',
																							   'milk_type', 'quantity',
																							   'fat', 'snf', 'amount',
																							   'ltrs', 'rate')
	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
			ws.write(row_num, 0, row[0], font_date)

	wb.save(response)
	return response

# Create your views here.
# Module -nav bar - Home page- index.html
# Created by - 2020-12-14 @ karthik
# Modified by - 2020-12-22 @ karthik 
# Modified by - 2020-12-14 @ Sriya
def home(request):
	if request.session.has_key('name'):
		return render(request,'index.html',locals())
	else:
		return render(request,'index.html',locals())



def about(request):
	if request.session.has_key('name'):
		return render(request,'about.html',locals())
	else:
		return render(request,'login.html',locals())

def contact(request):
	if request.session.has_key('name'):
		return render(request,'contact.html',locals())
	else:
		return render(request,'login.html',locals())

def course(request):
	if request.session.has_key('name'):
		return render(request,'courses.html',locals())
	else:
		return render(request,'login.html',locals())


def teacher(request):
	return render(request,'teacher.html',locals())


def layer(request):
	if request.session.has_key('name'):
		board = Dashboard.objects.values('expenses_details').distinct().order_by('expenses_details')
		return render(request,'layer.html',locals())
	else:
		return render(request,'login.html',locals())


def data_upload(request):
	template = "data_upload.html"
	board_all = Dashboard.objects.all()
	prompt = {
			'order': 'Order of the CSV should be date, expenses_details, receviable,payment',
			'Dashboard': board_all    
		  }
	if request.method == "GET":
		return render(request, template, prompt)
	if request.session.has_key('name'):
		if request.method == "POST":
			csv_file = request.FILES['file']
			if not csv_file.name.endswith('.csv'):
				messages.error(request, 'THIS IS NOT A CSV FILE')
			data_set = csv_file.read().decode('UTF-8')
			io_string = io.StringIO(data_set)
			next(io_string)
			for column in csv.reader(io_string, delimiter=',', quotechar='"'):
				x = column[0]
				s = parser.parse(x)
				dt = datetime.date(s)
				month = dt.month
				year = dt.year
				if column[2] == "" or column[2] == "0.0" or column[2] == " ":
					c2 = float(0.0)
				else:
					c2 = float(column[2])
				if column[3] == "" or column[3] == "0.0" or column[3] == " ":
					c3 = float(0.0)
				else:
					c3 = float(column[3].replace(",", ""))
				_, created = Dashboard.objects.update_or_create(
					date= dt,
					expenses_details=column[1],
					receviable=c2,
					payment=c3,
					date_month = month,
					date_year = year,
				)
			fs = FileSystemStorage(location="media/Dashboard")
			filename = fs.save(csv_file.name, csv_file)
			uploaded_file_url = fs.url(filename)

			context = {}
			return render(request, template, context)
	else:
		return render(request,'index.html',locals())

# Module -Transaction #5-procurement - saving  Data Values extracted from excel- excel.html
# Created by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ Karthik 
# Modified by - 2020-12-14 @ Karthik
from datetime import datetime
def csv_upload(request):
	template = "excel.html"
	board_all = daily_data_excel.objects.all()
	prompt = {
		'order': 'Order of the CSV should be Branch Code,Date,Shift,CenterCode,Milk Type,Good / Sour,SampleNo,Cans,Kgs,Fat,SNF,CLR,TSRATE,LtrRate,Comm,Amount',
		'Dashboard': board_all
	}
	if request.method == "GET":
		return render(request, template, prompt)
	if request.session.has_key('name'):
		if request.method == "POST":
			csv_file = request.FILES['file']
			print(csv_file.name)
			if not csv_file.name.endswith('.csv'):
				messages.error(request, 'THIS IS NOT A CSV FILE')
			data_set = csv_file.read().decode('UTF-8')
			io_string = io.StringIO(data_set)
			next(io_string)
			for column in csv.reader(io_string, delimiter=',', quotechar='"'):
				x = column[1]
				s = parser.parse(x)
				dt = datetime.datetime.date(s)
				month = dt.month
				year = dt.year
			   # if column[0] == "" or column[0] == "0.0" or column[0] == " ":
				#    c0 = string(0.0)
				#else:
				#    c0 = float(column[0])
				if column[3] == "" or column[3] == "0.0" or column[3] == " ":
					c3 = float(0.0)
				else:
					c3 = float(column[3])
				if column[6] == "" or column[6] == "0.0" or column[6] == " ":
					c6 = float(0.0)
				else:
					c6 = float(column[6])
				if column[7] == "" or column[7] == "0.0" or column[7] == " ":
					c7 = float(0.0)
				else:
					c7 = float(column[7])
				if column[8] == "" or column[8] == "0.0" or column[8] == " ":
					c8 = float(0.0)
				else:
					c8 = float(column[8])
				if column[9] == "" or column[9] == "0.0" or column[9] == " ":
					c9 = float(0.0)
				else:
					c9 = float(column[9])
				if column[10] == "" or column[10] == "0.0" or column[10] == " ":
					c10 = float(0.0)
				else:
					c10 = float(column[10])
				if column[11] == "" or column[11] == "0.0" or column[11] == " ":
					c11 = float(0.0)
				else:
					c11 = float(column[11])
				if column[12] == "" or column[12] == "0.0" or column[12] == " ":
					c12 = float(0.0)
				else:
					c12 = float(column[12])
				if column[13] == "" or column[13] == "0.0" or column[13] == " ":
					c13 = float(0.0)
				else:
					c13 = float(column[13])
				if column[14] == "" or column[14] == "0.0" or column[14] == " ":
					c14 = float(0.0)
				else:
					c14 = float(column[14])

				if column[15] == "" or column[15] == "0.0" or column[15] == " ":
					c15 = float(0.0)
				else:
					c15 = float(column[15].replace(",", ""))
				_, created = daily_data_excel.objects.update_or_create(
					description=csv_file,
					BranchCode=column[0],
					date=dt,
					Shift=column[2],
					CenterCode=column[3],
					MilkType=column[4],
					Good_Sour=column[5],
					SampleNo=c6,
					Cans=c7,
					Kgs=c8,
					Fat=c9,
					SNF=c10,
					CLR=c11,
					TSRATE=c12,
					Rate=c13,
					Comm=c14,
					Amount=c15,

				)
				created = Daily_data.objects.update_or_create(
				   # description=csv_file,
					branch=column[0],
					#date1=datetime(column[1]),
					date=dt,
					shift=column[2],
					centercode=column[3],
					milk_type=column[4],
				   # Good_Sour=column[5],
					sampno=c6,
					sampno2=c6,
					can=c7,
					qty=c8,
					fat=c9,
					snf=c10,
					clr=c11,
					tsrate=c12,
					ltrrate=c13,
					comm=c14,
					amount=c15,
					)
			fs = FileSystemStorage(location="media/DailyDataExcel")
			filename = fs.save(csv_file.name, csv_file)
			uploaded_file_url = fs.url(filename)

			context = {}
			return render(request, template, context)
	else:
		return render(request,'index.html',locals())

def centerlist(request):
	template = "centerlist.html"
	board_all = centerdata.objects.all()
	prompt = {
		'order': 'Order of the CSV should be Ccode,CenterName,AgentName,RName,B/C,Contact No ',
		'Dashboard': board_all
	}
	if request.method == "GET":
		return render(request, template, prompt)
	if request.session.has_key('name'):
		if request.method == "POST":
			csv_file = request.FILES['file']
			print(csv_file.name)
			if not csv_file.name.endswith('.csv'):
				messages.error(request, 'THIS IS NOT A CSV FILE')
			data_set = csv_file.read().decode('UTF-8')
			io_string = io.StringIO(data_set)
			next(io_string)
			for column in csv.reader(io_string, delimiter=',', quotechar='"'):
				#x = column[1]
				#s = parser.parse(x)
				#dt = datetime.datetime.date(s)
				#month = dt.month
				#year = dt.year
			   # if column[0] == "" or column[0] == "0.0" or column[0] == " ":
				#    c0 = string(0.0)
				#else:
				#    c0 = float(column[0])
			   
				 _, created = centerdata.objects.update_or_create(
					CCode=column[0],
					CenterName=column[1],
					AgentName=column[2],
					RName=column[3],
					BC=column[4],
					ContactNo=column[5],
					)
				 created = Center.objects.update_or_create(
					centre_code=column[0],
					name=column[1],
					agent_name=column[2],
					route_number=column[3],
					milk_type=column[4],
					mobile=column[5],
					)

				
			fs = FileSystemStorage(location="media/centerdata")
			filename = fs.save(csv_file.name, csv_file)
			uploaded_file_url = fs.url(filename)

			context = {}
			return render(request, template, context)
	else:
		return render(request,'index.html',locals())

def milkbillextraction(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		template = "milkbillextraction.html"
		board_all = Daily_data.objects.using(brch).all()
		prompt = {
			'order': 'Order of the CSV should be Date,Shift,MilkType,Quantity,Ltrs,Fat,SNF, CenterCode',
			'Dashboard': board_all
		}
		if request.method == "GET":
			return render(request, template, prompt)
		if request.session.has_key('name'):
			if request.method == "POST":
				csv_file = request.FILES['file']
				a1 = request.user.extendeduser.branch
				print(csv_file.name)
				if not csv_file.name.endswith('.csv'):
					messages.error(request, 'THIS IS NOT A CSV FILE')
				data_set = csv_file.read().decode('UTF-8')
				io_string = io.StringIO(data_set)
				next(io_string)
				for column in csv.reader(io_string, delimiter=',', quotechar='"'):
					x = column[0]
					s = parser.parse(x)
					dt = datetime.datetime.date(s)  
					month = dt.month
					year = dt.year

					if column[3] == "" or column[3] == "0.0" or column[3] == " ":
						c3 = float(0.0)
					else:
						c3 = float(column[3])
					if column[4] == "" or column[4] == "0.0" or column[4] == " " or column[4] == "-":
						c4 = round((c3/1.03),3)
					else:
						c4 = column[4]
					if column[5] == "" or column[5] == "0.0" or column[5] == " " or column[5] == "-":
						c5 = float(0.0)
					else:
						c5 = float(column[5])

					if column[6] == "" or column[6] == "0.0" or column[6] == " " or column[6] == "-":
						c6 = float(0.0)
					else:
						c6 = float(column[6])
					created = Daily_data.objects.using(brch).update_or_create(
						date =dt,
						shift=column[1],
						milk_type=column[2],
						qty=c3,
						ltrs=c4,
						fat=c5,
						snf=c6,
						centercode=column[7],
						branch = a1,
						)
					crea=Daily_dataaa.objects.using(brch).create(
						date=dt,
						shift=column[1],
						milk_type=column[2],
						qty = c3,
						ltrs=c4,
						fat=c5,
						snf=c6,
						centercode=column[7],
						crrea_by = request.user,
						crbb=datetime.datetime.now(),
						csv_file=csv_file,
						)

					
				fs = FileSystemStorage(location="media/centerdata")
				filename = fs.save(csv_file.name, csv_file)
				uploaded_file_url = fs.url(filename)

				context = {}
				return render(request, template, context)
		else:
			return render(request,'index.html',locals())
	else:
		template = "milkbillextraction.html"
		board_all = Daily_data.objects.all()
		prompt = {
			'order': 'Order of the CSV should be Date,Shift,MilkType,Quantity,Ltrs,Fat,SNF, CenterCode',
			'Dashboard': board_all
		}
		if request.method == "GET":
			return render(request, template, prompt)
		if request.session.has_key('name'):
			if request.method == "POST":
				csv_file = request.FILES['file']
				print(csv_file.name)
				if not csv_file.name.endswith('.csv'):
					messages.error(request, 'THIS IS NOT A CSV FILE')
				data_set = csv_file.read().decode('UTF-8')
				io_string = io.StringIO(data_set)
				next(io_string)
				for column in csv.reader(io_string, delimiter=',', quotechar='"'):
					x = column[0]
					s = parser.parse(x)
					dt = datetime.datetime.date(s)  
					month = dt.month
					year = dt.year

					if column[3] == "" or column[3] == "0.0" or column[3] == " ":
						c3 = float(0.0)
					else:
						c3 = float(column[3])
					if column[4] == "" or column[4] == "0.0" or column[4] == " " or column[4] == "-":
						c4 = c3/1.03
					else:
						c4 = column[4]
					if column[5] == "" or column[5] == "0.0" or column[5] == " " or column[5] == "-":
						c5 = float(0.0)
					else:
						c5 = float(column[5])

					if column[6] == "" or column[6] == "0.0" or column[6] == " " or column[6] == "-":
						c6 = float(0.0)
					else:
						c6 = float(column[6])
					created = Daily_data.objects.update_or_create(
						date =dt,
						shift=column[1],
						milk_type=column[2],
						qty=c3,
						ltrs=c4,
						fat=c5,
						snf=c6,
						centercode=column[7],
						)
					crea=Daily_dataaa.objects.create(
						date=dt,
						shift=column[1],
						milk_type=column[2],
						qty = c3,
						ltrs=c4,
						fat=c5,
						snf=c6,
						centercode=column[7],
						crrea_by = request.user,
						crbb=datetime.datetime.now(),
						csv_file=csv_file,
						)

					
				fs = FileSystemStorage(location="media/centerdata")
				filename = fs.save(csv_file.name, csv_file)
				uploaded_file_url = fs.url(filename)

				context = {}
				return render(request, template, context)
		else:
			return render(request,'index.html',locals())

def centerexcelextraction(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		template = "centerextraction.html"
		board_all = Center.objects.using(brch).all()
		prompt = {
			'order': 'Order of the CSV should be Center Code ,Center Name,Village,Bank Account No,IFSC ,Route ',
			'Dashboard': board_all
		}
		if request.method == "GET":
			return render(request, template, prompt)
		if request.session.has_key('name'):
			if request.method == "POST":
				csv_file = request.FILES['file']
				print(csv_file.name)
				if not csv_file.name.endswith('.csv'):
					messages.error(request, 'THIS IS NOT A CSV FILE')
				data_set = csv_file.read().decode('UTF-8')
				io_string = io.StringIO(data_set)
				next(io_string)
				
				for column in csv.reader(io_string, delimiter=',', quotechar='"'):
					if column[4] == "" or column[4] == "0.0" or column[4] == " " or column[4] == "-":
						c4 = "None"
					else:
						c4 = column[4]
					if column[3] == "" or column[3] == "0.0" or column[3] == " " or column[3] == "-":
						c3 = "None"
					else:
						c3 = column[3]
					if column[6] == "" or column[6] == "0.0" or column[6] == " " or column[6] == "-":
						c6 = "None"
					else:
						c6 = column[6]
					created = Center.objects.using(brch).update_or_create(
						centre_code=column[0],
						name=column[1],
						village_name=column[2],
						bankno=c3,
						ifsc=c4,
						route_number=column[5],
						mobile = c6,
						bankname = column[7],
						actholdername = column[1],
						)
					created1 = Route.objects.using(brch).update_or_create(
						Route_number = column[5],
						Route_name = column[8],
						)
					
				fs = FileSystemStorage(location="media/centerdata")
				filename = fs.save(csv_file.name, csv_file)
				uploaded_file_url = fs.url(filename)

				context = {}
				return render(request, template, context)
		else:
			return render(request,'index.html',locals())
	else:
		template = "centerextraction.html"
		board_all = Center.objects.all()
		prompt = {
			'order': 'Order of the CSV should be Center Code ,Center Name,Village,Bank Account No,IFSC ,Route ',
			'Dashboard': board_all
		}
		if request.method == "GET":
			return render(request, template, prompt)
		if request.session.has_key('name'):
			if request.method == "POST":
				csv_file = request.FILES['file']
				print(csv_file.name)
				if not csv_file.name.endswith('.csv'):
					messages.error(request, 'THIS IS NOT A CSV FILE')
				data_set = csv_file.read().decode('UTF-8')
				io_string = io.StringIO(data_set)
				next(io_string)
				
				for column in csv.reader(io_string, delimiter=',', quotechar='"'):
					if column[4] == "" or column[4] == "0.0" or column[4] == " " or column[4] == "-":
						c4 = "None"
					else:
						c4 = column[4]
					if column[3] == "" or column[3] == "0.0" or column[3] == " " or column[3] == "-":
						c3 = "None"
					else:
						c3 = column[3]
					if column[6] == "" or column[6] == "0.0" or column[6] == " " or column[6] == "-":
						c6 = "None"
					else:
						c6 = column[6]
					created = Center.objects.update_or_create(
						centre_code=column[0],
						name=column[1],
						village_name=column[2],
						bankno=c3,
						ifsc=c4,
						route_number=column[5],
						mobile = c6,
						bankname = column[7],
						actholdername = column[1],
						)
					created1 = Route.objects.update_or_create(
						Route_number = column[5],
						Route_name = column[8],
						)

					
				fs = FileSystemStorage(location="media/centerdata")
				filename = fs.save(csv_file.name, csv_file)
				uploaded_file_url = fs.url(filename)

				context = {}
				return render(request, template, context)
		else:
			return render(request,'index.html',locals())




from datetime import datetime
def milkbilldata(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		template = "milkbilldata.html"
		board_all = milkdata.objects.using(brch).all()
		prompt = {
			'order': 'Order of the CSV should be Date,Shift,Milktype,Kgs,Ltrs,Fat,Snf,Rate/Ltr,NetAmt,P&I Exp,Total, Center Code,Bank Acc No,IFSC,Bank Acc Holder Name,	Route Name',
			'Dashboard': board_all
		}
		if request.method == "GET":
			return render(request, template, prompt)
		if request.session.has_key('name'):
			if request.method == "POST":
				csv_file = request.FILES['file']
				a1 = request.user.extendeduser.branch
				print(csv_file.name)
				if not csv_file.name.endswith('.csv'):
					messages.error(request, 'THIS IS NOT A CSV FILE')
				data_set = csv_file.read().decode('UTF-8')
				io_string = io.StringIO(data_set)
				next(io_string)
				for column in csv.reader(io_string, delimiter=',', quotechar='"'):
					x = column[0]
					s = parser.parse(x)
					dt = datetime.datetime.date(s)  
					month = dt.month
					year = dt.year
				   # if column[0] == "" or column[0] == "0.0" or column[0] == " ":
					#    c0 = string(0.0)
					#else:
					#    c0 = float(column[0])
				   
					if column[21] == "" or column[21] == "0.0" or column[21] == " ":
						c21 = float(0.0)
					else:
						c21 = float(column[21])

					if column[19] == "" or column[19] == "0.0" or column[19] == " " or column[19] == "-":
						c19 = float(0.0)
					else:
						c19 = float(column[19])

					if column[22] == "" or column[22] == "0.0" or column[22] == " " or column[22] == "-":
						c22 = float(0.0)
					else:
						c22 = float(column[22])
				   
					_, created = milkdata.objects.using(brch).update_or_create(
						date=dt,
						Shift=column[2],
						Milktype=column[5],
						kgs=column[6],
						Ltrs=column[9],
						Fat=column[11],
						Snf=column[13],
						RateLTR=column[15],
						Netamount=c22,
						PiExp=c21,
						Total=c19,
						centercode = column[23],
						accholdername = column[24], 
						bankno = column[25],
						ifsc = column[26],
						routename = column[27],
						branch = a1,
						#branchname = a1,

					)
					created = Daily_data.objects.using(brch).update_or_create(
						date=dt,
						shift=column[2],
						milk_type=column[5],
						qty=column[6],
						ltrs=column[9],
						fat=column[11],
						snf=column[13],
						ltrrate=column[15],
						net=c22,
						pel=c21,
						amount=c19,
						centercode = column[23],
						#accholdername = column[24],
						#bankno = column[25],
						#ifsc = column[26],
						#routename = column[27],
						branch = a1,

						)
					created1 = Bank.objects.using(brch).update_or_create(
						ifsc = column[25],
					)
					created2 = Center.objects.using(brch).update_or_create(
						milk_type=column[5],
						centre_code = column[23],
						bankno = column[24],
						ifsc = column[25],
						route_number = column[27]
					)
					crea=Daily_dataaa.objects.using(brch).create(
						date=dt,
						shift=column[2],
						milk_type=column[5],
						qty = column[6],
						ltrs=column[9],
						fat=column[11],
						snf=column[13],
						ltrrate=column[15],
						net=c22,
						pel=c21,
						amount=c19,

						centercode=column[23],
						branch = a1,
						crrea_by = request.user,
						crbb=datetime.datetime.now(),
						csv_file=csv_file,
						)
					crea.save(using=brch)
			 
					
				fs = FileSystemStorage(location="media/milkdata")
				filename = fs.save(csv_file.name, csv_file)
				uploaded_file_url = fs.url(filename)

				context = {}
				return render(request, template, context)
				messages.success(request, 'Your details have been saved!')
		else:
			return render(request,'index.html',locals())
	else:
		template = "milkbilldata.html"
		board_all = milkdata.objects.all()
		prompt = {
			'order': 'Order of the CSV should be Date,Shift,Milktype,Kgs,Ltrs,Fat,Snf,Rate/Ltr,NetAmt,P&I Exp,Total, Center Code,Bank Acc No,IFSC,Bank Acc Holder Name,	Route Name',
			'Dashboard': board_all
		}
		if request.method == "GET":
			return render(request, template, prompt)
		if request.session.has_key('name'):
			if request.method == "POST":
				csv_file = request.FILES['file']
				a1 = request.user.extendeduser.branch
				print(csv_file.name)
				if not csv_file.name.endswith('.csv'):
					messages.error(request, 'THIS IS NOT A CSV FILE')
				data_set = csv_file.read().decode('UTF-8')
				io_string = io.StringIO(data_set)
				next(io_string)
				for column in csv.reader(io_string, delimiter=',', quotechar='"'):
					x = column[0]
					s = parser.parse(x)
					dt = datetime.datetime.date(s)  
					month = dt.month
					year = dt.year
				   # if column[0] == "" or column[0] == "0.0" or column[0] == " ":
					#    c0 = string(0.0)
					#else:
					#    c0 = float(column[0])
				   
					if column[21] == "" or column[21] == "0.0" or column[21] == " ":
						c21 = float(0.0)
					else:
						c21 = float(column[21])

					if column[19] == "" or column[19] == "0.0" or column[19] == " " or column[19] == "-":
						c19 = float(0.0)
					else:
						c19 = float(column[19])

					if column[22] == "" or column[22] == "0.0" or column[22] == " " or column[22] == "-":
						c22 = float(0.0)
					else:
						c22 = float(column[22])
				   
					_, created = milkdata.objects.update_or_create(
						date=dt,
						Shift=column[2],
						Milktype=column[5],
						kgs=column[6],
						Ltrs=column[9],
						Fat=column[11],
						Snf=column[13],
						RateLTR=column[15],
						Netamount=c22,
						PiExp=c21,
						Total=c19,
						centercode = column[23],
						accholdername = column[24],
						bankno = column[25],
						ifsc = column[26],
						routename = column[27],
						branch = a1,
						#branchname = a1,

					)
					created = Daily_data.objects.update_or_create(
						date=dt,
						shift=column[2],
						milk_type=column[5],
						qty=column[6],
						ltrs=column[9],
						fat=column[11],
						snf=column[13],
						ltrrate=column[15],
						net=c22,
						pel=c21,
						amount=c19,
						centercode = column[23],
						#accholdername = column[24],
						#bankno = column[25],
						#ifsc = column[26],
						#routename = column[27],
						branch = a1,

						)
					created1 = Bank.objects.update_or_create(
						ifsc = column[25],
					)
					created2 = Center.objects.update_or_create(
						milk_type=column[5],
						centre_code = column[23],
						bankno = column[24],
						ifsc = column[25],
						route_number = column[27]
					)
					crea=Daily_dataaa.objects.create(
						date=dt,
						shift=column[2],
						milk_type=column[5],
						qty = column[6],
						ltrs=column[9],
						fat=column[11],
						snf=column[13],
						ltrrate=column[15],
						net=c22,
						pel=c21,
						amount=c19,

						centercode=column[23],
						branch = a1,
						crrea_by = request.user,
						crbb=datetime.datetime.now(),
						csv_file=csv_file,
						)
					crea.save()
			 
					
				fs = FileSystemStorage(location="media/milkdata")
				filename = fs.save(csv_file.name, csv_file)
				uploaded_file_url = fs.url(filename)

				context = {}
				return render(request, template, context)
				messages.success(request, 'Your details have been saved!')
		else:
			return render(request,'index.html',locals())

from datetime import datetime
def centerbankdata(request):
	template = "centerbankdata.html"
	board_all = centerbank.objects.all()
	prompt = {
		'order': 'Order of the CSV should be Date,Shift,Milktype,Kgs,Ltrs,Fat,Snf,Rate/Ltr,NetAmt,P&f Exp,Total,CenterCode,Bankno,IfscCode ,Account Holder Name,RouteName',
		'Dashboard': board_all
	}
	if request.method == "GET":
		return render(request, template, prompt)
	if request.session.has_key('name'):
		if request.method == "POST":
			csv_file = request.FILES['file']
			print(csv_file.name)
			if not csv_file.name.endswith('.csv'):
				messages.error(request, 'THIS IS NOT A CSV FILE')
			data_set = csv_file.read().decode('UTF-8')
			io_string = io.StringIO(data_set)
			next(io_string)
			for column in csv.reader(io_string, delimiter=',', quotechar='"'):
				x = column[0]
				s = parser.parse(x)
				dt = datetime.datetime.date(s)  
				month = dt.month
				year = dt.year
			   # if column[0] == "" or column[0] == "0.0" or column[0] == " ":
				#    c0 = string(0.0)
				#else:
				#    c0 = float(column[0])
			   
				_, created = centerbank.objects.update_or_create(
					date=dt,
					Shift=column[1],
					Milktype=column[2],
					kgs=column[3],
					Ltrs=column[4],
					Fat=column[5],
					Snf=column[6],
					RateLTR=column[7],
					Netamount=column[8],
					PiExp=column[9],
					Total=column[10],
					centercode=column[11],
					bankno=column[12],
					ifsc=column[13],
					accholdername = column[14],
					routename = column[15]
					)
			   

				
			fs = FileSystemStorage(location="media/centerbank")
			filename = fs.save(csv_file.name, csv_file)
			uploaded_file_url = fs.url(filename)

			context = {}
			return render(request, template, context)
	else:
		return render(request,'index.html',locals())


def excelupload(request):
	if request.method == 'POST':
		excelupload_resource = ExceluploadReource()
		dataset = Dataset()
		new_person = request.FILES['myfile']

		if not new_person.name.endswith('xlsx'):
			messages.info(request,'wrong format')
			return render(request,'excelupload.html')
		
		imported_data = dataset.load(new_person.read(),format='xlsx')
		for data in imported_data:
			value = Excelupload(
				data[0],
				data[1],
				data[2],
				data[3],
				data[4],
				data[5],
				data[6],
				data[7],
				data[8],
				data[9],
				data[10],
				data[11],
				data[12],
				data[13],
				data[14],
				data[15],
				data[16],
			   )
			value.save()
		messages.success(request, 'Your details have been saved!')
	return render(request,'excelupload.html')

from datetime import datetime
def tsratesexcel1(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		template = "tsratesexcel.html"
		board_all = MinMaxFat.objects.using(brch).all()
		prompt = {
			'order': 'Order of the CSV should be DateFrom,DateTo,Category,MilkType,RateCalculation,CommType,Fixed Value,Snf Value,Snf Deduction,Fat From,Fat To,Penalty,DeductionCalculation,Premium,Amount,Sour Milk,MinRate,CurdRate,SourMilkRate,MinFat,MaxFat,MinSnf,MaxSnf,TsRate ',
			'Dashboard': board_all
		}
		if request.method == "GET":
			return render(request, template, prompt)
		if request.session.has_key('name'):
			if request.method == "POST":
				csv_file = request.FILES['file']
				print(csv_file.name)
				if not csv_file.name.endswith('.csv'):
					messages.error(request, 'THIS IS NOT A CSV FILE')
				data_set = csv_file.read().decode('UTF-8')
				io_string = io.StringIO(data_set)
				next(io_string)
				for column in csv.reader(io_string, delimiter=',', quotechar='"'):
					x = column[0]
					s = parser.parse(x)
					dt = datetime.datetime.date(s)  
					month = dt.month
					year = dt.year
					
					x1 = column[1]
					s1 = parser.parse(x1)
					dt1 = datetime.datetime.date(s1)  
					month1 = dt1.month
					year1 = dt1.year
				   
				#cursor=connection.cursor()
				#a = "SELECT id FROM school_cowmilkcategory WHERE id = (SELECT MAX(id) FROM school_cowmilkcategory)"
				#print(a)
				#cursor.execute(a)
				#a = cursor.fetchall()
				#for row in a:
				#	category1=row[0]
					#dateto = row[1]	

					_, created = CowMilkCategory.objects.using(brch).update_or_create(
							
							category = column[2],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							rate_calculation  = column[4],
							commission_type = column[5],
							fixed_value = column[6],
							snf_value = column[7], 
							snf_deduction = column[8],  
							fat_from = column[9],
							fat_to = column[10],
							penalty_in_RS = column[11],
							deduction_calculation = column[12],
							premium = column[13],
							amount = column[14],
							sour_milk = column[15],
							min_rate = column[16],
							curd = column[17],
							sour_milkrate = column[18],
							)
				
					minmaxfat = MinMaxFat.objects.using(brch).update_or_create(
							category1 = column[2],
							min_fat = column[19],
							max_fat = column[20],
							min_SNF = column[21],
							max_SNF = column[22],
							tsrate = column[23],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							#routecode =  column[],
							#centercode =  column[],
							
							
							)
					cursor=connection.cursor()
					a = "UPDATE %s.school_cowmilkcategory C,%s.school_minmaxfat M set M.category_id = C.id WHERE M.category1=C.category and M.from_date = C.from_date and M.to_date = C.to_date "%(str(brch),str(brch))
					print(a)
					cursor.execute(a)
					a = cursor.fetchall()
					

					
				fs = FileSystemStorage(location="media/MinMaxFat")
				filename = fs.save(csv_file.name, csv_file)
				uploaded_file_url = fs.url(filename)

				context = {}
				return render(request, template, context)
			messages.success(request, 'Your details have been saved!')
		else:
			return render(request,'index.html',locals())
	else:
		template = "tsratesexcel.html"
		board_all = MinMaxFat.objects.all()
		prompt = {
			'order': 'Order of the CSV should be DateFrom,DateTo,Category,MilkType,RateCalculation,CommType,Fixed Value,Snf Value,Snf Deduction,Fat From,Fat To,Penalty,DeductionCalculation,Premium,Amount,Sour Milk,MinRate,CurdRate,SourMilkRate,MinFat,MaxFat,MinSnf,MaxSnf,TsRate ',
			'Dashboard': board_all
		}
		if request.method == "GET":
			return render(request, template, prompt)
		if request.session.has_key('name'):
			if request.method == "POST":
				csv_file = request.FILES['file']
				print(csv_file.name)
				if not csv_file.name.endswith('.csv'):
					messages.error(request, 'THIS IS NOT A CSV FILE')
				data_set = csv_file.read().decode('UTF-8')
				io_string = io.StringIO(data_set)
				next(io_string)
				for column in csv.reader(io_string, delimiter=',', quotechar='"'):
					x = column[0]
					s = parser.parse(x)
					dt = datetime.datetime.date(s)  
					month = dt.month
					year = dt.year
					
					x1 = column[1]
					s1 = parser.parse(x1)
					dt1 = datetime.datetime.date(s1)  
					month1 = dt1.month
					year1 = dt1.year
				   
				#cursor=connection.cursor()
				#a = "SELECT id FROM school_cowmilkcategory WHERE id = (SELECT MAX(id) FROM school_cowmilkcategory)"
				#print(a)
				#cursor.execute(a)
				#a = cursor.fetchall()
				#for row in a:
				#	category1=row[0]
					#dateto = row[1]	

					_, created = CowMilkCategory.objects.update_or_create(
							
							category = column[2],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							rate_calculation  = column[4],
							commission_type = column[5],
							fixed_value = column[6],
							snf_value = column[7], 
							snf_deduction = column[8],  
							fat_from = column[9],
							fat_to = column[10],
							penalty_in_RS = column[11],
							deduction_calculation = column[12],
							premium = column[13],
							amount = column[14],
							sour_milk = column[15],
							min_rate = column[16],
							curd = column[17],
							sour_milkrate = column[18],
							)
				
					minmaxfat = MinMaxFat.objects.update_or_create(
							category1 = column[2],
							min_fat = column[19],
							max_fat = column[20],
							min_SNF = column[21],
							max_SNF = column[22],
							tsrate = column[23],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							#routecode =  column[],
							#centercode =  column[],
							
							
							)
					cursor=connection.cursor()
					a = "UPDATE school_cowmilkcategory C,school_minmaxfat M set M.category_id = C.id WHERE M.category1=C.category and M.from_date = C.from_date and M.to_date = C.to_date "
					print(a)
					cursor.execute(a)
					a = cursor.fetchall()
					
					
					
				fs = FileSystemStorage(location="media/MinMaxFat")
				filename = fs.save(csv_file.name, csv_file)
				uploaded_file_url = fs.url(filename)

				context = {}
				return render(request, template, context)
			messages.success(request, 'Your details have been saved!')
		else:
			return render(request,'index.html',locals())

from datetime import datetime
def tsratescowroute(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		template = "tsratescowroute.html"
		board_all = MinMaxFat.objects.using(brch).all()
		prompt = {
			'order': 'Order of the CSV should be DateFrom,DateTo,Routecode,MilkType,RateCalculation,CommType,Fixed Value,Snf Value,Snf Deduction,Fat From,Fat To,Penalty,DeductionCalculation,Premium,Amount,Sour Milk,MinRate,CurdRate,SourMilkRate,MinFat,MaxFat,MinSnf,MaxSnf,TsRate ',
			'Dashboard': board_all
		}
		if request.method == "GET":
			return render(request, template, prompt)
		if request.session.has_key('name'):
			if request.method == "POST":
				csv_file = request.FILES['file']
				print(csv_file.name)
				if not csv_file.name.endswith('.csv'):
					messages.error(request, 'THIS IS NOT A CSV FILE')
				data_set = csv_file.read().decode('UTF-8')
				io_string = io.StringIO(data_set)
				next(io_string)
				for column in csv.reader(io_string, delimiter=',', quotechar='"'):
					x = column[0]
					s = parser.parse(x)
					dt = datetime.datetime.date(s)  
					month = dt.month
					year = dt.year
					
					x1 = column[1]
					s1 = parser.parse(x1)
					dt1 = datetime.datetime.date(s1)  
					month1 = dt1.month
					year1 = dt1.year
				   
				#cursor=connection.cursor()
				#a = "SELECT id FROM school_cowmilkcategory WHERE id = (SELECT MAX(id) FROM school_cowmilkcategory)"
				#print(a)
				#cursor.execute(a)
				#a = cursor.fetchall()
				#for row in a:
				#	category1=row[0]
					#dateto = row[1]	

					_, created = CowMilkRoute.objects.using(brch).update_or_create(
							
							Routecode = column[2],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							rate_calculation  = column[4],
							commission_type = column[5],
							fixed_value = column[6],
							snf_value = column[7], 
							snf_deduction = column[8],  
							fat_from = column[9],
							fat_to = column[10],
							penalty_in_RS = column[11],
							deduction_calculation = column[12],
							premium = column[13],
							amount = column[14],
							sour_milk = column[15],
							min_rate = column[16],
							curd = column[17],
							sour_milkrate = column[18],
							)
				
					minmaxfat = MinMaxFat.objects.using(brch).update_or_create(
							routecode1 = column[2],
							min_fat = column[19],
							max_fat = column[20],
							min_SNF = column[21],
							max_SNF = column[22],
							tsrate = column[23],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							#routecode =  column[],
							#centercode =  column[],
							
							
							)
					cursor=connection.cursor()
					a = "UPDATE %s.school_cowmilkroute C,%s.school_minmaxfat M set M.routecode_id = C.id WHERE M.routecode1=C.routecode and M.from_date = C.from_date and M.to_date = C.to_date "%(str(brch),str(brch))
					print(a)
					cursor.execute(a)
					a = cursor.fetchall()
					

					
				fs = FileSystemStorage(location="media/MinMaxFat")
				filename = fs.save(csv_file.name, csv_file)
				uploaded_file_url = fs.url(filename)

				context = {}
				return render(request, template, context)
			messages.success(request, 'Your details have been saved!')
		else:
			return render(request,'index.html',locals())
	else:
		template = "tsratescowroute.html"
		board_all = MinMaxFat.objects.all()
		prompt = {
			'order': 'Order of the CSV should be DateFrom,DateTo,Routecode,MilkType,RateCalculation,CommType,Fixed Value,Snf Value,Snf Deduction,Fat From,Fat To,Penalty,DeductionCalculation,Premium,Amount,Sour Milk,MinRate,CurdRate,SourMilkRate,MinFat,MaxFat,MinSnf,MaxSnf,TsRate ',
			'Dashboard': board_all
		}
		if request.method == "GET":
			return render(request, template, prompt)
		if request.session.has_key('name'):
			if request.method == "POST":
				csv_file = request.FILES['file']
				print(csv_file.name)
				if not csv_file.name.endswith('.csv'):
					messages.error(request, 'THIS IS NOT A CSV FILE')
				data_set = csv_file.read().decode('UTF-8')
				io_string = io.StringIO(data_set)
				next(io_string)
				for column in csv.reader(io_string, delimiter=',', quotechar='"'):
					x = column[0]
					s = parser.parse(x)
					dt = datetime.datetime.date(s)  
					month = dt.month
					year = dt.year
					
					x1 = column[1]
					s1 = parser.parse(x1)
					dt1 = datetime.datetime.date(s1)  
					month1 = dt1.month
					year1 = dt1.year
				   
				#cursor=connection.cursor()
				#a = "SELECT id FROM school_cowmilkcategory WHERE id = (SELECT MAX(id) FROM school_cowmilkcategory)"
				#print(a)
				#cursor.execute(a)
				#a = cursor.fetchall()
				#for row in a:
				#	category1=row[0]
					#dateto = row[1]	

					_, created = CowMilkRoute.objects.update_or_create(
							
							Routecode = column[2],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							rate_calculation  = column[4],
							commission_type = column[5],
							fixed_value = column[6],
							snf_value = column[7], 
							snf_deduction = column[8],  
							fat_from = column[9],
							fat_to = column[10],
							penalty_in_RS = column[11],
							deduction_calculation = column[12],
							premium = column[13],
							amount = column[14],
							sour_milk = column[15],
							min_rate = column[16],
							curd = column[17],
							sour_milkrate = column[18],
							)
				
					minmaxfat = MinMaxFat.objects.update_or_create(
							routecode1 = column[2],
							min_fat = column[19],
							max_fat = column[20],
							min_SNF = column[21],
							max_SNF = column[22],
							tsrate = column[23],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							#routecode =  column[],
							#centercode =  column[],
							
							
							)
					cursor=connection.cursor()
					a = "UPDATE %s.school_cowmilkroute C,%s.school_minmaxfat M set M.routecode_id = C.id WHERE M.routecode1=C.routecode and M.from_date = C.from_date and M.to_date = C.to_date "%(str(brch),str(brch))
					print(a)
					cursor.execute(a)
					a = cursor.fetchall()
					
					
					
				fs = FileSystemStorage(location="media/MinMaxFat")
				filename = fs.save(csv_file.name, csv_file)
				uploaded_file_url = fs.url(filename)

				context = {}
				return render(request, template, context)
			messages.success(request, 'Your details have been saved!')
		else:
			return render(request,'index.html',locals())

from datetime import datetime
def tsratescowcenter(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		template = "tsratescowcenter.html"
		board_all = MinMaxFat.objects.using(brch).all()
		prompt = {
			'order': 'Order of the CSV should be DateFrom,DateTo,Centercode,MilkType,RateCalculation,CommType,Fixed Value,Snf Value,Snf Deduction,Fat From,Fat To,Penalty,DeductionCalculation,Premium,Amount,Sour Milk,MinRate,CurdRate,SourMilkRate,MinFat,MaxFat,MinSnf,MaxSnf,TsRate ',
			'Dashboard': board_all
		}
		if request.method == "GET":
			return render(request, template, prompt)
		if request.session.has_key('name'):
			if request.method == "POST":
				csv_file = request.FILES['file']
				print(csv_file.name)
				if not csv_file.name.endswith('.csv'):
					messages.error(request, 'THIS IS NOT A CSV FILE')
				data_set = csv_file.read().decode('UTF-8')
				io_string = io.StringIO(data_set)
				next(io_string)
				for column in csv.reader(io_string, delimiter=',', quotechar='"'):
					x = column[0]
					s = parser.parse(x)
					dt = datetime.datetime.date(s)  
					month = dt.month
					year = dt.year
					
					x1 = column[1]
					s1 = parser.parse(x1)
					dt1 = datetime.datetime.date(s1)  
					month1 = dt1.month
					year1 = dt1.year
				   
				#cursor=connection.cursor()
				#a = "SELECT id FROM school_cowmilkcategory WHERE id = (SELECT MAX(id) FROM school_cowmilkcategory)"
				#print(a)
				#cursor.execute(a)
				#a = cursor.fetchall()
				#for row in a:
				#	category1=row[0]
					#dateto = row[1]	

					_, created = CowMilkCenter.objects.using(brch).update_or_create(
							
							centercode = column[2],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							rate_calculation  = column[4],
							commission_type = column[5],
							fixed_value = column[6],
							snf_value = column[7], 
							snf_deduction = column[8],  
							fat_from = column[9],
							fat_to = column[10],
							penalty_in_RS = column[11],
							deduction_calculation = column[12],
							premium = column[13],
							amount = column[14],
							sour_milk = column[15],
							min_rate = column[16],
							curd = column[17],
							sour_milkrate = column[18],
							)
				
					minmaxfat = MinMaxFat.objects.using(brch).update_or_create(
							centercode1 = column[2],
							min_fat = column[19],
							max_fat = column[20],
							min_SNF = column[21],
							max_SNF = column[22],
							tsrate = column[23],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							#routecode =  column[],
							#centercode =  column[],
							
							
							)
					cursor=connection.cursor()
					a = "UPDATE %s.school_cowmilkcenter C,%s.school_minmaxfat M set M.centercode_id = C.id WHERE M.centercode1=C.centercode and M.from_date = C.from_date and M.to_date = C.to_date "%(str(brch),str(brch))
					print(a)
					cursor.execute(a)
					a = cursor.fetchall()
					

					
				fs = FileSystemStorage(location="media/MinMaxFat")
				filename = fs.save(csv_file.name, csv_file)
				uploaded_file_url = fs.url(filename)

				context = {}
				return render(request, template, context)
			messages.success(request, 'Your details have been saved!')
		else:
			return render(request,'index.html',locals())
	else:
		template = "tsratescowcenter.html"
		board_all = MinMaxFat.objects.all()
		prompt = {
			'order': 'Order of the CSV should be DateFrom,DateTo,Centercode,MilkType,RateCalculation,CommType,Fixed Value,Snf Value,Snf Deduction,Fat From,Fat To,Penalty,DeductionCalculation,Premium,Amount,Sour Milk,MinRate,CurdRate,SourMilkRate,MinFat,MaxFat,MinSnf,MaxSnf,TsRate ',
			'Dashboard': board_all
		}
		if request.method == "GET":
			return render(request, template, prompt)
		if request.session.has_key('name'):
			if request.method == "POST":
				csv_file = request.FILES['file']
				print(csv_file.name)
				if not csv_file.name.endswith('.csv'):
					messages.error(request, 'THIS IS NOT A CSV FILE')
				data_set = csv_file.read().decode('UTF-8')
				io_string = io.StringIO(data_set)
				next(io_string)
				for column in csv.reader(io_string, delimiter=',', quotechar='"'):
					x = column[0]
					s = parser.parse(x)
					dt = datetime.datetime.date(s)  
					month = dt.month
					year = dt.year
					
					x1 = column[1]
					s1 = parser.parse(x1)
					dt1 = datetime.datetime.date(s1)  
					month1 = dt1.month
					year1 = dt1.year
				   
				#cursor=connection.cursor()
				#a = "SELECT id FROM school_cowmilkcategory WHERE id = (SELECT MAX(id) FROM school_cowmilkcategory)"
				#print(a)
				#cursor.execute(a)
				#a = cursor.fetchall()
				#for row in a:
				#	category1=row[0]
					#dateto = row[1]	

					_, created = CowMilkCenter.objects.update_or_create(
							
							centercode = column[2],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							rate_calculation  = column[4],
							commission_type = column[5],
							fixed_value = column[6],
							snf_value = column[7], 
							snf_deduction = column[8],  
							fat_from = column[9],
							fat_to = column[10],
							penalty_in_RS = column[11],
							deduction_calculation = column[12],
							premium = column[13],
							amount = column[14],
							sour_milk = column[15],
							min_rate = column[16],
							curd = column[17],
							sour_milkrate = column[18],
							)
				
					minmaxbuff = MinMaxFat.objects.update_or_create(
							centercode1 = column[2],
							min_fat = column[19],
							max_fat = column[20],
							min_SNF = column[21],
							max_SNF = column[22],
							tsrate = column[23],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							#routecode =  column[],
							#centercode =  column[],
							
							
							)
					cursor=connection.cursor()
					a = "UPDATE %s.school_cowmilkcenter C,%s.school_minmaxfat M set M.centercode_id = C.id WHERE M.centercode1=C.centercode and M.from_date = C.from_date and M.to_date = C.to_date "%(str(brch),str(brch))
					print(a)
					cursor.execute(a)
					a = cursor.fetchall()
					
					
					
				fs = FileSystemStorage(location="media/MinMaxFat")
				filename = fs.save(csv_file.name, csv_file)
				uploaded_file_url = fs.url(filename)

				context = {}
				return render(request, template, context)
			messages.success(request, 'Your details have been saved!')
		else:
			return render(request,'index.html',locals())


from datetime import datetime
def tsratesbuffcategory(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		template = "tsratesbuffcategory.html"
		board_all = MinMaxBuff.objects.using(brch).all()
		prompt = {
			'order': 'Order of the CSV should be DateFrom,DateTo,Category,MilkType,RateCalculation,CommType,Fixed Value,Snf Value,Snf Deduction,Fat From,Fat To,Penalty,DeductionCalculation,Premium,Amount,Sour Milk,MinRate,CurdRate,SourMilkRate,MinFat,MaxFat,MinSnf,MaxSnf,TsRate ',
			'Dashboard': board_all
		}
		if request.method == "GET":
			return render(request, template, prompt)
		if request.session.has_key('name'):
			if request.method == "POST":
				csv_file = request.FILES['file']
				print(csv_file.name)
				if not csv_file.name.endswith('.csv'):
					messages.error(request, 'THIS IS NOT A CSV FILE')
				data_set = csv_file.read().decode('UTF-8')
				io_string = io.StringIO(data_set)
				next(io_string)
				for column in csv.reader(io_string, delimiter=',', quotechar='"'):
					x = column[0]
					s = parser.parse(x)
					dt = datetime.datetime.date(s)  
					month = dt.month
					year = dt.year
					
					x1 = column[1]
					s1 = parser.parse(x1)
					dt1 = datetime.datetime.date(s1)  
					month1 = dt1.month
					year1 = dt1.year
				   
				#cursor=connection.cursor()
				#a = "SELECT id FROM school_cowmilkcategory WHERE id = (SELECT MAX(id) FROM school_cowmilkcategory)"
				#print(a)
				#cursor.execute(a)
				#a = cursor.fetchall()
				#for row in a:
				#	category1=row[0]
					#dateto = row[1]	

					_, created = BufalloMilkCategory.objects.using(brch).update_or_create(
							
							category = column[2],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							rate_calculation  = column[4],
							commission_type = column[5],
							fixed_value = column[6],
							snf_value = column[7], 
							snf_deduction = column[8],  
							fat_from = column[9],
							fat_to = column[10],
							penalty_in_RS = column[11],
							deduction_calculation = column[12],
							premium = column[13],
							amount = column[14],
							sour_milk = column[15],
							min_rate = column[16],
							curd = column[17],
							sour_milkrate = column[18],
							)
				
					minmaxbuff = MinMaxBuff.objects.using(brch).update_or_create(
							category1 = column[2],
							min_fat = column[19],
							max_fat = column[20],
							min_SNF = column[21],
							max_SNF = column[22],
							tsrate = column[23],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							#routecode =  column[],
							#centercode =  column[],
							
							
							)
					cursor=connection.cursor()
					a = "UPDATE %s.school_bufallomilkcategory B,%s.school_minmaxbuff M set M.category_id = B.id WHERE M.category1=B.category and M.from_date = B.from_date and M.to_date = B.to_date "%(str(brch),str(brch))
					print(a)
					cursor.execute(a)
					a = cursor.fetchall()
					

					
				fs = FileSystemStorage(location="media/MinMaxFat")
				filename = fs.save(csv_file.name, csv_file)
				uploaded_file_url = fs.url(filename)

				context = {}
				return render(request, template, context)
			messages.success(request, 'Your details have been saved!')
		else:
			return render(request,'index.html',locals())
	else:
		template = "tsratescowcategory.html"
		board_all = MinMaxBuff.objects.all()
		prompt = {
			'order': 'Order of the CSV should be DateFrom,DateTo,Category,MilkType,RateCalculation,CommType,Fixed Value,Snf Value,Snf Deduction,Fat From,Fat To,Penalty,DeductionCalculation,Premium,Amount,Sour Milk,MinRate,CurdRate,SourMilkRate,MinFat,MaxFat,MinSnf,MaxSnf,TsRate ',
			'Dashboard': board_all
		}
		if request.method == "GET":
			return render(request, template, prompt)
		if request.session.has_key('name'):
			if request.method == "POST":
				csv_file = request.FILES['file']
				print(csv_file.name)
				if not csv_file.name.endswith('.csv'):
					messages.error(request, 'THIS IS NOT A CSV FILE')
				data_set = csv_file.read().decode('UTF-8')
				io_string = io.StringIO(data_set)
				next(io_string)
				for column in csv.reader(io_string, delimiter=',', quotechar='"'):
					x = column[0]
					s = parser.parse(x)
					dt = datetime.datetime.date(s)  
					month = dt.month
					year = dt.year
					
					x1 = column[1]
					s1 = parser.parse(x1)
					dt1 = datetime.datetime.date(s1)  
					month1 = dt1.month
					year1 = dt1.year
				   
				#cursor=connection.cursor()
				#a = "SELECT id FROM school_cowmilkcategory WHERE id = (SELECT MAX(id) FROM school_cowmilkcategory)"
				#print(a)
				#cursor.execute(a)
				#a = cursor.fetchall()
				#for row in a:
				#	category1=row[0]
					#dateto = row[1]	

					_, created = BufalloMilkCategory.objects.update_or_create(
							
							category = column[2],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							rate_calculation  = column[4],
							commission_type = column[5],
							fixed_value = column[6],
							snf_value = column[7], 
							snf_deduction = column[8],  
							fat_from = column[9],
							fat_to = column[10],
							penalty_in_RS = column[11],
							deduction_calculation = column[12],
							premium = column[13],
							amount = column[14],
							sour_milk = column[15],
							min_rate = column[16],
							curd = column[17],
							sour_milkrate = column[18],
							)
				
					minmaxbuff = MinMaxBuff.objects.update_or_create(
							category1 = column[2],
							min_fat = column[19],
							max_fat = column[20],
							min_SNF = column[21],
							max_SNF = column[22],
							tsrate = column[23],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							#routecode =  column[],
							#centercode =  column[],
							
							
							)
					cursor=connection.cursor()
					a = "UPDATE %s.school_bufallomilkcategory B,%s.school_minmaxbuff M set M.category_id = B.id WHERE M.category1=B.category and M.from_date = B.from_date and M.to_date = B.to_date "%(str(brch),str(brch))
					print(a)
					cursor.execute(a)
					a = cursor.fetchall()
					
					
					
				fs = FileSystemStorage(location="media/MinMaxFat")
				filename = fs.save(csv_file.name, csv_file)
				uploaded_file_url = fs.url(filename)

				context = {}
				return render(request, template, context)
			messages.success(request, 'Your details have been saved!')
		else:
			return render(request,'index.html',locals())

from datetime import datetime
def tsratesbuffroute(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		template = "tsratesbuffroute.html"
		board_all = MinMaxBuff.objects.using(brch).all()
		prompt = {
			'order': 'Order of the CSV should be DateFrom,DateTo,Routecode,MilkType,RateCalculation,CommType,Fixed Value,Snf Value,Snf Deduction,Fat From,Fat To,Penalty,DeductionCalculation,Premium,Amount,Sour Milk,MinRate,CurdRate,SourMilkRate,MinFat,MaxFat,MinSnf,MaxSnf,TsRate ',
			'Dashboard': board_all
		}
		if request.method == "GET":
			return render(request, template, prompt)
		if request.session.has_key('name'):
			if request.method == "POST":
				csv_file = request.FILES['file']
				print(csv_file.name)
				if not csv_file.name.endswith('.csv'):
					messages.error(request, 'THIS IS NOT A CSV FILE')
				data_set = csv_file.read().decode('UTF-8')
				io_string = io.StringIO(data_set)
				next(io_string)
				for column in csv.reader(io_string, delimiter=',', quotechar='"'):
					x = column[0]
					s = parser.parse(x)
					dt = datetime.datetime.date(s)  
					month = dt.month
					year = dt.year
					
					x1 = column[1]
					s1 = parser.parse(x1)
					dt1 = datetime.datetime.date(s1)  
					month1 = dt1.month
					year1 = dt1.year
				   
				#cursor=connection.cursor()
				#a = "SELECT id FROM school_cowmilkcategory WHERE id = (SELECT MAX(id) FROM school_cowmilkcategory)"
				#print(a)
				#cursor.execute(a)
				#a = cursor.fetchall()
				#for row in a:
				#	category1=row[0]
					#dateto = row[1]	

					_, created = BufalloMilkRoute.objects.using(brch).update_or_create(
							
							Routecode = column[2],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							rate_calculation  = column[4],
							commission_type = column[5],
							fixed_value = column[6],
							snf_value = column[7], 
							snf_deduction = column[8],  
							fat_from = column[9],
							fat_to = column[10],
							penalty_in_RS = column[11],
							deduction_calculation = column[12],
							premium = column[13],
							amount = column[14],
							sour_milk = column[15],
							min_rate = column[16],
							curd = column[17],
							sour_milkrate = column[18],
							)
				
					minmaxbuff = MinMaxBuff.objects.using(brch).update_or_create(
							routecode1 = column[2],
							min_fat = column[19],
							max_fat = column[20],
							min_SNF = column[21],
							max_SNF = column[22],
							tsrate = column[23],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							#routecode =  column[],
							#centercode =  column[],
							
							
							)
					cursor=connection.cursor()
					a = "UPDATE %s.school_bufallomilkroute B,%s.school_minmaxbuff M set M.routecode_id = B.id WHERE M.routecode1=B.routecode and M.from_date = B.from_date and M.to_date = B.to_date "%(str(brch),str(brch))
					print(a)
					cursor.execute(a)
					a = cursor.fetchall()
					

					
				fs = FileSystemStorage(location="media/MinMaxFat")
				filename = fs.save(csv_file.name, csv_file)
				uploaded_file_url = fs.url(filename)

				context = {}
				return render(request, template, context)
			messages.success(request, 'Your details have been saved!')
		else:
			return render(request,'index.html',locals())
	else:
		template = "tsratesbuffroute.html"
		board_all = MinMaxBuff.objects.all()
		prompt = {
			'order': 'Order of the CSV should be DateFrom,DateTo,Routecode,MilkType,RateCalculation,CommType,Fixed Value,Snf Value,Snf Deduction,Fat From,Fat To,Penalty,DeductionCalculation,Premium,Amount,Sour Milk,MinRate,CurdRate,SourMilkRate,MinFat,MaxFat,MinSnf,MaxSnf,TsRate ',
			'Dashboard': board_all
		}
		if request.method == "GET":
			return render(request, template, prompt)
		if request.session.has_key('name'):
			if request.method == "POST":
				csv_file = request.FILES['file']
				print(csv_file.name)
				if not csv_file.name.endswith('.csv'):
					messages.error(request, 'THIS IS NOT A CSV FILE')
				data_set = csv_file.read().decode('UTF-8')
				io_string = io.StringIO(data_set)
				next(io_string)
				for column in csv.reader(io_string, delimiter=',', quotechar='"'):
					x = column[0]
					s = parser.parse(x)
					dt = datetime.datetime.date(s)  
					month = dt.month
					year = dt.year
					
					x1 = column[1]
					s1 = parser.parse(x1)
					dt1 = datetime.datetime.date(s1)  
					month1 = dt1.month
					year1 = dt1.year
				   
				#cursor=connection.cursor()
				#a = "SELECT id FROM school_cowmilkcategory WHERE id = (SELECT MAX(id) FROM school_cowmilkcategory)"
				#print(a)
				#cursor.execute(a)
				#a = cursor.fetchall()
				#for row in a:
				#	category1=row[0]
					#dateto = row[1]	

					_, created = BufalloMilkRoute.objects.update_or_create(
							
							Routecode = column[2],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							rate_calculation  = column[4],
							commission_type = column[5],
							fixed_value = column[6],
							snf_value = column[7], 
							snf_deduction = column[8],  
							fat_from = column[9],
							fat_to = column[10],
							penalty_in_RS = column[11],
							deduction_calculation = column[12],
							premium = column[13],
							amount = column[14],
							sour_milk = column[15],
							min_rate = column[16],
							curd = column[17],
							sour_milkrate = column[18],
							)
				
					minmaxbuff = MinMaxBuff.objects.update_or_create(
							routecode1 = column[2],
							min_fat = column[19],
							max_fat = column[20],
							min_SNF = column[21],
							max_SNF = column[22],
							tsrate = column[23],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							#routecode =  column[],
							#centercode =  column[],
							
							
							)
					cursor=connection.cursor()
					a = "UPDATE %s.school_bufallomilkroute B,%s.school_minmaxbuff M set M.routecode_id = C.id WHERE M.routecode1=B.routecode and M.from_date = B.from_date and M.to_date = B.to_date "%(str(brch),str(brch))
					print(a)
					cursor.execute(a)
					a = cursor.fetchall()
					
					
					
				fs = FileSystemStorage(location="media/MinMaxFat")
				filename = fs.save(csv_file.name, csv_file)
				uploaded_file_url = fs.url(filename)

				context = {}
				return render(request, template, context)
			messages.success(request, 'Your details have been saved!')
		else:
			return render(request,'index.html',locals())

from datetime import datetime
def tsratesbuffcenter(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		template = "tsratesbuffcenter.html"
		board_all = MinMaxBuff.objects.using(brch).all()
		prompt = {
			'order': 'Order of the CSV should be DateFrom,DateTo,Centercode,MilkType,RateCalculation,CommType,Fixed Value,Snf Value,Snf Deduction,Fat From,Fat To,Penalty,DeductionCalculation,Premium,Amount,Sour Milk,MinRate,CurdRate,SourMilkRate,MinFat,MaxFat,MinSnf,MaxSnf,TsRate ',
			'Dashboard': board_all
		}
		if request.method == "GET":
			return render(request, template, prompt)
		if request.session.has_key('name'):
			if request.method == "POST":
				csv_file = request.FILES['file']
				print(csv_file.name)
				if not csv_file.name.endswith('.csv'):
					messages.error(request, 'THIS IS NOT A CSV FILE')
				data_set = csv_file.read().decode('UTF-8')
				io_string = io.StringIO(data_set)
				next(io_string)
				for column in csv.reader(io_string, delimiter=',', quotechar='"'):
					x = column[0]
					s = parser.parse(x)
					dt = datetime.datetime.date(s)  
					month = dt.month
					year = dt.year
					
					x1 = column[1]
					s1 = parser.parse(x1)
					dt1 = datetime.datetime.date(s1)  
					month1 = dt1.month
					year1 = dt1.year
				   
				#cursor=connection.cursor()
				#a = "SELECT id FROM school_cowmilkcategory WHERE id = (SELECT MAX(id) FROM school_cowmilkcategory)"
				#print(a)
				#cursor.execute(a)
				#a = cursor.fetchall()
				#for row in a:
				#	category1=row[0]
					#dateto = row[1]	

					_, created = BufalloMilkCenter.objects.using(brch).update_or_create(
							
							centercode = column[2],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							rate_calculation  = column[4],
							commission_type = column[5],
							fixed_value = column[6],
							snf_value = column[7], 
							snf_deduction = column[8],  
							fat_from = column[9],
							fat_to = column[10],
							penalty_in_RS = column[11],
							deduction_calculation = column[12],
							premium = column[13],
							amount = column[14],
							sour_milk = column[15],
							min_rate = column[16],
							curd = column[17],
							sour_milkrate = column[18],
							)
				
					minmaxbuff = MinMaxBuff.objects.using(brch).update_or_create(
							centercode1 = column[2],
							min_fat = column[19],
							max_fat = column[20],
							min_SNF = column[21],
							max_SNF = column[22],
							tsrate = column[23],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							#routecode =  column[],
							#centercode =  column[],
							
							
							)
					cursor=connection.cursor()
					a = "UPDATE %s.school_bufallomilkcenter B,%s.school_minmaxbuff M set M.centercode_id = B.id WHERE M.centercode1=B.centercode and M.from_date = B.from_date and M.to_date = B.to_date "%(str(brch),str(brch))
					print(a)
					cursor.execute(a)
					a = cursor.fetchall()
					

					
				fs = FileSystemStorage(location="media/MinMaxFat")
				filename = fs.save(csv_file.name, csv_file)
				uploaded_file_url = fs.url(filename)

				context = {}
				return render(request, template, context)
			messages.success(request, 'Your details have been saved!')
		else:
			return render(request,'index.html',locals())
	else:
		template = "tsratesbuffcenter.html"
		board_all = MinMaxBuff.objects.all()
		prompt = {
			'order': 'Order of the CSV should be DateFrom,DateTo,Centercode,MilkType,RateCalculation,CommType,Fixed Value,Snf Value,Snf Deduction,Fat From,Fat To,Penalty,DeductionCalculation,Premium,Amount,Sour Milk,MinRate,CurdRate,SourMilkRate,MinFat,MaxFat,MinSnf,MaxSnf,TsRate ',
			'Dashboard': board_all
		}
		if request.method == "GET":
			return render(request, template, prompt)
		if request.session.has_key('name'):
			if request.method == "POST":
				csv_file = request.FILES['file']
				print(csv_file.name)
				if not csv_file.name.endswith('.csv'):
					messages.error(request, 'THIS IS NOT A CSV FILE')
				data_set = csv_file.read().decode('UTF-8')
				io_string = io.StringIO(data_set)
				next(io_string)
				for column in csv.reader(io_string, delimiter=',', quotechar='"'):
					x = column[0]
					s = parser.parse(x)
					dt = datetime.datetime.date(s)  
					month = dt.month
					year = dt.year
					
					x1 = column[1]
					s1 = parser.parse(x1)
					dt1 = datetime.datetime.date(s1)  
					month1 = dt1.month
					year1 = dt1.year
				   
				#cursor=connection.cursor()
				#a = "SELECT id FROM school_cowmilkcategory WHERE id = (SELECT MAX(id) FROM school_cowmilkcategory)"
				#print(a)
				#cursor.execute(a)
				#a = cursor.fetchall()
				#for row in a:
				#	category1=row[0]
					#dateto = row[1]	

					_, created = BufalloMilkCenter.objects.update_or_create(
							
							centercode = column[2],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							rate_calculation  = column[4],
							commission_type = column[5],
							fixed_value = column[6],
							snf_value = column[7], 
							snf_deduction = column[8],  
							fat_from = column[9],
							fat_to = column[10],
							penalty_in_RS = column[11],
							deduction_calculation = column[12],
							premium = column[13],
							amount = column[14],
							sour_milk = column[15],
							min_rate = column[16],
							curd = column[17],
							sour_milkrate = column[18],
							)
				
					minmaxbuff = MinMaxBuff.objects.update_or_create(
							centercode1 = column[2],
							min_fat = column[19],
							max_fat = column[20],
							min_SNF = column[21],
							max_SNF = column[22],
							tsrate = column[23],
							from_date = dt,
							to_date = dt1,
							milk_type = column[3],
							#routecode =  column[],
							#centercode =  column[],
							
							
							)
					cursor=connection.cursor()
					a = "UPDATE %s.school_bufallomilkcenter B,%s.school_minmaxbuff M set M.centercode_id = B.id WHERE M.centercode1=B.centercode and M.from_date = B.from_date and M.to_date = B.to_date "%(str(brch),str(brch))
					print(a)
					cursor.execute(a)
					a = cursor.fetchall()
					
					
					
				fs = FileSystemStorage(location="media/MinMaxFat")
				filename = fs.save(csv_file.name, csv_file)
				uploaded_file_url = fs.url(filename)

				context = {}
				return render(request, template, context)
			messages.success(request, 'Your details have been saved!')
		else:
			return render(request,'index.html',locals())
def gallery(request):
	return render(request,'gallery.html',locals())


# Create your views here.
# Module -nav bar - Logout -
# Created by - 2020-12-14 @ Sriya
# Modified by - 2020-12-22 @ Sriya 
# Modified by - 2020-12-14 @ Sriya
def logout(request):
	try:
		del request.session['name']
		auth.logout(request)
	except KeyError:
		pass
	return redirect('/')
	
	


def dashboard(request):
	#current_year = datetime.now().year
	board = Dashboard.objects.all()
	total_listrec = []
	total_recsum = 0
	total_paysum = 0
	total_recall = Dashboard.objects.all()
	for i in total_recall:
		total_listrec.append(i.receviable)
		total_recsum = sum(total_listrec)
	total_listpay = []
	total_payall = Dashboard.objects.all()
	for j in total_payall:
		total_listpay.append(j.payment)
		total_paysum = sum(total_listpay)
		diff_total = total_recsum - total_paysum
	if request.method == "POST":
		x = datetime.strptime(request.POST["date"], "%Y-%m-%d")
		recValue = float(0.0)
		PayValue = float(0.0)
		recValue = request.POST["receviable"]
		PayValue  = request.POST["payment"]
		if recValue == "" or recValue == "0.0":
			recValue = float(0.0)
		if PayValue == "" or PayValue == "0.0":
			PayValue = float(0.0)
		details_form = Dashboard.objects.create(
			heads = request.POST["heads"],
			date = request.POST["date"],
			expenses_details = request.POST["expenses_details"],
			receviable =recValue,
			payment =PayValue,
			date_month = x.month,
			date_year = x.year,
			)
		details_form.save()
	return render(request,'dashboard.html',locals())     


def layerdetail(request,slug):
	current_year = datetime.now().year
	today = date.today()
	start_of_yr = today.replace(day = 1, month=4)
	end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
	# return HttpResponse(end_of_yr)
	total_listrec = []
	total_listpay = []
	board = Dashboard.objects.filter(expenses_details=slug, date__gte=start_of_yr, date__lte=end_of_yr)
	total_recall = Dashboard.objects.filter(expenses_details=slug, date__gte=start_of_yr, date__lte=end_of_yr)
	try:
		for i in total_recall:
			total_listrec.append(i.receviable)
			total_recsum = sum(total_listrec)
			total_r = sum(total_listrec)
		total_payall = Dashboard.objects.filter(expenses_details=slug, date__gte=start_of_yr, date__lte=end_of_yr)
		for j in total_payall:
			total_listpay.append(j.payment)
			total_paysum = sum(total_listpay)
			total_p = sum(total_listpay)
			# diff_total = total_recsum - total_paysum
		if total_recsum >  total_paysum:
			tr = total_recsum - total_paysum
			total_paysum = total_paysum + tr
			# return HttpResponse("tr {{tr}}")
			# tp = 0.0
			total_sum = total_paysum

		elif total_paysum > total_recsum:
			tp = total_paysum - total_recsum
			total_recsum = total_recsum + tp
			# tr = 0.0
			total_sum = total_recsum
			# return HttpResponse("tp",tp)

		# start_date = ""
		# end_date = ""
		if request.method == "POST":
			start_date = request.POST["start_date"]
			end_date = request.POST["end_date"]
			# return HttpResponse(start_date)
			return HttpResponseRedirect("/layer-detail-date/"+slug+"/"+start_date+"/"+end_date+"/")
	except:
		return HttpResponse("no records")  
		return render(request,'layer_detail.html',locals())

def layerdetail_date(request,slug,slug1,slug2):
	board = Dashboard.objects.filter(expenses_details=slug, date__gte=slug1, date__lte=slug2)
	# return HttpResponse(board)

	total_listrec = []
	total_listpay = []
	total_recsum = 0
	total_paysum = 0
	total_recall = Dashboard.objects.filter(expenses_details=slug, date__gte=slug1, date__lte=slug2)
	for i in total_recall:
		total_listrec.append(i.receviable)
		total_recsum = sum(total_listrec)
		total_r = sum(total_listrec)
	total_payall = Dashboard.objects.filter(expenses_details=slug, date__gte=slug1, date__lte=slug2)
	for j in total_payall:
		total_listpay.append(j.payment)
		total_paysum = sum(total_listpay)
		total_p = sum(total_listpay)
		# diff_total = total_recsum - total_paysum
	if total_recsum >  total_paysum:
		tr = total_recsum - total_paysum
		total_paysum = total_paysum + tr
		# return HttpResponse("tr {{tr}}")
		# tp = 0.0
		total_sum = total_paysum

	elif total_paysum > total_recsum:
		tp = total_paysum - total_recsum
		total_recsum = total_recsum + tp
		# tr = 0.0
		total_sum = total_recsum
		# return HttpResponseRedirect("/down/"+slug+"/"+start_date+"/"+end_date+"/")

	return render(request,'layer_detail_date.html',locals())

def pdf_month(request,slug,slug1, slug2):
	current_year = datetime.now().year
	# slug1 =datetime.strptime(slug1, "%Y-%m-%d")
	# slug2 =datetime.strptime(slug2, "%Y-%m-%d")
	# return HttpResponse(slug1)
	board = Dashboard.objects.filter(expenses_details=slug, date__gte=slug1, date__lte=slug2)
	total_listrec = []
	total_listpay = []
	total_recall = Dashboard.objects.filter(expenses_details=slug, date__gte=slug1, date__lte=slug2)
	for i in total_recall:
		total_listrec.append(i.receviable)
		total_recsum = sum(total_listrec)
	total_payall = Dashboard.objects.filter(expenses_details=slug, date__gte=slug1, date__lte=slug2)
	for j in total_payall:
		total_listpay.append(j.payment)
		total_paysum = sum(total_listpay)
		diff_total = total_recsum - total_paysum
	# return HttpResponseRedirect('/pdf/'+slug+"/"+slug1+"/"+slug2+"/")
	return render(request,'pdf_month.html',locals())

def check_report(request):
	current_year = datetime.now().year
	if request.method == "POST":
		cur_year = request.POST['select_year']
		cur_month = request.POST['select_month']
		board_report = Dashboard.objects.filter(date_month=cur_month, date_year=cur_year)
		total_listrec = []
		total_recall = Dashboard.objects.filter(date_month=cur_month, date_year=cur_year)
		for i in total_recall:
			total_listrec.append(i.receviable)
			total_recsum_detail = sum(total_listrec)
		total_listpay = []
		total_payall = Dashboard.objects.filter(date_month=cur_month, date_year=cur_year)
		for j in total_payall:
			total_listpay.append(j.payment)
			total_paysum_detail = sum(total_listpay)
			diff_total_detail = total_recsum_detail - total_paysum_detail
	return render(request,'checkreport.html',locals())


def dashboard_report(request):
	if request.method=="GET":
		total_listrec = []
		total_listpay = []
		s_time = request.GET.get('select_month')
		if s_time == 'today':
			today = date.today()
			board_report= Dashboard.objects.filter(date__gte=today).order_by('-date')
			total_recall = Dashboard.objects.filter(date__gte=today)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum_detail = sum(total_listrec)
			total_listpay = []
			total_payall = Dashboard.objects.filter(date__gte=today)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum_detail = sum(total_listpay)
				diff_total_detail = total_recsum_detail - total_paysum_detail
			return render(request,'dashboard_reportdaily.html',locals())
		if s_time == 'yesterday':
			today = datetime.datetime.now()
			yesterday = datetime.datetime.now() - timedelta(days=1)
			board_report= Dashboard.objects.filter(date__gte=yesterday).filter(date__lt=today).order_by('-date')
			total_recall = Dashboard.objects.filter(date__gte=yesterday).filter(date__lt=today)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum_detail = sum(total_listrec)
			total_payall = Dashboard.objects.filter(date__gte=yesterday).filter(date__lt=today)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum_detail = sum(total_listpay)
				diff_total_detail = total_recsum_detail - total_paysum_detail
			return render(request,'dashboard_reportdaily.html',locals())
		if s_time == 'this_week':
			today = datetime.datetime.now()
			start_of_week = today - timedelta(days=today.weekday())
			end_of_week = start_of_week + timedelta(days=6)
			board_report = Dashboard.objects.filter(date__gte=start_of_week).filter(date__lt=end_of_week).order_by('-date')
			total_recall = Dashboard.objects.filter(date__gte=start_of_week).filter(date__lt=end_of_week)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum_detail = sum(total_listrec)
			total_payall = Dashboard.objects.filter(date__gte=start_of_week).filter(date__lt=end_of_week)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum_detail = sum(total_listpay)
				diff_total_detail = total_recsum_detail - total_paysum_detail
			return render(request,'dashboard_reportdaily.html',locals())
		if s_time == 'last_week':
			today = datetime.datetime.now()
			yesterday = today - timedelta(days=today.weekday())
			last_week = yesterday - timedelta(days=7)
			board_report = Dashboard.objects.filter(date__gte=last_week).filter(date__lt=yesterday).order_by('-date')
			total_recall = Dashboard.objects.filter(date__gte=last_week).filter(date__lt=yesterday)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum_detail = sum(total_listrec)
			total_payall = Dashboard.objects.filter(date__gte=last_week).filter(date__lt=yesterday)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum_detail = sum(total_listpay)
				diff_total_detail = total_recsum_detail - total_paysum_detail
			return render(request,'dashboard_reportdaily.html',locals())
		if s_time == 'this_month':
			today = datetime.datetime.now()
			year = datetime.datetime.now().year
			month =  datetime.datetime.now().month
			yesterday = datetime.datetime.now() - timedelta(days=1)
			last_week = datetime.datetime.now() - timedelta(days=7)
			last_month = today.replace(day=29) - timedelta(days=29)
			ninty = datetime.datetime.now() - timedelta(days=90)
			onety = datetime.datetime.now() - timedelta(days=180)
			last_year = datetime.datetime.now() - timedelta(days=365)
			start_of_week = today - timedelta(days=today.weekday())
			end_of_week = start_of_week + timedelta(days=6) 
			first = today.replace(day=1) 
			lastMonth = first - datetime.timedelta(days=1) 
			second = lastMonth - timedelta(days=30)
			lastquarter = ninty - timedelta(days=90)
			lastyear = last_year - timedelta(days=365)
			board_report = Dashboard.objects.filter(date__gte=last_month).filter(date__lt=today).order_by('-date')
			total_recall = Dashboard.objects.filter(date__gte=last_month).filter(date__lt=today)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum_detail = sum(total_listrec)
			total_payall = Dashboard.objects.filter(date__gte=last_month).filter(date__lt=today)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum_detail = sum(total_listpay)
				diff_total_detail = total_recsum_detail - total_paysum_detail
			return render(request,'dashboard_reportdaily.html',locals())
		if s_time == 'last_month':
			today = datetime.datetime.now()
			year = datetime.datetime.now().year
			month =  datetime.datetime.now().month
			yesterday = datetime.datetime.now() - timedelta(days=1)
			last_week = datetime.datetime.now() - timedelta(days=7)
			last_month = datetime.datetime.now() - timedelta(days=30)
			ninty = datetime.datetime.now() - timedelta(days=90)
			onety = datetime.datetime.now() - timedelta(days=180)
			last_year = datetime.datetime.now() - timedelta(days=365)
			start_of_week = today - timedelta(days=today.weekday())
			end_of_week = start_of_week + timedelta(days=6) 
			first = today.replace(day=1) 
			lastMonth = first - datetime.timedelta(days=1) 
			second = lastMonth - timedelta(days=30)
			lastquarter = ninty - timedelta(days=90)
			lastyear = last_year - timedelta(days=365)
			board_report = Dashboard.objects.filter(date__gte=second).filter(date__lt=lastMonth).order_by('-date')
			total_recall = Dashboard.objects.filter(date__gte=second).filter(date__lt=lastMonth)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum_detail = sum(total_listrec)
			total_payall = Dashboard.objects.filter(date__gte=second).filter(date__lt=lastMonth)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum_detail = sum(total_listpay)
				diff_total_detail = total_recsum_detail - total_paysum_detail
			return render(request,'dashboard_reportdaily.html',locals())
		if s_time == 'this_quarter':
			today = datetime.datetime.now()
			ninty = today.replace(day=1)  - timedelta(days=60)
			board_report = Dashboard.objects.filter(date__gte=ninty).filter(date__lt=today).order_by('-date')
			total_recall = Dashboard.objects.filter(date__gte=ninty).filter(date__lt=today)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum_detail = sum(total_listrec)
			total_payall = Dashboard.objects.filter(date__gte=ninty).filter(date__lt=today)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum_detail = sum(total_listpay)
				diff_total_detail = total_recsum_detail - total_paysum_detail
			return render(request,'dashboard_reportdaily.html',locals())
		if s_time == 'last_quarter':
			today = datetime.datetime.now()
			ninty = today.replace(day=1)  - timedelta(days=60)
			lastquarter = ninty - timedelta(days=90)
			board_report = Dashboard.objects.filter(date__gte=lastquarter).filter(date__lt=ninty).order_by('-date')
			total_recall = Dashboard.objects.filter(date__gte=lastquarter).filter(date__lt=ninty)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum_detail = sum(total_listrec)
			total_payall = Dashboard.objects.filter(date__gte=lastquarter).filter(date__lt=ninty)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum_detail = sum(total_listpay)
				diff_total_detail = total_recsum_detail - total_paysum_detail
			return render(request,'dashboard_reportdaily.html',locals())
		if s_time == 'this_year':
			today = datetime.datetime.now()
			la = today.replace(day=30,month=6)
			ly = la - timedelta(days=365)
			th_yr = ly + timedelta(days=396)
			board_report = Dashboard.objects.filter(date__gte=ly).filter(date__lt=th_yr).order_by('-date')
			total_recall = Dashboard.objects.filter(date__gte=ly).filter(date__lt=th_yr)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum_detail = sum(total_listrec)
			total_payall = Dashboard.objects.filter(date__gte=ly).filter(date__lt=th_yr)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum_detail = sum(total_listpay)
				diff_total_detail = total_recsum_detail - total_paysum_detail
			return render(request,'dashboard_reportdaily.html',locals())
		if s_time == 'last_year':
			today = datetime.datetime.now()
			ty = today.replace(day=31,month=7) - timedelta(days=366)
			lastyear = ty - timedelta(days=396)
			board_report = Dashboard.objects.filter(date__gte=lastyear).filter(date__lt=ty).order_by('-date')
			total_recall = Dashboard.objects.filter(date__gte=lastyear).filter(date__lt=ty)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum_detail = sum(total_listrec)
			total_payall = Dashboard.objects.filter(date__gte=lastyear).filter(date__lt=ty)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum_detail = sum(total_listpay)
				diff_total_detail = total_recsum_detail - total_paysum_detail
			return render(request,'dashboard_reportdaily.html',locals())
	return render(request,'dashboard_reportdaily.html',locals())


def report(request):
	board = Dashboard.objects.all()
	try:
		if request.method=="POST":
			value= request.POST['phone']
			total_listrec = []
			total_listpay = []             
		if value == "Telephone Bills":
			board = Dashboard.objects.filter(heads = value)
			total_recall = Dashboard.objects.filter(heads = value)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum = sum(total_listrec)
			total_payall = Dashboard.objects.filter(heads = value)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum = sum(total_listpay)
			diff_total = total_recsum - total_paysum
			return render(request,'report_detail.html',locals())
		elif  value == "Loans":     
			board = Dashboard.objects.filter(heads = value)
			total_recall = Dashboard.objects.filter(heads = value)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum = sum(total_listrec)
			total_payall = Dashboard.objects.filter(heads = value)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum = sum(total_listpay)
			diff_total = total_recsum - total_paysum
			return render(request,'report_detail.html',locals())
		elif  value == "Misllanious":     
			board = Dashboard.objects.filter(heads = value)
			total_recall = Dashboard.objects.filter(heads = value)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum = sum(total_listrec)
			total_payall = Dashboard.objects.filter(heads = value)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum = sum(total_listpay)
			diff_total = total_recsum - total_paysum
			return render(request,'report_detail.html',locals())
		elif  value == "Salary":     
			board = Dashboard.objects.filter(heads = value)
			total_recall = Dashboard.objects.filter(heads = value)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum = sum(total_listrec)
			total_payall = Dashboard.objects.filter(heads = value)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum = sum(total_listpay)
			diff_total = total_recsum - total_paysum
			return render(request,'report_detail.html',locals())
		elif  value == "Fee Collection":     
			board = Dashboard.objects.filter(heads = value)
			total_recall = Dashboard.objects.filter(heads = value)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum = sum(total_listrec)
			total_payall = Dashboard.objects.filter(heads = value)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum = sum(total_listpay)
			diff_total = total_recsum - total_paysum
			return render(request,'report_detail.html',locals())
		elif  value == "Current Bill":     
			board = Dashboard.objects.filter(heads = value)
			total_recall = Dashboard.objects.filter(heads = value)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum = sum(total_listrec)
			total_payall = Dashboard.objects.filter(heads = value)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum = sum(total_listpay)
			diff_total = total_recsum - total_paysum
			return render(request,'report_detail.html',locals())
		elif  value == "suspense":     
			board = Dashboard.objects.filter(heads = value)
			total_recall = Dashboard.objects.filter(heads = value)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum = sum(total_listrec)
			total_payall = Dashboard.objects.filter(heads = value)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum = sum(total_listpay)
			diff_total = total_recsum - total_paysum
			return render(request,'report_detail.html',locals())
		elif  value == "Rent":     
			board = Dashboard.objects.filter(heads = value)
			total_recall = Dashboard.objects.filter(heads = value)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum = sum(total_listrec)
			total_payall = Dashboard.objects.filter(heads = value)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum = sum(total_listpay)
			diff_total = total_recsum - total_paysum
			return render(request,'report_detail.html',locals())
		elif  value == "Transportation":     
			board = Dashboard.objects.filter(heads = value)
			total_recall = Dashboard.objects.filter(heads = value)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum = sum(total_listrec)
			total_payall = Dashboard.objects.filter(heads = value)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum = sum(total_listpay)
			diff_total = total_recsum - total_paysum
			return render(request,'report_detail.html',locals())
		elif  value == "Capitals":     
			board = Dashboard.objects.filter(heads = value)
			total_recall = Dashboard.objects.filter(heads = value)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum = sum(total_listrec)
			total_payall = Dashboard.objects.filter(heads = value)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum = sum(total_listpay)
			diff_total = total_recsum - total_paysum
			return render(request,'report_detail.html',locals())
		elif  value == "Advances":     
			board = Dashboard.objects.filter(heads = value)
			total_recall = Dashboard.objects.filter(heads = value)
			for i in total_recall:
				total_listrec.append(i.receviable)
				total_recsum = sum(total_listrec)
			total_payall = Dashboard.objects.filter(heads = value)
			for j in total_payall:
				total_listpay.append(j.payment)
				total_paysum = sum(total_listpay)
			diff_total = total_recsum - total_paysum
			return render(request,'report_detail.html',locals())
	except:
		pass
	return render(request,'reports.html',locals())

# Module -Transaction #6-loans - saving cattle loan Data Values- loan.html
# Created by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Sriya 
# Modified by - 2020-12-14 @ Karthik
# Modified by - 2020-12-14 @ charan
# Modified by - 2021-01-12 @ Karthik
import datetime
from django.db import connection
import mysql.connector
from mysql.connector import Error
def cloan(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			center=Center.objects.using(brch).all()
			route=Route.objects.using(brch).all()
			if request.method == "POST":
				details_form = Cloan.objects.using(brch).create(
				loan_type=request.POST["loan"],
				date=request.POST["dateform"],
				transaction_type=request.POST["transtype"],
				#route=request.POST["routecode"],
				center=request.POST["centername"],
				loan_no=request.POST["loanno"],
				loan_date=request.POST["dateform1"],
				principal_amt=request.POST["pamt"],
				interest_rate=request.POST["intrate"],
				flat_deminished=request.POST["flatdeminished"],
				loan_duration=request.POST["duartion"],
				interest_amt=round((((float(request.POST['pamt'])*float(request.POST['intrate'])*float(request.POST['duartion']))/(100*12))),2),
				total=round((((float(request.POST['pamt']))+((float(request.POST['pamt'])*float(request.POST['intrate'])*float(request.POST['duartion']))/(100*12)))),2),
				noofinstallments=request.POST["noinst"],
				installment_amt=round(((((float(request.POST['pamt']))+((float(request.POST['pamt'])*float(request.POST['intrate'])*float(request.POST['duartion']))/(100*12)))/(float(request.POST["noinst"])))),2),
				closingdate=request.POST["dateform2"]
				)
				details_form.save()
				messages.success(request, 'Your details have been saved!')
				cursor1 = connection.cursor()
				routeupdate1 = "update %s.school_cloan C ,%s.School_center C1 set route = C1.route_number  where C1.centre_code = C.center  "%(str(brch),str(brch))
				cursor1.execute(routeupdate1)
				
				
				
				#try:
				#    cursor = connection.cursor()    
				#    loan = "update school_cloan set interest_amt = principal_amt/120 "# where loan_no = %s "  %(loan_no)
				#    print(loan)
				#    cursor1.execute(loan)
				#except:
				#    return HttpResponse("no records")
			return render(request,'loan.html',locals())
		else:
			center=Center.objects.all()
			route=Route.objects.all()
			if request.method == "POST":
				details_form = Cloan.objects.create(
				loan_type=request.POST["loan"],
				date=request.POST["dateform"],
				transaction_type=request.POST["transtype"],
				#route=request.POST["routecode"],
				center=request.POST["centername"],
				loan_no=request.POST["loanno"],
				loan_date=request.POST["dateform1"],
				principal_amt=request.POST["pamt"],
				interest_rate=request.POST["intrate"],
				flat_deminished=request.POST["flatdeminished"],
				loan_duration=request.POST["duartion"],
				interest_amt=(((float(request.POST['pamt'])*float(request.POST['intrate'])*float(request.POST['duartion']))/(100*12))),
				total=(((float(request.POST['pamt']))+((float(request.POST['pamt'])*float(request.POST['intrate'])*float(request.POST['duartion']))/(100*12)))),
				noofinstallments=request.POST["noinst"],
				installment_amt=((((float(request.POST['pamt']))+((float(request.POST['pamt'])*float(request.POST['intrate'])*float(request.POST['duartion']))/(100*12)))/(float(request.POST["noinst"])))),
				closingdate=request.POST["dateform2"]
				)
				details_form.save()
				messages.success(request, 'Your details have been saved!')
				
				cursor1 = connection.cursor()
				routeupdate1 = "update %s.school_cloan C ,%s.School_center C1 set route = C1.route_number  where C1.centre_code = C.center and date = '%s' "%(str(brch),str(brch),date)
				cursor1.execute(routeupdate1)
				
				
				
				
				#try:
				#    cursor = connection.cursor()    
				#    loan = "update school_cloan set interest_amt = principal_amt/120 "# where loan_no = %s "  %(loan_no)
				#    print(loan)
				#    cursor1.execute(loan)
				#except:
				#    return HttpResponse("no records")
			return render(request,'loan.html',locals())
	except Exception as err:
		messages.error(request,err)
		return render(request,'loan.html',locals())# Module -Reports - masters #3 - Displaying the centerreport--centerreport.html# Created by - 2020-12-14 @ charan
# Modified by - 2020-12-14 @ charan 
# Modified by - 2020-12-14 @ charan
def centerreport(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		route = Route.objects.using(brch).all()
		center = Center.objects.using(brch).all()
		branch = Branch.objects.using(brch).all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode =  request.POST["routecode"]
			centercode = request.POST["centercode"]
			bankdetails = request.POST["bankdetails"]
			if centercode == "all" and routecode == "all" and bankdetails == "all":
				cr=Center.objects.using(brch).filter().distinct()
			elif centercode != "all" and routecode == "all" and bankdetails == "all":
				cr=Center.objects.using(brch).filter(centre_code=centercode).distinct()
			elif centercode == "all" and routecode != "all" and bankdetails == "all":
				cr=Center.objects.using(brch).filter(route_number=routecode).distinct()
			elif centercode != "all" and routecode != "all" and bankdetails == "all":
				cr=Center.objects.using(brch).filter(route_number=routecode).distinct()
			elif centercode == "all" and routecode == "all" and bankdetails == "withdetails":
				cr=Center.objects.using(brch).filter().distinct().exclude(bankname='Select').exclude(branch='Select').exclude(ifsc='Select').exclude(bankno='')
			elif centercode != "all" and routecode == "all" and bankdetails == "withdetails":
				cr=Center.objects.using(brch).filter(centre_code=centercode).distinct().exclude(bankname='Select').exclude(branch='Select').exclude(ifsc='Select').exclude(bankno='')
			elif centercode == "all" and routecode != "all" and bankdetails == "withdetails":
				cr=Center.objects.using(brch).filter(route_number=routecode).distinct().exclude(bankname='Select').exclude(branch='Select').exclude(ifsc='Select').exclude(bankno='')
			elif centercode != "all" and routecode != "all" and bankdetails == "withdetails":
				cr=Center.objects.using(brch).filter(centre_code=centercode,route_number=routecode).distinct().exclude(bankname='Select').exclude(branch='Select').exclude(ifsc='Select').exclude(bankno='')
			elif centercode == "all" and routecode == "all" and bankdetails == "withoutdetails":
				cr=Center.objects.using(brch).filter(bankname = 'Select').distinct()
			elif centercode != "all" and routecode == "all" and bankdetails == "withoutdetails":
				cr=Center.objects.using(brch).filter(centre_code=centercode,bankname = 'Select').distinct()
			elif centercode == "all" and routecode != "all" and bankdetails == "withoutdetails":
				cr=Center.objects.using(brch).filter(route_number=routecode,bankname = 'Select').distinct()
			elif centercode != "all" and routecode != "all" and bankdetails == "withoutdetails":
				cr=Center.objects.using(brch).filter(centre_code=centercode,route_number=routecode,bankname = 'Select').distinct()

		return render(request,'centerreport.html',locals())
	else:
		route = Route.objects.all()
		center = Center.objects.all()
		branch = Branch.objects.all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode =  request.POST["routecode"]
			centercode = request.POST["centercode"]
			bankdetails = request.POST["bankdetails"]
			if centercode == "all" and routecode == "all" and bankdetails == "all":
				cr=Center.objects.filter().distinct()
			elif centercode != "all" and routecode == "all" and bankdetails == "all":
				cr=Center.objects.filter(centre_code=centercode).distinct()
			elif centercode == "all" and routecode != "all" and bankdetails == "all":
				cr=Center.objects.filter(route_number=routecode).distinct()
			elif centercode != "all" and routecode != "all" and bankdetails == "all":
				cr=Center.objects.filter(route_number=routecode).distinct()
			elif centercode == "all" and routecode == "all" and bankdetails == "withdetails":
				cr=Center.objects.filter().distinct()
			elif centercode != "all" and routecode == "all" and bankdetails == "withdetails":
				cr=Center.objects.filter(centre_code=centercode).distinct()
			elif centercode == "all" and routecode != "all" and bankdetails == "withdetails":
				cr=Center.objects.filter(route_number=routecode).distinct()
			elif centercode != "all" and routecode != "all" and bankdetails == "withdetails":
				cr=Center.objects.filter(centre_code=centercode,route_number=routecode).distinct()
			elif centercode == "all" and routecode == "all" and bankdetails == "withoutdetails":
				cr=Center.objects.filter(bankname = 'select').distinct()
			elif centercode != "all" and routecode == "all" and bankdetails == "withoutdetails":
				cr=Center.objects.filter(centre_code=centercode,bankname = 'select').distinct()
			elif centercode == "all" and routecode != "all" and bankdetails == "withoutdetails":
				cr=Center.objects.filter(route_number=routecode,bankname = 'select').distinct()
			elif centercode != "all" and routecode != "all" and bankdetails == "withoutdetails":
				cr=Center.objects.filter(centre_code=centercode,route_number=routecode,bankname = 'select').distinct()

		return render(request,'centerreport.html',locals())

def centerreportdetails(request,slug):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		route = Route.objects.using(brch).all()
		center = Center.objects.using(brch).all()
		branch = Branch.objects.using(brch).all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.session.has_key('name'):
			center = Center.objects.using(brch).filter(centre_code = slug).order_by('centre_code')
		#return HttpResponseRedirect("/centerreportdetails/"+slug+"/")
		
		return render(request,'centerdetails.html',locals())
	else:
		route = Route.objects.all()
		center = Center.objects.all()
		branch = Branch.objects.all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.session.has_key('name'):
			center = Center.objects.filter(centre_code = slug).order_by('centre_code')
		#return HttpResponseRedirect("/centerreportdetails/"+slug+"/")
		
		return render(request,'centerdetails.html',locals())

# Module -Reports - masters #3 - Displaying the centerreport--centerreport.html
# Created by - 2020-12-14 @ charan
# Modified by - 2020-12-14 @ charan 
# Modified by - 2020-12-14 @ charan
def centerreportbank(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		route = Route.objects.using(brch).all()
		center = Center.objects.using(brch).all()
		branch = Branch.objects.using(brch).all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode =  request.POST["routecode"]
			centercode = request.POST["centercode"]
			if routecode == 'all' and centercode == 'all':
				cr = Center.objects.using(brch).filter().distinct()
			elif routecode == 'all' and centercode != 'all':
				cr = Center.objects.using(brch).filter(centre_code = centercode).distinct()
			elif centercode == 'all' and routecode != 'all':
				cr = Center.objects.using(brch).filter(route_number = routecode).distinct()
			else:
				cr = Center.objects.using(brch).filter(route_number = routecode,centre_code=centercode).distinct()
		return render(request,'centerreportbank.html',locals())
	else:
		route = Route.objects.all()
		center = Center.objects.all()
		branch = Branch.objects.all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode =  request.POST["routecode"]
			centercode = request.POST["centercode"]
			if routecode == 'all' and centercode == 'all':
				cr = Center.objects.filter().distinct()
			elif routecode == 'all' and centercode != 'all':
				cr = Center.objects.filter(centre_code = centercode).distinct()
			elif centercode == 'all' and routecode != 'all':
				cr = Center.objects.filter(route_number = routecode).distinct()
			else:
				cr = Center.objects.filter(route_number = routecode,centre_code=centercode).distinct()
		return render(request,'centerreportbank.html',locals())



def branchreport(request):
	branch = Branch.objects.all()
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day =1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	# return HttpResponse(end_of_m)
	if request.method == "POST":
		datefrom = request.POST["datefrom"]
		dateto = request.POST["dateto"]
		branchcode = request.POST["branchcode"]
		
		if branchcode == 'all':
			br = Branch.objects.filter().distinct()
		else:
			br = Branch.objects.filter(code = branchcode).distinct()
	return render(request,'branchreport.html',locals())

def routereport(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:

		route = Route.objects.using(brch).all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode = request.POST["routecode"]
			
			if routecode == "all":
				rr = Route.objects.using(brch).filter().distinct()
			else:
				rr = Route.objects.using(brch).filter(Route_number = routecode).distinct()
	else:			
		route = Route.objects.all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode = request.POST["routecode"]
			
			if routecode == "all":
				rr = Route.objects.filter().distinct()
			else:
				rr = Route.objects.filter(Route_number = routecode).distinct()
	return render(request,'routereport.html',locals())

def additionsreport(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:

		additions = Additions.objects.using(brch).all()
		center = Center.objects.using(brch).all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			centercode = request.POST["centercode"]
			
			if centercode == "all":
				ar = Additions.objects.using(brch).filter().distinct()
			else:
				ar = Additions.objects.using(brch).filter(centercode = centercode).distinct()
	else:			
		route = Additions.objects.all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			centercode = request.POST["centercode"]
			
			if centercode == "all":
				ar = Additions.objects.filter().distinct()
			else:
				ar = Additions.objects.filter(centercode = centercode).distinct()
	return render(request,'additionsreport.html',locals())


def supervisorreport(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		supervisor = Supervisor.objects.using(brch).all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			supervisorcode = request.POST["supervisorcode"]

			if supervisorcode == "all":
				sr = Supervisor.objects.using(brch).filter().distinct()
			else:
				sr = Supervisor.objects.using(brch).filter(code = supervisorcode).distinct()
	else:
		supervisor = Supervisor.objects.all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			supervisorcode = request.POST["supervisorcode"]

			if supervisorcode == "all":
				sr = Supervisor.objects.filter().distinct()
			else:
				sr = Supervisor.objects.filter(code = supervisorcode).distinct()
	return render(request,'supervisorreport.html',locals())

def agentreport(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		agent = Agent.objects.using(brch).all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			agentcode = request.POST["agentcode"]

			if agentcode == "all":
				ar = Agent.objects.using(brch).filter().distinct()
			else: 
				ar = Agent.objects.using(brch).filter(code = agentcode).distinct()
	else:
		agent = Agent.objects.all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			agentcode = request.POST["agentcode"]

			if agentcode == "all":
				ar = Agent.objects.filter().distinct()
			else: 
				ar = Agent.objects.filter(code = agentcode).distinct()
	return render(request,'agentreport.html',locals())

def departmentreport(request):
	department = Department.objects.all()
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day =1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	# return HttpResponse(end_of_m)
	if request.method == "POST":
		datefrom = request.POST["datefrom"]
		dateto = request.POST["dateto"]
		departmentcode = request.POST["departmentcode"]
		if departmentcode == "all":
			dr = Department.objects.filter().distinct()
		else:
			 dr = Department.objects.filter(dcode = departmentcode).distinct()
	return render(request,'departmentreport.html',locals())

def rolereport(request):
	role = Role.objects.all()
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day =1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	# return HttpResponse(end_of_m)
	if request.method == "POST":
		datefrom = request.POST["datefrom"]
		dateto = request.POST["dateto"]
		rolecode = request.POST["role"]
		if rolecode == "all":
			rr1 = Role.objects.filter().distinct()
		else:
			 rr1 = Role.objects.filter(rcode = rolecode).distinct()
	return render(request,'rolereport.html',locals())

def officereport(request):
	office = Office.objects.all()
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day =1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	# return HttpResponse(end_of_m)
	if request.method == "POST":
		datefrom = request.POST["datefrom"]
		dateto = request.POST["dateto"]
		officecode = request.POST["officecode"]
		if officecode =="all":
			ofr = Office.objects.filter().distinct()
		else:
			ofr = Office.objects.filter(ocode = officecode).distinct()
	return render(request,'officereport.html',locals())

def villagereport(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
	
		village = Village.objects.using(brch).all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			villagecode = request.POST["villagecode"]
			if villagecode =="all":
				vr = Village.objects.using(brch).filter().distinct()
			else:
				vr = Village.objects.using(brch).filter(code = villagecode).distinct()
	else:

		village = Village.objects.all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			villagecode = request.POST["villagecode"]
			if villagecode =="all":
				vr = Village.objects.filter().distinct()
			else:
				vr = Village.objects.filter(code = villagecode).distinct()
	return render(request,'villagereport.html',locals())


def milktypereport(request):
	milktype = Milktype.objects.all()
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day =1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	# return HttpResponse(end_of_m)
	if request.method == "POST":
		datefrom = request.POST["datefrom"]
		dateto = request.POST["dateto"]
		milktypecode = request.POST["milktypecode"]
		if milktypecode =="all":
			mtr = Milktype.objects.filter().distinct()
		else:
			mtr = Milktype.objects.filter(code = milktypecode).distinct()
	
	return render(request,'milktypereport.html',locals())

def categoryreport(request):
	category = Category.objects.all()
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day =1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	# return HttpResponse(end_of_m)
	if request.method == "POST":
		datefrom = request.POST["datefrom"]
		dateto = request.POST["dateto"]
		categorycode = request.POST["categorycode"]
		if categorycode =="all":
			cr1 = Category.objects.filter().distinct()
		else:
			cr1 = Category.objects.filter(code = categorycode).distinct()
	
	return render(request,'categoryreport.html',locals())


def formulaereport(request):
	
	formulae = Formulae.objects.all()
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day =1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	# return HttpResponse(end_of_m)
	if request.method == "POST":
		datefrom = request.POST["datefrom"]
		dateto = request.POST["dateto"]
		formulaename = request.POST["formulaename"]
		if formulaename =="all":
			fr = Formulae.objects.filter().distinct()
		else:
			fr = Formulae.objects.filter(name = formulaename).distinct()
	
	return render(request,'formulareport.html',locals())
# Module -Reports - masters #4 - Displaying the loanreport--loanreport.html
# Created by - 2020-12-14 @ Sriya
# Modified by - 2020-12-14 @ Sriya 
# Modified by - 2020-12-14 @ Charan
# Modified by - 2021-02-05 @ Bindu

def loanreport(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		route = Route.objects.using(brch).all()
		center = Center.objects.using(brch).all()
		deposit = Deposit.objects.using(brch).all()
		cloan = Cloan.objects.using(brch).all()
		branch = Branch.objects.using(brch).all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode =  request.POST["routecode"]
			centercode = request.POST["centercode"]
			if routecode == 'all' and centercode == 'all':
				lc = Cloan.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
			elif routecode == 'all' and centercode != 'all':
				lc = Cloan.objects.using(brch).filter(date__range=[datefrom, dateto],center=centercode).distinct()
			elif centercode == 'all' and routecode != 'all':
				lc = Cloan.objects.using(brch).filter(date__range=[datefrom, dateto],route = routecode).distinct()
			else:
				lc = Cloan.objects.using(brch).filter(date__range=[datefrom, dateto],route=routecode,center=centercode).distinct()
		return render(request,'loanreport.html',locals())

	else:
		route = Route.objects.all()
		center = Center.objects.all()
		deposit = Deposit.objects.all()
		cloan = Cloan.objects.all()
		branch = Branch.objects.all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode =  request.POST["routecode"]
			centercode = request.POST["centercode"]
			if routecode == 'all' and centercode == 'all':
				lc = Cloan.objects.filter(date__range=[datefrom, dateto]).distinct()
			elif routecode == 'all' and centercode != 'all':
				lc = Cloan.objects.filter(date__range=[datefrom, dateto],center=centercode).distinct()
			elif centercode == 'all' and routecode != 'all':
				lc = Cloan.objects.filter(date__range=[datefrom, dateto],route = routecode).distinct()
			else:
				lc = Cloan.objects.filter(date__range=[datefrom, dateto],route=routecode,center=centercode).distinct()
		return render(request,'loanreport.html',locals())


class GeneratePdfLoanreport(View):
	def get(self, request,slug,slug1,slug2,slug3, *args, **kwargs):
		template = get_template('pdf_loanreport.html')
		today = date.today()
		start_of_yr = today.replace(day =1, month=4)
		end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			if slug3 == 'all' and slug2 == 'all':
				data = Cloan.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
			elif slug3 == 'all' and slug2 != 'all':
				data = Cloan.objects.using(brch).filter(date__range=[slug, slug1],center=slug2).distinct()
			elif slug2 == 'all' and slug3 != 'all':
				data = Cloan.objects.using(brch).filter(date__range=[slug, slug1],route = slug3).distinct()
			else:
				data = Cloan.objects.using(brch).filter(date__range=[slug, slug1],route=slug3,center=slug2).distinct()

		else:
			if slug3 == 'all' and slug2 == 'all':
				data = Cloan.objects.filter(date__range=[slug, slug1]).distinct()
			elif slug3 == 'all' and slug2 != 'all':
				data = Cloan.objects.filter(date__range=[slug, slug1],center=slug2).distinct()
			elif slug2 == 'all' and slug3 != 'all':
				data = Cloan.objects.filter(date__range=[slug, slug1],route = slug3).distinct()
			else:
				data = Cloan.objects.filter(date__range=[slug, slug1],route=slug3,center=slug2).distinct()

		context = {
			'datefrom': slug,
			'dateto': slug1,
			'centercode': slug2,
			'routecode': slug3,
			'data':data,

		}
		html = template.render(context)
		pdf = render_to_pdf("pdf_loanreport.html",context)
		if pdf:
			response = HttpResponse(pdf,content_type = "application/pdf")
			filename = slug+"_"+slug1+"_"+slug2+"_"+slug3+".pdf"
			content = "inline; filename=%s" %(filename)
			download = request.GET.get("download")
			if download:
				content = "attachment; filename=%s" %(filename)
			response['Content-Disposition'] = content
			return response
		return HttpResponse("Not Found")


def excel_loanreport(request,slug,slug1,slug2,slug3):
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day=1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	#data = RPT_consolidated.objects.filter(date_gte=slug, date_lte=slug1 , selecting=slug , centercode=slug3 , routecode=slug4)
	#Daily_data.objects.filter(date__range=[datefrom, dateto], routecode=routecode)
	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="loanreport.xls"'
	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('loanreport', cell_overwrite_ok=True)
	row_num = 0
	font_style = xlwt.XFStyle()
	font_style.font.bold = True
	font_date = xlwt.XFStyle()
	font_date.num_format_str = 'D-MM-YYYY'
	columns = ['loan_date','closingdate','route','loan_no','center','principal_amt','noofinstallments','interest_rate','loan_duration','interest_amt','installment_amt']
	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style)
	font_style = xlwt.XFStyle()
	#x = datetime.strptime(date, "%d/%m/%Y")
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		if slug3 == 'all' and slug2 == 'all':
			rows = Cloan.objects.using(brch).filter(date__range=[slug, slug1]).values_list(
			'loan_date','closingdate','route','loan_no','center','principal_amt','noofinstallments','interest_rate','loan_duration','interest_amt','installment_amt')
		elif slug3 == 'all' and slug2 != 'all':
			rows = Cloan.objects.using(brch).using(brch).filter(date__range=[slug, slug1],center=slug2).values_list(
			'loan_date','closingdate','route','loan_no','center','principal_amt','noofinstallments','interest_rate','loan_duration','interest_amt','installment_amt')
		elif slug2 == 'all' and slug3 != 'all':
			rows = Cloan.objects.using(brch).filter(date__range=[slug, slug1],route = slug3).values_list(
			'loan_date','closingdate','route','loan_no','center','principal_amt','noofinstallments','interest_rate','loan_duration','interest_amt','installment_amt')
		else:
			rows = Cloan.objects.using(brch).filter(date__range=[slug, slug1],route=slug3,center=slug2).values_list(
			'loan_date','closingdate','route','loan_no','center','principal_amt','noofinstallments','interest_rate','loan_duration','interest_amt','installment_amt')

		if slug3 == 'all' and slug2 == 'all':
			rows = Cloan.objects.filter(date__range=[slug, slug1]).values_list(
			'loan_date','closingdate','route','loan_no','center','principal_amt','noofinstallments','interest_rate','loan_duration','interest_amt','installment_amt')
		elif slug3 == 'all' and slug2 != 'all':
			rows = Cloan.objects.filter(date__range=[slug, slug1],center=slug2).values_list(
			'loan_date','closingdate','route','loan_no','center','principal_amt','noofinstallments','interest_rate','loan_duration','interest_amt','installment_amt')
		elif slug2 == 'all' and slug3 != 'all':
			rows = Cloan.objects.filter(date__range=[slug, slug1],route = slug3).values_list(
			'loan_date','closingdate','route','loan_no','center','principal_amt','noofinstallments','interest_rate','loan_duration','interest_amt','installment_amt')
		else:
			rows = Cloan.objects.filter(date__range=[slug, slug1],route=slug3,center=slug2).values_list(
			'loan_date','closingdate','route','loan_no','center','principal_amt','noofinstallments','interest_rate','loan_duration','interest_amt','installment_amt')
	
	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
			ws.write(row_num, 0, row[0], font_date)
			ws.write(row_num, 1, row[1], font_date)

	wb.save(response)
	return response


# Module -Transaction #6-loans - saving deposit Data Values- deposit.html
# Created by - 2020-12-14 @ Bindu
# Modified by - 2020-12-14 @ Bindu 
# Modified by - 2020-12-14 @ Bindu
def deposit(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			center = Center.objects.using(brch).all()
			agent = Agent.objects.using(brch).all()
			if request.method == "POST":
				details_form = Deposit.objects.using(brch).create(
					date = date.today(),
					issuedto = request.POST["Issued to"],
					name = request.POST["Name"],
					depositno = request.POST["depositno"], 
					centercode = request.POST["Center"],
					transporter = request.POST["Transporter"],
					agent_name=request.POST["Agent"],
					modeofdeposit = request.POST["Modeofdeposit"],
					routename = request.POST["Routename"],
					checkorddno=request.POST["cheque"],
					rtgs=request.POST["rtgs"],
					amount = request.POST["Amount"],
					remarks = request.POST["Remarks"],
					closingdate = request.POST["Closedate"]

			)
				details_form.save(using=brch)
				messages.success(request, 'Your details have been saved!')
			return render(request,'deposit.html',locals()) 
		else:
			center = Center.objects.all()
			agent = Agent.objects.all()
			if request.method == "POST":
				details_form = Deposit.objects.create(
					date = date.today(),
					issuedto = request.POST["Issued to"],
					name = request.POST["Name"],
					depositno = request.POST["depositno"], 
					centercode = request.POST["Center"],
					transporter = request.POST["Transporter"],
					agent_name=request.POST["Agent"],
					modeofdeposit = request.POST["Modeofdeposit"],
					routename = request.POST["Routename"],
					checkorddno=request.POST["cheque"],
					rtgs=request.POST["rtgs"],
					amount = request.POST["Amount"],
					remarks = request.POST["Remarks"],
					closingdate = request.POST["Closedate"]

			)
				details_form.save()
				messages.success(request, 'Your details have been saved!')
			return render(request,'deposit.html',locals())
	except Exception as err:
		messages.success(request,err)
		return render(request,'deposit.html',locals()) 

# Module -Reports - masters #5 - Displaying the depositreport--depositreport.html
# Created by - 2020-12-14 @ Bindu
# Modified by - 2020-12-14 @ Bindu 
# Modified by - 2020-12-14 @ Bindu
def depositreport(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		route = Route.objects.using(brch).all()
		center = Center.objects.using(brch).all()
		deposit = Deposit.objects.using(brch).all()
		branch = Branch.objects.using(brch).all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode =  request.POST["routecode"]
			centercode = request.POST["centercode"]
			if routecode == 'all' and centercode == 'all':
				dr = Deposit.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
			elif routecode == 'all' and centercode != 'all':
				dr = Deposit.objects.using(brch).filter(date__range=[datefrom, dateto],centercode=centercode).distinct()
			elif centercode == 'all' and routecode != 'all':
				dr = Deposit.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
			else:
				dr = Deposit.objects.using(brch).filter(date__range=[datefrom, dateto],centercode=centercode).distinct()
		return render(request,'depositreport.html',locals())

	else:
		route = Route.objects.all()
		center = Center.objects.all()
		deposit = Deposit.objects.all()
		branch = Branch.objects.all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode =  request.POST["routecode"]
			centercode = request.POST["centercode"]
			if routecode == 'all' and centercode == 'all':
				dr = Deposit.objects.filter(date__range=[datefrom, dateto]).distinct()
			elif routecode == 'all' and centercode != 'all':
				dr = Deposit.objects.filter(date__range=[datefrom, dateto],centercode=centercode).distinct()
			elif centercode == 'all' and routecode != 'all':
				dr = Deposit.objects.filter(date__range=[datefrom, dateto]).distinct()
			else:
				dr = Deposit.objects.filter(date__range=[datefrom, dateto],centercode=centercode).distinct()
		return render(request,'depositreport.html',locals())

class GeneratePdfDepositreport(View):
	def get(self, request,slug,slug1,slug2,slug3, *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_depositreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if slug2 == 'all' and slug3 == 'all':
				data = Deposit.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
			elif slug2 == 'all' and slug3 != 'all':
				data = Deposit.objects.using(brch).filter(date__range=[slug, slug1],centercode=slug3).distinct()
			elif slug3 == 'all' and slug2 != 'all':
				data = Deposit.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
			else:
				data = Deposit.objects.using(brch).filter(date__range=[slug, slug1],centercode=slug3).distinct()
		
			context = {
				'routecode':slug2,
				'centercode': slug3,
				'datefrom':slug,
				'dateto':slug1,
				'data':data,

			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_depositreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+""+slug1+""+slug2+"_"+slug3+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		else:
			template = get_template('pdf_depositreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if slug2 == 'all' and slug3 == 'all':
				data = Deposit.objects.filter(date__range=[slug, slug1]).distinct()
			elif slug2 == 'all' and slug3 != 'all':
				data = Deposit.objects.filter(date__range=[slug, slug1],centercode=slug3).distinct()
			elif slug3 == 'all' and slug2 != 'all':
				data = Deposit.objects.filter(date__range=[slug, slug1]).distinct()
			else:
				data = Deposit.objects.filter(date__range=[slug, slug1],centercode=slug3).distinct()
		
			context = {
				'routecode':slug2,
				'centercode': slug3,
				'datefrom':slug,
				'dateto':slug1,
				'data':data,
			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_depositreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+""+slug1+""+slug2+"_"+slug3+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
def excel_depositreport(request,slug,slug1,slug2,slug3):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		#data = RPT_consolidated.objects.filter(date_gte=slug, date_lte=slug1 , selecting=slug , centercode=slug3 , routecode=slug4)
		#Daily_data.objects.filter(date__range=[datefrom, dateto], routecode=routecode)
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="deposit.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('depositreport', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MMM-YY'
		columns = ['date','closingdate','amount','modeofdeposit','issuedto','name','routename','depositno','remarks']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		
		if slug2 == 'all' and slug3 == 'all':
			rows = Deposit.objects.using(brch).filter(date__range=[slug, slug1]).distinct().values_list(
			'date','closingdate','amount','modeofdeposit','issuedto','name','routename','depositno','remarks'	
			)
		elif slug2 == 'all' and slug3 != 'all':
			rows = Deposit.objects.using(brch).filter(date__range=[slug, slug1],centercode=slug3).distinct().values_list(
			'date','closingdate','amount','modeofdeposit','issuedto','name','routename','depositno','remarks'	
			)
		elif slug3 == 'all' and slug2 != 'all':
			rows = Deposit.objects.using(brch).filter(date__range=[slug, slug1],routecode=slug2).distinct().values_list(
			'date','closingdate','amount','modeofdeposit','issuedto','name','routename','depositno','remarks'	
			)
		else:
			rows = Deposit.objects.using(brch).filter(date__range=[slug, slug1],centercode=slug3,routecode=slug2).distinct().values_list(
			'date','closingdate','amount','modeofdeposit','issuedto','name','routename','depositno','remarks'	
			)

		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
				ws.write(row_num, 1, row[1], font_date)
		wb.save(response)
		return response
	else:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		#data = RPT_consolidated.objects.filter(date_gte=slug, date_lte=slug1 , selecting=slug , centercode=slug3 , routecode=slug4)
		#Daily_data.objects.filter(date__range=[datefrom, dateto], routecode=routecode)
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="depositreport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('depositreport', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MMM-YY'
		columns = ['date','depositno','amount','modeofdeposit','issuedto','name','routename','closingdate','remarks']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		if slug2 == 'all' and slug3 == 'all':
			rows = Deposit.objects.using(brch).filter(date__range=[slug, slug1]).distinct().values_list(
			'date','closingdate','amount','modeofdeposit','issuedto','name','routename','depositno','remarks'	
			)
		elif slug2 == 'all' and slug3 != 'all':
			rows = Deposit.objects.using(brch).filter(date__range=[slug, slug1],centercode=slug3).distinct().values_list(
			'date','closingdate','amount','modeofdeposit','issuedto','name','routename','depositno','remarks'	
			)
		elif slug3 == 'all' and slug2 != 'all':
			rows = Deposit.objects.using(brch).filter(date__range=[slug, slug1],routecode=slug2).distinct().values_list(
			'date','closingdate','amount','modeofdeposit','issuedto','name','routename','depositno','remarks'	
			)
		else:
			rows = Deposit.objects.using(brch).filter(date__range=[slug, slug1],centercode=slug3,routecode=slug2).distinct().values_list(
			'date','closingdate','amount','modeofdeposit','issuedto','name','routename','depositno','remarks'	
			)
		
		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
				ws.write(row_num, 1, row[1], font_date)
		wb.save(response)
		return response
def additionsho1(request):
	try:		
		branch=Branch.objects.all().exclude(code='HO')
		if request.method == "POST":
			request.session['branchk'] = request.POST["brch"]
			av=Center.objects.using(request.POST["brch"]).all()
		return render(request,'additionsho.html',locals())
	except Exception as err:
		messages.error(request,err)
		return render(request,'additionsho.html',locals())
def additionsho(request):	#try:
		
	branch=Branch.objects.all().exclude(code='HO')
	
	if request.method == "POST":
		branch1=request.session['branchk']
		center=Center.objects.using(branch1).all()
		details_form = Additions.objects.using(branch1).create(
		date = request.POST["datefrom"],
		centercode = request.POST["centername"],
		cartage = request.POST["cartage"],
		cattlefeed=request.POST["cattle"],
		autofine = request.POST["autofine"],
		stores=request.POST["stores"],
		aarrears = request.POST["arrears"],
		medicine = request.POST["medicine"],
		aothers=request.POST["aothers"],
		stationary=request.POST["stationary"],
		commission = request.POST["comm"],
		emtcharges = request.POST["emtcharges"],
		seed = request.POST["seed"],
		insurance=request.POST["insurance"],
		rarrears=request.POST["rarrears"],
		rothers=request.POST["rothers"],
		remarks=request.POST["remarks"],
		)
		details_form.save(using=branch1)
		messages.success(request, 'Your details have been saved!')
	return render(request,'additionsho.html',locals())
	#except Exception as err:
	#	messages.error(request,err)
	#	return render(request,'additionsho.html',locals())
def additions(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			center=Center.objects.using(brch).all()
			
			cloan = Cloan.objects.using(brch).all()
			if request.method == "POST":
				details_form = Additions.objects.using(brch).create(
				date = request.POST["datefrom"],
				centercode = request.POST["centername"],
				cartage = request.POST["cartage"],
				cattlefeed=request.POST["cattle"],
				autofine = request.POST["autofine"],
				stores=request.POST["stores"],
				aarrears = request.POST["arrears"],
				medicine = request.POST["medicine"],
				aothers=request.POST["aothers"],
				stationary=request.POST["stationary"],
				commission = request.POST["comm"],
				emtcharges = request.POST["emtcharges"],
				seed = request.POST["seed"],
				insurance=request.POST["insurance"],
				rarrears=request.POST["rarrears"],
				rothers=request.POST["rothers"],
				remarks=request.POST["remarks"],
			)
				details_form.save(using=brch)
				messages.success(request, 'Your details have been saved!')
			return render(request,'additions.html',locals())
		else:
			center=Center.objects.all()
		
			cloan = Cloan.objects.all()
			if request.method == "POST":
				details_form = Additions.objects.create(
				date = request.POST["datefrom"],
				centercode = request.POST["centername"],
				cartage = request.POST["cartage"],
				cattlefeed=request.POST["cattle"],
				autofine = request.POST["autofine"],
				stores=request.POST["stores"],
				aarrears = request.POST["arrears"],
				medicine = request.POST["medicine"],
				aothers=request.POST["aothers"],
				stationary=request.POST["stationary"],
				commission = request.POST["comm"],
				emtcharges = request.POST["emtcharges"],
				seed = request.POST["seed"],
				insurance=request.POST["insurance"],
				rarrears=request.POST["rarrears"],
				rothers=request.POST["rothers"],
				remarks=request.POST["remarks"],
			)
				details_form.save()
				messages.success(request, 'Your details have been saved!')
			return render(request,'additions.html',locals())
	except Exception as err:
		messages.error(request,err)
		return render(request,'additions.html',locals())
# Module -Transaction #6-loans - saving refund Data Values- refund.html
# Created by - 2020-12-14 @ Bindu
# Modified by - 2020-12-14 @ Bindu 
# Modified by - 2020-12-14 @ Bindu
def refund(request):
	try:
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:	
			center=Center.objects.using(brch).all()
			cloan = Cloan.objects.using(brch).all()
			deposit= Deposit.objects.using(brch).all()
			if request.method == "POST":
				details_form = Refund.objects.using(brch).create(
					date = date.today(),
					issuedto = request.POST["Issued to"],
					name = request.POST["Name"],
					centercode = request.POST["Center"],
					loan_no = request.POST["cloan"],
					depositno=request.POST["depositno"],
					transporter = request.POST["Transporter"],
					agent_name=request.POST["Agent"],
					modeofreturn = request.POST["Modeofreturn"],
					routename = request.POST["Routename"],
					checkorddno=request.POST["cheque"],
					rtgs=request.POST["rtgs"],
					amount = request.POST["Amount"],
					remarks = request.POST["Remarks"],
					issueddate = request.POST["Issueddate"]
			)
				details_form.save(using=brch)
				messages.success(request, 'Your details have been saved!')
			return render(request,'refund.html',locals())
		else:
			center=Center.objects.all()
			cloan = Cloan.objects.all()
			if request.method == "POST":
				details_form = Refund.objects.create(
					date = date.today(),
					issuedto = request.POST["Issued to"],
					name = request.POST["Name"],
					centercode = request.POST["Center"],
					loan_no = request.POST["cloan"],
					depositno=request.POST["depositno"],
					transporter = request.POST["Transporter"],
					agent_name=request.POST["Agent"],
					modeofreturn = request.POST["Modeofreturn"],
					routename = request.POST["Routename"],
					checkorddno=request.POST["cheque"],
					rtgs=request.POST["rtgs"],
					amount = request.POST["Amount"],
					remarks = request.POST["Remarks"],
					issueddate = request.POST["Issueddate"]
			)
				details_form.save()
				messages.success(request, 'Your details have been saved!')
			return render(request,'refund.html',locals())
	except Exception as err:
		messages.error(request,err)
		return render(request,'refund.html',locals()) 
# Module -Reports - masters #6 - Displaying the refundreport--refundreport.html
# Created by - 2020-12-14 @ Bindu
# Modified by - 2020-12-14 @ Bindu 
# Modified by - 2020-12-14 @ Bindu
def refundreport(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		route = Route.objects.using(brch).all()
		center = Center.objects.using(brch).all()
		cloan = Cloan.objects.using(brch).all()
		refund = Refund.objects.using(brch).all()
		branch = Branch.objects.using(brch).all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode =  request.POST["routecode"]
			centercode = request.POST["centercode"]
			if routecode == 'all' and centercode == 'all':
				rr = Refund.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
			elif routecode == 'all' and centercode != 'all':
				rr = Refund.objects.using(brch).filter(date__range=[datefrom, dateto],centercode=centercode).distinct()
			elif centercode == 'all' and routecode != 'all':
				rr = Refund.objects.using(brch).filter(date__range=[datefrom, dateto]).distinct()
			else:
				rr = Refund.objects.using(brch).filter(date__range=[datefrom, dateto],centercode=centercode).distinct()
		return render(request,'refundreport.html',locals())
	else:
		route = Route.objects.all()
		center = Center.objects.all()
		cloan = Cloan.objects.all()
		refund = Refund.objects.all()
		branch = Branch.objects.all()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day =1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode =  request.POST["routecode"]
			centercode = request.POST["centercode"]
			if routecode == 'all' and centercode == 'all':
				rr = Refund.objects.filter(date__range=[datefrom, dateto]).distinct()
			elif routecode == 'all' and centercode != 'all':
				rr = Refund.objects.filter(date__range=[datefrom, dateto],centercode=centercode).distinct()
			elif centercode == 'all' and routecode != 'all':
				rr = Refund.objects.filter(date__range=[datefrom, dateto]).distinct()
			else:
				rr = Refund.objects.filter(date__range=[datefrom, dateto],centercode=centercode).distinct()
		return render(request,'refundreport.html',locals())

class GeneratePdfRefundreport(View):
	def get(self, request,slug,slug1,slug2,slug3, *args, **kwargs):
		brch = request.user.extendeduser.branch
		if request.user.extendeduser.branch == brch:
			template = get_template('pdf_refundreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if slug2 == 'all' and slug3 == 'all':
				data = Refund.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
			elif slug2 == 'all' and slug3 != 'all':
				data = Refund.objects.using(brch).filter(date__range=[slug, slug1],centercode=slug3).distinct()
			elif slug3 == 'all' and slug2 != 'all':
				data = Refund.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
			else:
				data = Refund.objects.using(brch).filter(date__range=[slug, slug1],centercode=slug3).distinct()
		
			context = {
				'routecode':slug2,
				'centercode': slug3,
				'datefrom':slug,
				'dateto':slug1,
				'data':data,

			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_refundreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+"_"+slug1+"_"+slug2+"_"+slug3+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")
		else:
			template = get_template('pdf_refundreport.html')
			today = date.today()
			start_of_yr = today.replace(day =1, month=4)
			end_of_yr = start_of_yr + relativedelta(months=11,days=31) - timedelta(days=1)
			if slug2 == 'all' and slug3 == 'all':
				data = Refund.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
			elif slug2 == 'all' and slug3 != 'all':
				data = Refund.objects.using(brch).filter(date__range=[slug, slug1],centercode=slug3).distinct()
			elif slug3 == 'all' and slug2 != 'all':
				data = Refund.objects.using(brch).filter(date__range=[slug, slug1]).distinct()
			else:
				data = Refund.objects.using(brch).filter(date__range=[slug, slug1],centercode=slug3).distinct()
		
			context = {
				'routecode':slug2,
				'centercode': slug3,
				'datefrom':slug,
				'dateto':slug1,
				'data':data,
			}
			html = template.render(context)
			pdf = render_to_pdf("pdf_refundreport.html",context)
			if pdf:
				response = HttpResponse(pdf,content_type = "application/pdf")
				filename = slug+"_"+slug1+"_"+slug2+"_"+slug3+".pdf"
				content = "inline; filename=%s" %(filename)
				download = request.GET.get("download")
				if download:
					content = "attachment; filename=%s" %(filename)
				response['Content-Disposition'] = content
				return response
			return HttpResponse("Not Found")

def excel_refundreport(request,slug,slug1,slug2,slug3):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		#data = RPT_consolidated.objects.filter(date_gte=slug, date_lte=slug1 , selecting=slug , centercode=slug3 , routecode=slug4)
		#Daily_data.objects.filter(date__range=[datefrom, dateto], routecode=routecode)
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="refundreport.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('refundreport', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MMM-YY'
		columns = ['date','issueddate','depositno','loan_no','amount','modeofreturn','issuedto','name','routename','remarks']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		if slug2 == 'all' and slug3 == 'all':
			rows = Refund.objects.using(brch).filter(date__range=[slug, slug1]).distinct().values_list(
			'date','issueddate','depositno','loan_no','amount','modeofreturn','issuedto','name','routename','remarks'
			)
		elif slug2 == 'all' and slug3 != 'all':
			rows = Refund.objects.using(brch).filter(date__range=[slug, slug1],centercode=slug3).distinct().values_list(
			'date','issueddate','depositno','loan_no','amount','modeofreturn','issuedto','name','routename','remarks'
			)
		elif slug3 == 'all' and slug2 != 'all':
			rows = Refund.objects.using(brch).filter(date__range=[slug, slug1],routecode=slug2).distinct().values_list(
			'date','issueddate','depositno','loan_no','amount','modeofreturn','issuedto','name','routename','remarks'
			)
		else:
			rows = Refund.objects.using(brch).filter(date__range=[slug, slug1],centercode=slug3,routecode=slug2).distinct().values_list(
			'date','issueddate','depositno','loan_no','amount','modeofreturn','issuedto','name','routename','remarks'
			)

		
		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
				ws.write(row_num, 1, row[1], font_date)

		wb.save(response)
		return response
	else:
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		#data = RPT_consolidated.objects.filter(date_gte=slug, date_lte=slug1 , selecting=slug , centercode=slug3 , routecode=slug4)
		#Daily_data.objects.filter(date__range=[datefrom, dateto], routecode=routecode)
		response = HttpResponse(content_type='application/ms-excel')
		response['Content-Disposition'] = 'attachment; filename="routewisebillabstract.xls"'
		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('routewisebillabstract', cell_overwrite_ok=True)
		row_num = 0
		font_style = xlwt.XFStyle()
		font_style.font.bold = True
		font_date = xlwt.XFStyle()
		font_date.num_format_str = 'D-MMM-YY'
		columns = ['date','closingdate','depositno','loan_no','amount','modeofdeposit','issuedto','name','routename','remarks']
		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style)
		font_style = xlwt.XFStyle()
		# x = datetime.strptime(date, "%d/%m/%Y")
		if slug2 == 'all' and slug3 == 'all':
			rows = Refund.objects.filter(date__range=[slug, slug1]).distinct().values_list(
			'date','issueddate','depositno','loan_no','amount','modeofreturn','issuedto','name','routename','remarks'			)
		elif slug2 == 'all' and slug3 != 'all':
			rows = Refund.objects.filter(date__range=[slug, slug1],centercode=slug3).distinct().values_list(
			'date','issueddate','depositno','loan_no','amount','modeofreturn','issuedto','name','routename','remarks'			)
		elif slug3 == 'all' and slug2 != 'all':
			rows = Refund.objects.filter(date__range=[slug, slug1],routecode=slug2).distinct().values_list(
			'date','issueddate','depositno','loan_no','amount','modeofreturn','issuedto','name','routename','remarks'			)
		else:
			rows = Refund.objects.filter(date__range=[slug, slug1],centercode=slug3,routecode=slug2).distinct().values_list(
			'date','issueddate','depositno','loan_no','amount','modeofreturn','issuedto','name','routename','remarks'			)
		
		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
				ws.write(row_num, 0, row[0], font_date)
				ws.write(row_num, 1, row[1], font_date)

		wb.save(response)
		return response


# Module -Reports - masters #2 - Displaying the bufallo_center_report -- bm-center-report.html
# Created by - 2020-12-14 @ Charan
# Modified by - 2020-12-14 @ Charan 
# Modified by - 2020-12-14 @ Charan
import datetime
from django.db import connection
import mysql.connector
from mysql.connector import Error
def bm_center_report(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		route = Route.objects.using(brch).all()
		center = Center.objects.using(brch).all().distinct()
		minmaxfat=MinMaxBuff.objects.using(brch).all()
		milk = Milktype.objects.all().distinct()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode = request.POST["routecode"]
			centercode = request.POST["centercode"]
			milktype = request.POST["milktype"]

			

			#cursor1 = connection.cursor()
			#DataDel = "delete from School_rpt_bufallomilk"
			#cursor1.execute(DataDel)
			#cursor = connection.cursor()
			#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
			#DataInsert = "insert into school_rpt_bufallomilk(centercode,from_date,to_date,rate_calculation,commission_type,milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,centerid,bcenterid,bfrom_date,bto_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate)select centercode ,D.from_date,D.to_date,rate_calculation,commission_type,D.milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,centercode_id,D.id,M.from_date,M.to_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			#cursor1.execute(DataInsert)  
			#print(DataInsert)     
			#cursor.execute(DataInsert)

			first = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			print(first)
			second = "select M.id id, centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			third = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and centercode = '%s' "%(str(datefrom),str(dateto),str(centercode))
			fourth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s' and centercode = '%s' "%(str(datefrom),str(dateto),str(milktype),str(centercode))
			fifth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			sixth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			seventh = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			eigth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			

			if routecode == 'all' and centercode == 'all' and milktype == 'all' :
				bmcenter = rpt_bufallomilk.objects.using(brch).raw(first)
			elif routecode == 'all' and centercode == 'all'and milktype != 'all' :
				bmcenter = rpt_bufallomilk.objects.using(brch).raw(second)
			elif routecode == 'all' and centercode != 'all' and milktype == 'all' :
				bmcenter = rpt_bufallomilk.objects.using(brch).raw(third)
			elif routecode == 'all' and centercode != 'all'and milktype != 'all' :
				bmcenter = rpt_bufallomilk.objects.using(brch).raw(fourth)
			elif routecode != 'all' and centercode == 'all'and milktype == 'all' :
				bmcenter = rpt_bufallomilk.objects.using(brch).raw(fifth)
			elif routecode != 'all' and centercode == 'all' and milktype != 'all' :
				bmcenter = rpt_bufallomilk.objects.using(brch).raw(sixth)
			elif routecode != 'all' and centercode != 'all'and milktype == 'all' :
				bmcenter = rpt_bufallomilk.objects.using(brch).raw(seventh)
			else:
				bmcenter = rpt_bufallomilk.objects.using(brch).raw(eigth)
	else:
		route = Route.objects.all()
		center = Center.objects.all().distinct()
		minmaxfat=MinMaxBuff.objects.all()
		milk = Milktype.objects.all().distinct()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode = request.POST["routecode"]
			centercode = request.POST["centercode"]
			milktype = request.POST["milktype"]


			#cursor1 = connection.cursor()
			#DataDel = "delete from School_rpt_bufallomilk"
			#cursor1.execute(DataDel)
			#cursor = connection.cursor()
			#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
			#DataInsert = "insert into school_rpt_bufallomilk(centercode,from_date,to_date,rate_calculation,commission_type,milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,centerid,bcenterid,bfrom_date,bto_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate)select centercode ,D.from_date,D.to_date,rate_calculation,commission_type,D.milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,centercode_id,D.id,M.from_date,M.to_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			#cursor1.execute(DataInsert)  
			#print(DataInsert)     
			#cursor.execute(DataInsert)

			first = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			print(first)
			second = "select M.id id, centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			third = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and centercode = '%s' "%(str(datefrom),str(dateto),str(centercode))
			fourth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s' and centercode = '%s' "%(str(datefrom),str(dateto),str(milktype),str(centercode))
			fifth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			sixth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			seventh = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			eigth = "select M.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id bcenterid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcenter D,school_minmaxbuff M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			

			if routecode == 'all' and centercode == 'all' and milktype == 'all' :
				bmcenter = rpt_bufallomilk.objects.using(brch).raw(first)
			elif routecode == 'all' and centercode == 'all'and milktype != 'all' :
				bmcenter = rpt_bufallomilk.objects.using(brch).raw(second)
			elif routecode == 'all' and centercode != 'all' and milktype == 'all' :
				bmcenter = rpt_bufallomilk.objects.using(brch).raw(third)
			elif routecode == 'all' and centercode != 'all'and milktype != 'all' :
				bmcenter = rpt_bufallomilk.objects.using(brch).raw(fourth)
			elif routecode != 'all' and centercode == 'all'and milktype == 'all' :
				bmcenter = rpt_bufallomilk.objects.using(brch).raw(fifth)
			elif routecode != 'all' and centercode == 'all' and milktype != 'all' :
				bmcenter = rpt_bufallomilk.objects.using(brch).raw(sixth)
			elif routecode != 'all' and centercode != 'all'and milktype == 'all' :
				bmcenter = rpt_bufallomilk.objects.using(brch).raw(seventh)
			else:
				bmcenter = rpt_bufallomilk.objects.using(brch).raw(eigth)
	   


	return render(request, 'bm-center-report.html', locals())

# Module -Reports - masters #2 - Displaying the bufallo_route_report--bm-route-report.html
# Created by - 2020-12-14 @ Charan
# Modified by - 2020-12-14 @ Charan
import datetime
from django.db import connection
import mysql.connector
from mysql.connector import Error
def bm_route_report(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		route = Route.objects.using(brch).all()
		center = Center.objects.using(brch).all().distinct()
		minmaxfat=MinMaxBuff.objects.using(brch).all()
		milk = Milktype.objects.all().distinct()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode = request.POST["routecode"]
			centercode = request.POST["centercode"]
			milktype = request.POST["milktype"]

			#cursor1 = connection.cursor()
			#DataDel = "delete from School_rpt_bufallomilk"
			#cursor1.execute(DataDel)
			#cursor = connection.cursor()
			#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
			#DataInsert = "insert into school_rpt_bufallomilk(Routecode,from_date,to_date,rate_calculation,commission_type,milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,routeid,brid,bfrom_date,bto_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate)select Routecode ,B.from_date,B.to_date,rate_calculation,commission_type,B.milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,routecode_id,B.id,M.from_date,M.to_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			#cursor1.execute(DataInsert)  
			#print(DataInsert)     
			#cursor.execute(DataInsert)

			first = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			second = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			third = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			fourth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			fifth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' "%(str(datefrom),str(dateto),str(routecode))
			sixth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' and B.milk_type = '%s' "%(str(datefrom),str(dateto),str(routecode),str(milktype))
			seventh = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' "%(str(datefrom),str(dateto),str(routecode))
			eigth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' and B.milk_type = '%s'"%(str(datefrom),str(dateto),str(routecode),str(milktype))

			if routecode == 'all' and centercode == 'all' and milktype == 'all' :
				bmroute = rpt_bufallomilk.objects.using(brch).raw(first)
			elif routecode == 'all' and centercode == 'all'and milktype != 'all' :
				bmroute = rpt_bufallomilk.objects.using(brch).raw(second)
			elif routecode == 'all' and centercode != 'all' and milktype == 'all' :
				bmroute = rpt_bufallomilk.objects.using(brch).raw(third)
			elif routecode == 'all' and centercode != 'all'and milktype != 'all' :
				bmroute = rpt_bufallomilk.objects.using(brch).raw(fourth)
			elif routecode != 'all' and centercode == 'all'and milktype == 'all' :
				bmroute = rpt_bufallomilk.objects.using(brch).raw(fifth)
			elif routecode != 'all' and centercode == 'all' and milktype != 'all' :
				bmroute = rpt_bufallomilk.objects.using(brch).raw(sixth)
			elif routecode != 'all' and centercode != 'all'and milktype == 'all' :
				bmroute = rpt_bufallomilk.objects.using(brch).raw(seventh)
			else:
				bmroute = rpt_bufallomilk.objects.using(brch).raw(eigth)
	else:
		route = Route.objects.all()
		center = Center.objects.all().distinct()
		minmaxfat=MinMaxBuff.objects.all()
		milk = Milktype.objects.all().distinct()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode = request.POST["routecode"]
			centercode = request.POST["centercode"]
			milktype = request.POST["milktype"]

			#cursor1 = connection.cursor()
			#DataDel = "delete from School_rpt_bufallomilk"
			#cursor1.execute(DataDel)
			#cursor = connection.cursor()
			#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
			#DataInsert = "insert into school_rpt_bufallomilk(Routecode,from_date,to_date,rate_calculation,commission_type,milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,routeid,brid,bfrom_date,bto_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate)select Routecode ,B.from_date,B.to_date,rate_calculation,commission_type,B.milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,routecode_id,B.id,M.from_date,M.to_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			#cursor1.execute(DataInsert)  
			#print(DataInsert)     
			#cursor.execute(DataInsert)

			first = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			second = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			third = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			fourth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			fifth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' "%(str(datefrom),str(dateto),str(routecode))
			sixth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' and B.milk_type = '%s' "%(str(datefrom),str(dateto),str(routecode),str(milktype))
			seventh = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' "%(str(datefrom),str(dateto),str(routecode))
			eigth = "select B.id id, Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,routecode_id routeid,B.id brid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkroute B,school_minmaxbuff M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' and B.milk_type = '%s'"%(str(datefrom),str(dateto),str(routecode),str(milktype))

			if routecode == 'all' and centercode == 'all' and milktype == 'all' :
				bmroute = rpt_bufallomilk.objects.using(brch).raw(first)
			elif routecode == 'all' and centercode == 'all'and milktype != 'all' :
				bmroute = rpt_bufallomilk.objects.using(brch).raw(second)
			elif routecode == 'all' and centercode != 'all' and milktype == 'all' :
				bmroute = rpt_bufallomilk.objects.using(brch).raw(third)
			elif routecode == 'all' and centercode != 'all'and milktype != 'all' :
				bmroute = rpt_bufallomilk.objects.using(brch).raw(fourth)
			elif routecode != 'all' and centercode == 'all'and milktype == 'all' :
				bmroute = rpt_bufallomilk.objects.using(brch).raw(fifth)
			elif routecode != 'all' and centercode == 'all' and milktype != 'all' :
				bmroute = rpt_bufallomilk.objects.using(brch).raw(sixth)
			elif routecode != 'all' and centercode != 'all'and milktype == 'all' :
				bmroute = rpt_bufallomilk.objects.using(brch).raw(seventh)
			else:
				bmroute = rpt_bufallomilk.objects.using(brch).raw(eigth)


		   
	return render(request, 'bm-route-report.html', locals())

# Module -Reports - masters #2 - Displaying the bufallo_category_report-- bm-category-report.html
# Created by - 2020-12-14 @ Charan
# Modified by - 2020-12-14 @ Charan 
# Modified by - 2020-12-14 @ Charan
import datetime
from django.db import connection
import mysql.connector
from mysql.connector import Error
def bm_category_report(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		route = Route.objects.using(brch).all()
		center = Center.objects.using(brch).all().distinct()
		minmaxfat=MinMaxBuff.objects.using(brch).all()
		milk = Milktype.objects.all().distinct()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode = request.POST["routecode"]
			centercode = request.POST["centercode"]
			milktype = request.POST["milktype"]

			#cursor1 = connection.cursor()
			#DataDel = "delete from School_rpt_bufallomilk"
			#cursor1.execute(DataDel)
			#cursor = connection.cursor()
			#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
			#DataInsert = "insert into school_rpt_bufallomilk(category,from_date,to_date,rate_calculation,commission_type,milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,categoryid,bcategoryid,bfrom_date,bto_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate)select category ,C.from_date,C.to_date,rate_calculation,commission_type,C.milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,category_id,C.id,M.from_date,M.to_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			#cursor1.execute(DataInsert)  
			#print(DataInsert)     
			#cursor.execute(DataInsert)

			first = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			second = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s' and C.milk_type = '%s' "%(str(datefrom),str(dateto),str(milktype))
			third = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			fourth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'  and C.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			fifth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			sixth= "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'  and C.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			seventh = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			eigth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'  and C.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))

			if routecode == 'all' and centercode == 'all' and milktype == 'all' :
				bmcategory = rpt_bufallomilk.objects.using(brch).raw(first)
			elif routecode == 'all' and centercode == 'all'and milktype != 'all' :
				bmcategory = rpt_bufallomilk.objects.using(brch).raw(second)
			elif routecode == 'all' and centercode != 'all' and milktype == 'all' :
				bmcategory = rpt_bufallomilk.objects.using(brch).raw(third)
			elif routecode == 'all' and centercode != 'all'and milktype != 'all' :
				bmcategory = rpt_bufallomilk.objects.using(brch).raw(fourth)
			elif routecode != 'all' and centercode == 'all'and milktype == 'all' :
				bmcategory = rpt_bufallomilk.objects.using(brch).raw(fifth)
			elif routecode != 'all' and centercode == 'all' and milktype != 'all' :
				bmcategory = rpt_bufallomilk.objects.using(brch).raw(sixth)
			elif routecode != 'all' and centercode != 'all'and milktype == 'all' :
				bmcategory = rpt_bufallomilk.objects.using(brch).raw(seventh)  
			else:
				bmcategory = rpt_bufallomilk.objects.using(brch).raw(eigth)
	else:
		route = Route.objects.all()
		center = Center.objects.all().distinct()
		minmaxfat=MinMaxBuff.objects.all()
		milk = Milktype.objects.all().distinct()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode = request.POST["routecode"]
			centercode = request.POST["centercode"]
			milktype = request.POST["milktype"]

			#cursor1 = connection.cursor()
			#DataDel = "delete from School_rpt_bufallomilk"
			#cursor1.execute(DataDel)
			#cursor = connection.cursor()
			#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
			#DataInsert = "insert into school_rpt_bufallomilk(category,from_date,to_date,rate_calculation,commission_type,milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,categoryid,bcategoryid,bfrom_date,bto_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate)select category ,C.from_date,C.to_date,rate_calculation,commission_type,C.milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,category_id,C.id,M.from_date,M.to_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			#cursor1.execute(DataInsert)  
			#print(DataInsert)     
			#cursor.execute(DataInsert)

			first = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			second = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s' and C.milk_type = '%s' "%(str(datefrom),str(dateto),str(milktype))
			third = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			fourth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'  and C.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			fifth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			sixth= "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'  and C.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			seventh = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			eigth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id bcategoryid,M.from_date bfrom_date,M.to_date bto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_bufallomilkcategory C,school_minmaxbuff M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'  and C.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))

			if routecode == 'all' and centercode == 'all' and milktype == 'all' :
				bmcategory = rpt_bufallomilk.objects.using(brch).raw(first)
			elif routecode == 'all' and centercode == 'all'and milktype != 'all' :
				bmcategory = rpt_bufallomilk.objects.using(brch).raw(second)
			elif routecode == 'all' and centercode != 'all' and milktype == 'all' :
				bmcategory = rpt_bufallomilk.objects.using(brch).raw(third)
			elif routecode == 'all' and centercode != 'all'and milktype != 'all' :
				bmcategory = rpt_bufallomilk.objects.using(brch).raw(fourth)
			elif routecode != 'all' and centercode == 'all'and milktype == 'all' :
				bmcategory = rpt_bufallomilk.objects.using(brch).raw(fifth)
			elif routecode != 'all' and centercode == 'all' and milktype != 'all' :
				bmcategory = rpt_bufallomilk.objects.using(brch).raw(sixth)
			elif routecode != 'all' and centercode != 'all'and milktype == 'all' :
				bmcategory = rpt_bufallomilk.objects.using(brch).raw(seventh)  
			else:
				bmcategory = rpt_bufallomilk.objects.using(brch).raw(eigth)	
		
		
	return render(request, 'bm-category-report.html', locals())

# Module -Reports - masters #2 - Displaying the cow milk_center_report-- cm-center-report.html
# Created by - 2020-12-14 @ Charan
# Modified by - 2020-12-14 @ Charan 
# Modified by - 2020-12-14 @ Charan
import datetime
from django.db import connection
import mysql.connector
from mysql.connector import Error
def cm_center_report(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		route = Route.objects.using(brch).all()
		center = Center.objects.using(brch).all().distinct()
		minmaxfat=MinMaxFat.objects.using(brch).all()
		milk = Milktype.objects.all().distinct()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode = request.POST["routecode"]
			centercode = request.POST["centercode"]
			milktype = request.POST["milktype"]

			#cursor1 = connection.cursor()
			#DataDel = "delete from school_rpt_cowmilk"
			#cursor1.execute(DataDel)
			#cursor = connection.cursor()
			#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
			#DataInsert = "insert into school_rpt_cowmilk(centercode,from_date,to_date,rate_calculation,commission_type,milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,centerid,ccenterid,cfrom_date,cto_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate)select centercode ,D.from_date,D.to_date,rate_calculation,commission_type,D.milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,centercode_id,D.id,M.from_date,M.to_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate  from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			#cursor1.execute(DataInsert)  
			#print(DataInsert)     
			#cursor.execute(DataInsert)

			first = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			print(first)
			second = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			third = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and centercode = '%s' "%(str(datefrom),str(dateto),str(centercode))
			fourth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s' and centercode = '%s' "%(str(datefrom),str(dateto),str(milktype),str(centercode))
			fifth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			sixth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s' "%(str(datefrom),str(dateto),str(milktype))
			seventh = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and centercode = '%s' "%(str(datefrom),str(dateto),str(centercode))
			eigth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'  D.milk_type = '%s' and centercode = '%s'"%(str(datefrom),str(dateto),str(milktype),str(centercode))
			
			if routecode == 'all' and centercode == 'all' and milktype == 'all' :
				cmcenter = rpt_cowmilk.objects.using(brch).raw(first)
			elif routecode == 'all' and centercode == 'all'and milktype != 'all' :
				cmcenter = rpt_cowmilk.objects.using(brch).raw(second)
			elif routecode == 'all' and centercode != 'all' and milktype == 'all' :
				cmcenter = rpt_cowmilk.objects.using(brch).raw(third)
			elif routecode == 'all' and centercode != 'all'and milktype != 'all' :
				cmcenter = rpt_cowmilk.objects.using(brch).raw(fourth)
			elif routecode != 'all' and centercode == 'all'and milktype == 'all' :
				cmcenter = rpt_cowmilk.objects.using(brch).raw(fifth)
			elif routecode != 'all' and centercode == 'all' and milktype != 'all' :
				cmcenter = rpt_cowmilk.objects.using(brch).raw(sixth)
			elif routecode != 'all' and centercode != 'all'and milktype == 'all' :
				cmcenter = rpt_cowmilk.objects.using(brch).raw(seventh)
			else:
				cmcenter = rpt_cowmilk.objects.using(brch).raw(eigth)
			
	else:
		route = Route.objects.all()
		center = Center.objects.all().distinct()
		minmaxfat=MinMaxFat.objects.all()
		milk = Milktype.objects.all().distinct()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode = request.POST["routecode"]
			centercode = request.POST["centercode"]
			milktype = request.POST["milktype"]

			#cursor1 = connection.cursor()
			#DataDel = "delete from school_rpt_cowmilk"
			#cursor1.execute(DataDel)
			#cursor = connection.cursor()
			#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
			#DataInsert = "insert into school_rpt_cowmilk(centercode,from_date,to_date,rate_calculation,commission_type,milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,centerid,ccenterid,cfrom_date,cto_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate)select centercode ,D.from_date,D.to_date,rate_calculation,commission_type,D.milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,centercode_id,D.id,M.from_date,M.to_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate  from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			#cursor1.execute(DataInsert)  
			#print(DataInsert)     
			#cursor.execute(DataInsert)

			first = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			second = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			third = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and centercode = '%s' "%(str(datefrom),str(dateto),str(centercode))
			fourth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s' and centercode = '%s' "%(str(datefrom),str(dateto),str(milktype),str(centercode))
			fifth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			sixth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and D.milk_type = '%s' "%(str(datefrom),str(dateto),str(milktype))
			seventh = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s' and centercode = '%s' "%(str(datefrom),str(dateto),str(centercode))
			eigth = "select D.id id,centercode centercode,D.from_date from_date,D.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,D.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,centercode_id centerid,D.id ccenterid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcenter D,school_minmaxfat M where D.from_date=M.from_date and D.to_date=M.to_date and D.id=centercode_id and D.from_date between '%s' and '%s'  D.milk_type = '%s' and centercode = '%s'"%(str(datefrom),str(dateto),str(milktype),str(centercode))
			
			if routecode == 'all' and centercode == 'all' and milktype == 'all' :
				cmcenter = rpt_cowmilk.objects.raw(first)
			elif routecode == 'all' and centercode == 'all'and milktype != 'all' :
				cmcenter = rpt_cowmilk.objects.raw(second)
			elif routecode == 'all' and centercode != 'all' and milktype == 'all' :
				cmcenter = rpt_cowmilk.objects.raw(third)
			elif routecode == 'all' and centercode != 'all'and milktype != 'all' :
				cmcenter = rpt_cowmilk.objects.raw(fourth)
			elif routecode != 'all' and centercode == 'all'and milktype == 'all' :
				cmcenter = rpt_cowmilk.objects.raw(fifth)
			elif routecode != 'all' and centercode == 'all' and milktype != 'all' :
				cmcenter = rpt_cowmilk.objects.raw(sixth)
			elif routecode != 'all' and centercode != 'all'and milktype == 'all' :
				cmcenter = rpt_cowmilk.objects.raw(seventh)
			else:
				cmcenter = rpt_cowmilk.objects.raw(eigth)



	return render(request, 'cm-center-report.html', locals())
	
# Module -Reports - masters #2 - Displaying the cow milk_category_report- cm-category-report.html
# Created by - 2020-12-14 @ Charan
# Modified by - 2020-12-14 @ Charan 
# Modified by - 2020-12-14 @ Charan
import datetime
from django.db import connection
import mysql.connector
from mysql.connector import Error
def cm_category_report(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		route = Route.objects.using(brch).all()
		center = Center.objects.using(brch).all().distinct()
		minmaxfat=MinMaxFat.objects.using(brch).all()
		milk = Milktype.objects.all().distinct()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode = request.POST["routecode"]
			centercode = request.POST["centercode"]
			milktype = request.POST["milktype"]

			#cursor1 = connection.cursor()
			#DataDel = "delete from school_rpt_cowmilk"
			#cursor1.execute(DataDel)
			#cursor = connection.cursor()
			#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
			#DataInsert = "insert into school_rpt_cowmilk(category,from_date,to_date,rate_calculation,commission_type,milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,categoryid,ccategoryid,cfrom_date,cto_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate)select category ,C.from_date,C.to_date,rate_calculation,commission_type,C.milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,category_id,C.id,M.from_date,M.to_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			#cursor1.execute(DataInsert)  
			#print(DataInsert)     
			#cursor.execute(DataInsert)

			first = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			print(first)
			second = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s' and C.milk_type = '%s' "%(str(datefrom),str(dateto),str(milktype))
			third = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			fourth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'and C.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			fifth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			sixth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'and C.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			seventh = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			eigth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s' and C.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))

			if routecode == 'all' and centercode == 'all' and milktype == 'all' :
				cmcategory = rpt_cowmilk.objects.using(brch).raw(first)
			elif routecode == 'all' and centercode == 'all'and milktype != 'all' :
				cmcategory =rpt_cowmilk.objects.using(brch).raw(second)
			elif routecode == 'all' and centercode != 'all' and milktype == 'all' :
				cmcategory =rpt_cowmilk.objects.using(brch).raw(third)
			elif routecode == 'all' and centercode != 'all'and milktype != 'all' :
				cmcategory =rpt_cowmilk.objects.using(brch).raw(fourth)
			elif routecode != 'all' and centercode == 'all'and milktype == 'all' :
				cmcategory =rpt_cowmilk.objects.using(brch).raw(fifth)
			elif routecode != 'all' and centercode == 'all' and milktype != 'all' :
				cmcategory =rpt_cowmilk.objects.using(brch).raw(sixth)
			elif routecode != 'all' and centercode != 'all'and milktype == 'all' :
				cmcategory =rpt_cowmilk.objects.using(brch).raw(seventh)
			else:
				cmcategory =rpt_cowmilk.objects.using(brch).raw(eigth)
		
	else:	
		route = Route.objects.all()
		center = Center.objects.all().distinct()
		minmaxfat=MinMaxFat.objects.all()
		milk = Milktype.objects.all().distinct()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode = request.POST["routecode"]
			centercode = request.POST["centercode"]
			milktype = request.POST["milktype"]

			#cursor1 = connection.cursor()
			#DataDel = "delete from school_rpt_cowmilk"
			#cursor1.execute(DataDel)
			#cursor = connection.cursor()
			#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
			#DataInsert = "insert into school_rpt_cowmilk(category,from_date,to_date,rate_calculation,commission_type,milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,categoryid,ccategoryid,cfrom_date,cto_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate)select category ,C.from_date,C.to_date,rate_calculation,commission_type,C.milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,category_id,C.id,M.from_date,M.to_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			#cursor1.execute(DataInsert)  
			#print(DataInsert)     
			#cursor.execute(DataInsert)

			first = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			second = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s' and C.milk_type = '%s' "%(str(datefrom),str(dateto),str(milktype))
			third = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			fourth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'and C.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			fifth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			sixth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'and C.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			seventh = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			eigth = "select C.id id,category category,C.from_date from_date,C.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,C.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate,category_id categoryid,C.id ccategoryid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkcategory C,school_minmaxfat M where C.from_date=M.from_date and C.to_date=M.to_date and C.id=category_id and C.from_date between '%s' and '%s' and C.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))

			if routecode == 'all' and centercode == 'all' and milktype == 'all' :
				cmcategory = rpt_cowmilk.objects.raw(first)
			elif routecode == 'all' and centercode == 'all'and milktype != 'all' :
				cmcategory =rpt_cowmilk.objects.raw(second)
			elif routecode == 'all' and centercode != 'all' and milktype == 'all' :
				cmcategory =rpt_cowmilk.objects.raw(third)
			elif routecode == 'all' and centercode != 'all'and milktype != 'all' :
				cmcategory =rpt_cowmilk.objects.raw(fourth)
			elif routecode != 'all' and centercode == 'all'and milktype == 'all' :
				cmcategory =rpt_cowmilk.objects.raw(fifth)
			elif routecode != 'all' and centercode == 'all' and milktype != 'all' :
				cmcategory =rpt_cowmilk.objects.raw(sixth)
			elif routecode != 'all' and centercode != 'all'and milktype == 'all' :
				cmcategory =rpt_cowmilk.objects.raw(seventh)
			else:
				cmcategory =rpt_cowmilk.objects.raw(eigth)

	return render(request, 'cm-category-report.html', locals())

# Module -Reports - masters #2 - Displaying the cow milk_route_report- cm-route-report.html
# Created by - 2020-12-14 @ Charan
# Modified by - 2020-12-14 @ Charan 
# Modified by - 2020-12-14 @ Charan
import datetime
from django.db import connection
import mysql.connector
from mysql.connector import Error
def cm_route_report(request):
	brch = request.user.extendeduser.branch
	if request.user.extendeduser.branch == brch:
		route = Route.objects.using(brch).all()
		center = Center.objects.using(brch).all().distinct()
		minmaxfat=MinMaxFat.objects.using(brch).all()
		milk = Milktype.objects.all().distinct()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode = request.POST["routecode"]
			centercode = request.POST["centercode"]
			milktype = request.POST["milktype"]


			#cursor1 = connection.cursor()
			#DataDel = "delete from school_rpt_cowmilk"
			#cursor1.execute(DataDel)
			#cursor = connection.cursor()
			#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
			#DataInsert = "insert into school_rpt_cowmilk(Routecode,from_date,to_date,rate_calculation,commission_type,milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,routeid,crid,cfrom_date,cto_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate)select Routecode ,B.from_date,B.to_date,rate_calculation,commission_type,B.milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,routecode_id,B.id,M.from_date,M.to_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			#cursor1.execute(DataInsert)  
			#print(DataInsert)     
			#cursor.execute(DataInsert)

			first = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			second = "select  B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			third = "select  B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			fourth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			fifth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s'"%(str(datefrom),str(dateto),str(routecode))
			sixth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'and Routecode = '%s' and B.milk_type = '%s'"%(str(datefrom),str(dateto),str(routecode),str(milktype))
			seventh = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s'"%(str(datefrom),str(dateto),str(routecode))
			eigth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' and B.milk_type = '%s'"%(str(datefrom),str(dateto),str(routecode),str(milktype))
			
			if routecode == 'all' and centercode == 'all' and milktype == 'all' :
				cmroute = rpt_cowmilk.objects.using(brch).raw(first)
			elif routecode == 'all' and centercode == 'all'and milktype != 'all' :
				cmroute = rpt_cowmilk.objects.using(brch).raw(second)
			elif routecode == 'all' and centercode != 'all' and milktype == 'all' :
				cmroute = rpt_cowmilk.objects.using(brch).raw(third)
			elif routecode == 'all' and centercode != 'all'and milktype != 'all' :
				cmroute = rpt_cowmilk.objects.using(brch).raw(fourth)
			elif routecode != 'all' and centercode == 'all'and milktype == 'all' :
				cmroute = rpt_cowmilk.objects.using(brch).raw(fifth)
			elif routecode != 'all' and centercode == 'all' and milktype != 'all' :
				cmroute = rpt_cowmilk.objects.using(brch).raw(sixth)
			elif routecode != 'all' and centercode != 'all'and milktype == 'all' :
				cmroute = rpt_cowmilk.objects.using(brch).raw(seventh)
			else:
				cmroute = rpt_cowmilk.objects.using(brch).raw(eigth)
	else:
		route = Route.objects.all()
		center = Center.objects.all().distinct()
		minmaxfat=MinMaxFat.objects.all()
		milk = Milktype.objects.all().distinct()
		today = date.today()
		t_m = datetime.datetime.now().month
		start_of_m = today.replace(day=1, month=t_m)
		end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
		# return HttpResponse(end_of_m)
		if request.method == "POST":
			datefrom = request.POST["datefrom"]
			dateto = request.POST["dateto"]
			routecode = request.POST["routecode"]
			centercode = request.POST["centercode"]
			milktype = request.POST["milktype"]


			#cursor1 = connection.cursor()
			#DataDel = "delete from school_rpt_cowmilk"
			#cursor1.execute(DataDel)
			#cursor = connection.cursor()
			#branch = "create or replace table school_daywisereport select sum(qty) sqty ,fat,snf, sum(can) scans, sum(ltrs) sltrs, avg(fat) afat, avg(snf) asnf, sum(amount) gamt,routecode,centercode, date,shift  from school_daily_data  where date between '%s' and '%s' group by date, shift"%(str(datefrom),str(dateto))  
			#DataInsert = "insert into school_rpt_cowmilk(Routecode,from_date,to_date,rate_calculation,commission_type,milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,routeid,crid,cfrom_date,cto_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate)select Routecode ,B.from_date,B.to_date,rate_calculation,commission_type,B.milk_type,min_fat,max_fat,min_snf,max_snf,tsrate,routecode_id,B.id,M.from_date,M.to_date,fixed_value,snf_value,snf_deduction,fat_from,fat_to,penalty_in_RS,deduction_calculation,premium,amount,sour_milk,curd,min_rate,sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			#cursor1.execute(DataInsert)  
			#print(DataInsert)     
			#cursor.execute(DataInsert)

			first = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			second = "select  B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			third = "select  B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'"%(str(datefrom),str(dateto))
			fourth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and B.milk_type = '%s'"%(str(datefrom),str(dateto),str(milktype))
			fifth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s'"%(str(datefrom),str(dateto),str(routecode))
			sixth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s'and Routecode = '%s' and B.milk_type = '%s'"%(str(datefrom),str(dateto),str(routecode),str(milktype))
			seventh = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s'"%(str(datefrom),str(dateto),str(routecode))
			eigth = "select B.id id,Routecode Routecode,B.from_date from_date,B.to_date to_date,rate_calculation rate_calculation,commission_type commission_type,B.milk_type milk_type,min_fat min_fat,max_fat max_fat,min_SNF min_SNF,max_SNF max_SNF,tsrate tsrate ,routecode_id routeid,B.id crid,M.from_date cfrom_date,M.to_date cto_date,fixed_value fixed_value,snf_value snf_value,snf_deduction snf_deduction,fat_from fat_from,fat_to fat_to,penalty_in_RS penalty_in_RS,deduction_calculation deduction_calculation,premium premium,amount amount,sour_milk sour_milk,curd curd,min_rate min_rate,sour_milkrate sour_milkrate from school_cowmilkroute B,school_minmaxfat M where B.from_date=M.from_date and B.to_date=M.to_date and B.id=routecode_id and B.from_date between '%s' and '%s' and Routecode = '%s' and B.milk_type = '%s'"%(str(datefrom),str(dateto),str(routecode),str(milktype))
			
			if routecode == 'all' and centercode == 'all' and milktype == 'all' :
				cmroute = rpt_cowmilk.objects.using(brch).raw(first)
			elif routecode == 'all' and centercode == 'all'and milktype != 'all' :
				cmroute = rpt_cowmilk.objects.using(brch).raw(second)
			elif routecode == 'all' and centercode != 'all' and milktype == 'all' :
				cmroute = rpt_cowmilk.objects.using(brch).raw(third)
			elif routecode == 'all' and centercode != 'all'and milktype != 'all' :
				cmroute = rpt_cowmilk.objects.using(brch).raw(fourth)
			elif routecode != 'all' and centercode == 'all'and milktype == 'all' :
				cmroute = rpt_cowmilk.objects.using(brch).raw(fifth)
			elif routecode != 'all' and centercode == 'all' and milktype != 'all' :
				cmroute = rpt_cowmilk.objects.using(brch).raw(sixth)
			elif routecode != 'all' and centercode != 'all'and milktype == 'all' :
				cmroute = rpt_cowmilk.objects.using(brch).raw(seventh)
			else:
				cmroute = rpt_cowmilk.objects.using(brch).raw(eigth)	
		

	return render(request, 'cm-route-report.html', locals())


def loanbillreport(request):
	route = Route.objects.all()
	center = Center.objects.all()
	deposit = Deposit.objects.all()
	cloan = Cloan.objects.all()
	branch = Branch.objects.all()
	today = date.today()
	t_m = datetime.datetime.now().month
	start_of_m = today.replace(day =1, month=t_m)
	end_of_m = start_of_m + relativedelta(months=1) - timedelta(days=1)
	# return HttpResponse(end_of_m)
	if request.method == "POST":
		routecode =  request.POST["routecode"]
		centercode = request.POST["centercode"]
		
		lc = Cloan.objects.filter(center=centercode).distinct()
	messages.success(request, 'Your details have been saved!')	
	return render(request,'loanbill.html',locals())

def loanbillsreport(request):
	if request.session.has_key('name'):
		if request.method == "POST":
			for index,j in enumerate(request.POST.getlist('loansdate[]')):
				today = request.POST.getlist("loansdate[]")[index]
			#t_m = datetime.datetime.now().month
			#start_of_m = today.replace(day =1, month=t_m)
				end_of_m = today + relativedelta(days=10)
				
			for index,j in enumerate(request.POST.getlist('loansdate[]')):
				Loanbill = Loanbillsdata.objects.create( 

					sdate = request.POST.getlist("loansdate[]")[index],
					idate = (str(request.POST.getlist("loansdate[]")[index]) + str(timedelta(days=10)))
					#for(n=0;n<=noofinstallments;n++)
					#{
					#	total = request.POST.getlist('total[]')[index]
					#	total = (request.POST.getlist('total[]')[index]) - (request.POST.getlist('installment_amt')[index])
					#}
					
)
				
				loanbill.save()
				return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
			return render(request,'loanbill.html',locals())
	else:
		return render(request,'index.html',locals())


def loanbilldate(request):
	try:
		brch = request.user.extendeduser.branch
		print(brch)
		if request.user.extendeduser.branch == brch:
			center = Center.objects.using(brch).all()
			branch=Branch.objects.using(brch).all()
			loand =  Cloan.objects.using(brch).all()
			if request.session.has_key('name'):
				if request.method == "POST":

					
					for index,j in enumerate(request.POST.getlist('intrest[]')):   
						loandate = Loanbillsdata.objects.using(brch).create(
							#branch = request.POST["branch"],
							sdate = request.POST["dateform"],
							centercode = request.POST["center"],
							idate = request.POST.getlist('idate[]')[index],
							#routecode = request.POST["route"],
							#centercode = request.POST.getlist('center[]')[index],
							installment_amt = request.POST.getlist('installmentamount[]')[index],
							interest_amt = request.POST.getlist('intrest[]')[index],
							total = request.POST.getlist('total[]')[index],
							noofinstallments = request.POST.getlist('noofinstallment[]')[index],
							
							)
					messages.success(request, 'Your details have been saved!')
				return render(request,'loandate.html',locals())
			else:
				return render(request,'index.html',locals())
		else:
			if request.session.has_key('name'):
				if request.method == "POST":
					center = Center.objects.all()
					branch=Branch.objects.all()
					loand =  Cloan.objects.all()
					for index,j in enumerate(request.POST.getlist('intrest[]')):   
						loandate = Loanbillsdata.objects.create(
							#branch = request.POST["branch"],
							sdate = request.POST["dateform"],
							centercode = request.POST["center"],
							idate = request.POST.getlist('idate[]')[index],
							#routecode = request.POST["route"],
							#centercode = request.POST.getlist('center[]')[index],
							installment_amt = request.POST.getlist('installmentamount[]')[index],
							interest_amt = request.POST.getlist('intrest[]')[index],
							total = request.POST.getlist('total[]')[index],
							noofinstallments = request.POST.getlist('noofinstallment[]')[index],
							
							)
					messages.success(request, 'Your details have been saved!')
				return render(request,'loandate.html',locals())
			else:
				return render(request,'index.html',locals())
	except Exception as err:
		messages.error(request,err)
		return render(request,'loandate.html',locals())